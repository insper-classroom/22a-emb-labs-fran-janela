
OLED1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007454  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00407454  00407454  00017454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009d0  20400000  0040745c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000304  204009d0  00407e2c  000209d0  2**2
                  ALLOC
  4 .stack        00002004  20400cd4  00408130  000209d0  2**0
                  ALLOC
  5 .heap         00000200  20402cd8  0040a134  000209d0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209d0  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209fe  2**0
                  CONTENTS, READONLY
  8 .debug_info   0001b6c4  00000000  00000000  00020a57  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003e97  00000000  00000000  0003c11b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00006ae0  00000000  00000000  0003ffb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000a78  00000000  00000000  00046a92  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000ad8  00000000  00000000  0004750a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00022513  00000000  00000000  00047fe2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001088c  00000000  00000000  0006a4f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00090876  00000000  00000000  0007ad81  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00002340  00000000  00000000  0010b5f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	d8 2c 40 20 c9 15 40 00 c5 15 40 00 c5 15 40 00     .,@ ..@...@...@.
  400010:	c5 15 40 00 c5 15 40 00 c5 15 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	c5 15 40 00 c5 15 40 00 00 00 00 00 c5 15 40 00     ..@...@.......@.
  40003c:	c5 15 40 00 c5 15 40 00 c5 15 40 00 25 19 40 00     ..@...@...@.%.@.
  40004c:	29 1b 40 00 c5 15 40 00 c5 15 40 00 c5 15 40 00     ).@...@...@...@.
  40005c:	c5 15 40 00 c5 15 40 00 00 00 00 00 29 11 40 00     ..@...@.....).@.
  40006c:	3d 11 40 00 51 11 40 00 c5 15 40 00 c5 15 40 00     =.@.Q.@...@...@.
  40007c:	c5 15 40 00 65 11 40 00 79 11 40 00 c5 15 40 00     ..@.e.@.y.@...@.
  40008c:	c5 15 40 00 c5 15 40 00 c5 15 40 00 c5 15 40 00     ..@...@...@...@.
  40009c:	a1 1a 40 00 cd 1a 40 00 f9 1a 40 00 c5 15 40 00     ..@...@...@...@.
  4000ac:	c5 15 40 00 c5 15 40 00 c5 15 40 00 c5 15 40 00     ..@...@...@...@.
  4000bc:	c5 15 40 00 c5 15 40 00 c5 15 40 00 c5 15 40 00     ..@...@...@...@.
  4000cc:	c5 15 40 00 00 00 00 00 c5 15 40 00 00 00 00 00     ..@.......@.....
  4000dc:	c5 15 40 00 c5 15 40 00 c5 15 40 00 c5 15 40 00     ..@...@...@...@.
  4000ec:	c5 15 40 00 c5 15 40 00 c5 15 40 00 c5 15 40 00     ..@...@...@...@.
  4000fc:	c5 15 40 00 c5 15 40 00 c5 15 40 00 c5 15 40 00     ..@...@...@...@.
  40010c:	c5 15 40 00 c5 15 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 c5 15 40 00 c5 15 40 00 c5 15 40 00     ......@...@...@.
  40012c:	c5 15 40 00 c5 15 40 00 00 00 00 00 c5 15 40 00     ..@...@.......@.
  40013c:	c5 15 40 00                                         ..@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009d0 	.word	0x204009d0
  40015c:	00000000 	.word	0x00000000
  400160:	0040745c 	.word	0x0040745c

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	0040745c 	.word	0x0040745c
  4001a0:	204009d4 	.word	0x204009d4
  4001a4:	0040745c 	.word	0x0040745c
  4001a8:	00000000 	.word	0x00000000

004001ac <rtc_set_hour_mode>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_mode 1 for 12-hour mode, 0 for 24-hour mode.
 */
void rtc_set_hour_mode(Rtc *p_rtc, uint32_t ul_mode)
{
	if (ul_mode) {
  4001ac:	b921      	cbnz	r1, 4001b8 <rtc_set_hour_mode+0xc>
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
	} else {
		p_rtc->RTC_MR &= (~RTC_MR_HRMOD);
  4001ae:	6843      	ldr	r3, [r0, #4]
  4001b0:	f023 0301 	bic.w	r3, r3, #1
  4001b4:	6043      	str	r3, [r0, #4]
  4001b6:	4770      	bx	lr
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
  4001b8:	6843      	ldr	r3, [r0, #4]
  4001ba:	f043 0301 	orr.w	r3, r3, #1
  4001be:	6043      	str	r3, [r0, #4]
  4001c0:	4770      	bx	lr

004001c2 <rtc_enable_interrupt>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_sources Interrupts to be enabled.
 */
void rtc_enable_interrupt(Rtc *p_rtc, uint32_t ul_sources)
{
	p_rtc->RTC_IER = ul_sources;
  4001c2:	6201      	str	r1, [r0, #32]
  4001c4:	4770      	bx	lr

004001c6 <rtc_get_time>:
 * \param pul_minute Current minute.
 * \param pul_second Current second.
 */
void rtc_get_time(Rtc *p_rtc, uint32_t *pul_hour, uint32_t *pul_minute,
		uint32_t *pul_second)
{
  4001c6:	b430      	push	{r4, r5}
	uint32_t ul_time;
	uint32_t ul_temp;

	/* Get the current RTC time (multiple reads are necessary to insure a stable value). */
	ul_time = p_rtc->RTC_TIMR;
  4001c8:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  4001ca:	6884      	ldr	r4, [r0, #8]
  4001cc:	42a5      	cmp	r5, r4
  4001ce:	d003      	beq.n	4001d8 <rtc_get_time+0x12>
		ul_time = p_rtc->RTC_TIMR;
  4001d0:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  4001d2:	6884      	ldr	r4, [r0, #8]
  4001d4:	42ac      	cmp	r4, r5
  4001d6:	d1fb      	bne.n	4001d0 <rtc_get_time+0xa>
	}

	/* Hour */
	if (pul_hour) {
  4001d8:	b161      	cbz	r1, 4001f4 <rtc_get_time+0x2e>
		ul_temp = (ul_time & RTC_TIMR_HOUR_Msk) >> RTC_TIMR_HOUR_Pos;
		*pul_hour = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  4001da:	f3c4 5001 	ubfx	r0, r4, #20, #2
  4001de:	eb00 0580 	add.w	r5, r0, r0, lsl #2
  4001e2:	f3c4 4003 	ubfx	r0, r4, #16, #4
  4001e6:	eb00 0045 	add.w	r0, r0, r5, lsl #1

		if ((ul_time & RTC_TIMR_AMPM) == RTC_TIMR_AMPM) {
  4001ea:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
			*pul_hour += 12;
  4001ee:	bf18      	it	ne
  4001f0:	300c      	addne	r0, #12
  4001f2:	6008      	str	r0, [r1, #0]
		}
	}

	/* Minute */
	if (pul_minute) {
  4001f4:	b142      	cbz	r2, 400208 <rtc_get_time+0x42>
		ul_temp = (ul_time & RTC_TIMR_MIN_Msk) >> RTC_TIMR_MIN_Pos;
		*pul_minute = (ul_temp >> BCD_SHIFT) * BCD_FACTOR +  (ul_temp & BCD_MASK);
  4001f6:	f3c4 3102 	ubfx	r1, r4, #12, #3
  4001fa:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  4001fe:	f3c4 2003 	ubfx	r0, r4, #8, #4
  400202:	eb00 0141 	add.w	r1, r0, r1, lsl #1
  400206:	6011      	str	r1, [r2, #0]
	}

	/* Second */
	if (pul_second) {
  400208:	b143      	cbz	r3, 40021c <rtc_get_time+0x56>
		ul_temp = (ul_time & RTC_TIMR_SEC_Msk) >> RTC_TIMR_SEC_Pos;
		*pul_second = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40020a:	f3c4 1202 	ubfx	r2, r4, #4, #3
  40020e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  400212:	f004 040f 	and.w	r4, r4, #15
  400216:	eb04 0442 	add.w	r4, r4, r2, lsl #1
  40021a:	601c      	str	r4, [r3, #0]
	}
}
  40021c:	bc30      	pop	{r4, r5}
  40021e:	4770      	bx	lr

00400220 <rtc_set_time>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_time(Rtc *p_rtc, uint32_t ul_hour, uint32_t ul_minute,
		uint32_t ul_second)
{
  400220:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t ul_time = 0;

	/* If 12-hour mode, set AMPM bit */
	if ((p_rtc->RTC_MR & RTC_MR_HRMOD) == RTC_MR_HRMOD) {
  400222:	6844      	ldr	r4, [r0, #4]
		if (ul_hour > 12) {
  400224:	f014 0f01 	tst.w	r4, #1
  400228:	d005      	beq.n	400236 <rtc_set_time+0x16>
  40022a:	290c      	cmp	r1, #12
  40022c:	d903      	bls.n	400236 <rtc_set_time+0x16>
			ul_hour -= 12;
  40022e:	390c      	subs	r1, #12
			ul_time |= RTC_TIMR_AMPM;
  400230:	f44f 0780 	mov.w	r7, #4194304	; 0x400000
  400234:	e000      	b.n	400238 <rtc_set_time+0x18>
	uint32_t ul_time = 0;
  400236:	2700      	movs	r7, #0
	/* Minute */
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);

	/* Second */
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  400238:	4c1c      	ldr	r4, [pc, #112]	; (4002ac <rtc_set_time+0x8c>)
  40023a:	fba4 5603 	umull	r5, r6, r4, r3
  40023e:	08f6      	lsrs	r6, r6, #3
			((ul_second % BCD_FACTOR) << RTC_TIMR_SEC_Pos);
  400240:	eb06 0586 	add.w	r5, r6, r6, lsl #2
  400244:	eba3 0345 	sub.w	r3, r3, r5, lsl #1
  400248:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  40024c:	fba4 6502 	umull	r6, r5, r4, r2
  400250:	08ed      	lsrs	r5, r5, #3
  400252:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);
  400256:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  40025a:	eba2 0545 	sub.w	r5, r2, r5, lsl #1
  40025e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  400262:	433b      	orrs	r3, r7
	ul_time |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  400264:	fba4 4201 	umull	r4, r2, r4, r1
  400268:	08d2      	lsrs	r2, r2, #3
  40026a:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
			((ul_hour % BCD_FACTOR) << RTC_TIMR_HOUR_Pos);
  40026e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  400272:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  400276:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

	/* Update time register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
  40027a:	6983      	ldr	r3, [r0, #24]
  40027c:	f013 0f04 	tst.w	r3, #4
  400280:	d0fb      	beq.n	40027a <rtc_set_time+0x5a>
	p_rtc->RTC_CR |= RTC_CR_UPDTIM;
  400282:	6803      	ldr	r3, [r0, #0]
  400284:	f043 0301 	orr.w	r3, r3, #1
  400288:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  40028a:	6983      	ldr	r3, [r0, #24]
  40028c:	f013 0f01 	tst.w	r3, #1
  400290:	d0fb      	beq.n	40028a <rtc_set_time+0x6a>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  400292:	2301      	movs	r3, #1
  400294:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_TIMR = ul_time;
  400296:	6081      	str	r1, [r0, #8]
	p_rtc->RTC_CR &= (~RTC_CR_UPDTIM);
  400298:	6803      	ldr	r3, [r0, #0]
  40029a:	f023 0301 	bic.w	r3, r3, #1
  40029e:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVTIM);
  4002a0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  4002a2:	f000 0001 	and.w	r0, r0, #1
  4002a6:	bcf0      	pop	{r4, r5, r6, r7}
  4002a8:	4770      	bx	lr
  4002aa:	bf00      	nop
  4002ac:	cccccccd 	.word	0xcccccccd

004002b0 <rtc_set_time_alarm>:
 */
uint32_t rtc_set_time_alarm(Rtc *p_rtc,
		uint32_t ul_hour_flag, uint32_t ul_hour,
		uint32_t ul_minute_flag, uint32_t ul_minute,
		uint32_t ul_second_flag, uint32_t ul_second)
{
  4002b0:	b5f0      	push	{r4, r5, r6, r7, lr}
  4002b2:	9c05      	ldr	r4, [sp, #20]
  4002b4:	9d06      	ldr	r5, [sp, #24]
  4002b6:	9f07      	ldr	r7, [sp, #28]
	uint32_t ul_alarm = 0;

	/* Hour alarm setting */
	if (ul_hour_flag) {
  4002b8:	460e      	mov	r6, r1
  4002ba:	b1b1      	cbz	r1, 4002ea <rtc_set_time_alarm+0x3a>
		/* If 12-hour mode, set AMPM bit */
		if ((p_rtc->RTC_MR & RTC_MR_HRMOD) == RTC_MR_HRMOD) {
  4002bc:	6841      	ldr	r1, [r0, #4]
			if (ul_hour > 12) {
  4002be:	f011 0f01 	tst.w	r1, #1
  4002c2:	d005      	beq.n	4002d0 <rtc_set_time_alarm+0x20>
  4002c4:	2a0c      	cmp	r2, #12
  4002c6:	d903      	bls.n	4002d0 <rtc_set_time_alarm+0x20>
				ul_hour -= 12;
  4002c8:	3a0c      	subs	r2, #12
				ul_alarm |= RTC_TIMR_AMPM;
  4002ca:	f44f 0680 	mov.w	r6, #4194304	; 0x400000
  4002ce:	e000      	b.n	4002d2 <rtc_set_time_alarm+0x22>
	uint32_t ul_alarm = 0;
  4002d0:	2600      	movs	r6, #0
			}
		}

		ul_alarm |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  4002d2:	4919      	ldr	r1, [pc, #100]	; (400338 <rtc_set_time_alarm+0x88>)
  4002d4:	fba1 e102 	umull	lr, r1, r1, r2
  4002d8:	08c9      	lsrs	r1, r1, #3
				((ul_hour % BCD_FACTOR) << RTC_TIMR_HOUR_Pos);
  4002da:	eb01 0e81 	add.w	lr, r1, r1, lsl #2
  4002de:	eba2 024e 	sub.w	r2, r2, lr, lsl #1
  4002e2:	0412      	lsls	r2, r2, #16
		ul_alarm |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  4002e4:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
  4002e8:	4316      	orrs	r6, r2
	}

	/* Minute alarm setting */
	if (ul_minute_flag) {
  4002ea:	b15b      	cbz	r3, 400304 <rtc_set_time_alarm+0x54>
		ul_alarm |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  4002ec:	4b12      	ldr	r3, [pc, #72]	; (400338 <rtc_set_time_alarm+0x88>)
  4002ee:	fba3 2304 	umull	r2, r3, r3, r4
  4002f2:	08db      	lsrs	r3, r3, #3
				((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);
  4002f4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  4002f8:	eba4 0442 	sub.w	r4, r4, r2, lsl #1
  4002fc:	0224      	lsls	r4, r4, #8
		ul_alarm |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  4002fe:	ea44 3403 	orr.w	r4, r4, r3, lsl #12
  400302:	4326      	orrs	r6, r4
	}

	/* Second alarm setting */
	if (ul_second_flag) {
  400304:	b155      	cbz	r5, 40031c <rtc_set_time_alarm+0x6c>
		ul_alarm |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  400306:	4b0c      	ldr	r3, [pc, #48]	; (400338 <rtc_set_time_alarm+0x88>)
  400308:	fba3 2307 	umull	r2, r3, r3, r7
  40030c:	08db      	lsrs	r3, r3, #3
				((ul_second % BCD_FACTOR) << RTC_TIMR_SEC_Pos);
  40030e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  400312:	eba7 0742 	sub.w	r7, r7, r2, lsl #1
		ul_alarm |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  400316:	ea47 1303 	orr.w	r3, r7, r3, lsl #4
  40031a:	431e      	orrs	r6, r3
	}

	p_rtc->RTC_TIMALR &= ~(RTC_TIMALR_SECEN | RTC_TIMALR_MINEN | RTC_TIMALR_HOUREN);
  40031c:	6902      	ldr	r2, [r0, #16]
  40031e:	4b07      	ldr	r3, [pc, #28]	; (40033c <rtc_set_time_alarm+0x8c>)
  400320:	4013      	ands	r3, r2
  400322:	6103      	str	r3, [r0, #16]
	p_rtc->RTC_TIMALR = ul_alarm;
  400324:	6106      	str	r6, [r0, #16]
	p_rtc->RTC_TIMALR |= (RTC_TIMALR_SECEN | RTC_TIMALR_MINEN | RTC_TIMALR_HOUREN);
  400326:	6902      	ldr	r2, [r0, #16]
  400328:	4b05      	ldr	r3, [pc, #20]	; (400340 <rtc_set_time_alarm+0x90>)
  40032a:	4313      	orrs	r3, r2
  40032c:	6103      	str	r3, [r0, #16]

	return (p_rtc->RTC_VER & RTC_VER_NVTIMALR);
  40032e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  400330:	f000 0004 	and.w	r0, r0, #4
  400334:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400336:	bf00      	nop
  400338:	cccccccd 	.word	0xcccccccd
  40033c:	ff7f7f7f 	.word	0xff7f7f7f
  400340:	00808080 	.word	0x00808080

00400344 <rtc_get_date>:
 * \param pul_day Current day.
 * \param pul_week Current day in current week.
 */
void rtc_get_date(Rtc *p_rtc, uint32_t *pul_year, uint32_t *pul_month,
		uint32_t *pul_day, uint32_t *pul_week)
{
  400344:	b4f0      	push	{r4, r5, r6, r7}
  400346:	9e04      	ldr	r6, [sp, #16]
	uint32_t ul_date;
	uint32_t ul_cent;
	uint32_t ul_temp;

	/* Get the current date (multiple reads are necessary to insure a stable value). */
	ul_date = p_rtc->RTC_CALR;
  400348:	68c5      	ldr	r5, [r0, #12]
	while (ul_date != p_rtc->RTC_CALR) {
  40034a:	68c4      	ldr	r4, [r0, #12]
  40034c:	42a5      	cmp	r5, r4
  40034e:	d003      	beq.n	400358 <rtc_get_date+0x14>
		ul_date = p_rtc->RTC_CALR;
  400350:	68c5      	ldr	r5, [r0, #12]
	while (ul_date != p_rtc->RTC_CALR) {
  400352:	68c4      	ldr	r4, [r0, #12]
  400354:	42ac      	cmp	r4, r5
  400356:	d1fb      	bne.n	400350 <rtc_get_date+0xc>
	}

	/* Retrieve year */
	if (pul_year) {
  400358:	b199      	cbz	r1, 400382 <rtc_get_date+0x3e>
		ul_temp = (ul_date & RTC_CALR_CENT_Msk) >> RTC_CALR_CENT_Pos;
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
		ul_temp = (ul_date & RTC_CALR_YEAR_Msk) >> RTC_CALR_YEAR_Pos;
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40035a:	f3c4 3003 	ubfx	r0, r4, #12, #4
  40035e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  400362:	f3c4 2703 	ubfx	r7, r4, #8, #4
  400366:	eb07 0740 	add.w	r7, r7, r0, lsl #1
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40036a:	f3c4 1002 	ubfx	r0, r4, #4, #3
  40036e:	eb00 0580 	add.w	r5, r0, r0, lsl #2
  400372:	f004 000f 	and.w	r0, r4, #15
  400376:	eb00 0045 	add.w	r0, r0, r5, lsl #1
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40037a:	2564      	movs	r5, #100	; 0x64
  40037c:	fb05 7000 	mla	r0, r5, r0, r7
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
  400380:	6008      	str	r0, [r1, #0]
	}

	/* Retrieve month */
	if (pul_month) {
  400382:	b142      	cbz	r2, 400396 <rtc_get_date+0x52>
		ul_temp = (ul_date & RTC_CALR_MONTH_Msk) >> RTC_CALR_MONTH_Pos;
		*pul_month = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  400384:	f3c4 5000 	ubfx	r0, r4, #20, #1
  400388:	0081      	lsls	r1, r0, #2
  40038a:	4408      	add	r0, r1
  40038c:	f3c4 4103 	ubfx	r1, r4, #16, #4
  400390:	eb01 0140 	add.w	r1, r1, r0, lsl #1
  400394:	6011      	str	r1, [r2, #0]
	}

	/* Retrieve day */
	if (pul_day) {
  400396:	b143      	cbz	r3, 4003aa <rtc_get_date+0x66>
		ul_temp = (ul_date & RTC_CALR_DATE_Msk) >> RTC_CALR_DATE_Pos;
		*pul_day = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  400398:	f3c4 7201 	ubfx	r2, r4, #28, #2
  40039c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  4003a0:	f3c4 6103 	ubfx	r1, r4, #24, #4
  4003a4:	eb01 0242 	add.w	r2, r1, r2, lsl #1
  4003a8:	601a      	str	r2, [r3, #0]
	}

	/* Retrieve week */
	if (pul_week) {
  4003aa:	b116      	cbz	r6, 4003b2 <rtc_get_date+0x6e>
		*pul_week = ((ul_date & RTC_CALR_DAY_Msk) >> RTC_CALR_DAY_Pos);
  4003ac:	f3c4 5442 	ubfx	r4, r4, #21, #3
  4003b0:	6034      	str	r4, [r6, #0]
	}
}
  4003b2:	bcf0      	pop	{r4, r5, r6, r7}
  4003b4:	4770      	bx	lr
	...

004003b8 <rtc_set_date>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_date(Rtc *p_rtc, uint32_t ul_year, uint32_t ul_month,
		uint32_t ul_day, uint32_t ul_week)
{
  4003b8:	b470      	push	{r4, r5, r6}

	/* Week */
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);

	/* Day */
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4003ba:	4d2a      	ldr	r5, [pc, #168]	; (400464 <rtc_set_date+0xac>)
  4003bc:	fba5 4603 	umull	r4, r6, r5, r3
  4003c0:	08f6      	lsrs	r6, r6, #3
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);
  4003c2:	9c03      	ldr	r4, [sp, #12]
  4003c4:	0564      	lsls	r4, r4, #21
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4003c6:	ea44 7406 	orr.w	r4, r4, r6, lsl #28
			((ul_day % BCD_FACTOR) << RTC_CALR_DATE_Pos);
  4003ca:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  4003ce:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4003d2:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
	ul_date |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
  4003d6:	fba5 6402 	umull	r6, r4, r5, r2
  4003da:	08e4      	lsrs	r4, r4, #3
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4003dc:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
			((ul_month % BCD_FACTOR) << RTC_CALR_MONTH_Pos);
  4003e0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4003e4:	eba2 0244 	sub.w	r2, r2, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4003e8:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
	ul_date |= ((ul_year / BCD_FACTOR / BCD_FACTOR / BCD_FACTOR) <<
  4003ec:	4b1e      	ldr	r3, [pc, #120]	; (400468 <rtc_set_date+0xb0>)
  4003ee:	fba3 4301 	umull	r4, r3, r3, r1
  4003f2:	099b      	lsrs	r3, r3, #6
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4003f4:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
			((ul_year / BCD_FACTOR / BCD_FACTOR) % BCD_FACTOR) <<  RTC_CALR_CENT_Pos);
  4003f8:	4b1c      	ldr	r3, [pc, #112]	; (40046c <rtc_set_date+0xb4>)
  4003fa:	fba3 4301 	umull	r4, r3, r3, r1
  4003fe:	095b      	lsrs	r3, r3, #5
  400400:	fba5 6403 	umull	r6, r4, r5, r3
  400404:	08e4      	lsrs	r4, r4, #3
  400406:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40040a:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  40040e:	431a      	orrs	r2, r3
			((ul_year % BCD_FACTOR) << RTC_CALR_YEAR_Pos);
  400410:	fba5 4301 	umull	r4, r3, r5, r1
  400414:	08db      	lsrs	r3, r3, #3
  400416:	eb03 0483 	add.w	r4, r3, r3, lsl #2
  40041a:	eba1 0144 	sub.w	r1, r1, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  40041e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	ul_date |= (((ul_year / BCD_FACTOR) % BCD_FACTOR) <<
  400422:	fba5 1503 	umull	r1, r5, r5, r3
  400426:	08ed      	lsrs	r5, r5, #3
  400428:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  40042c:	eba3 0545 	sub.w	r5, r3, r5, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400430:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

	/* Update calendar register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
  400434:	6983      	ldr	r3, [r0, #24]
  400436:	f013 0f04 	tst.w	r3, #4
  40043a:	d0fb      	beq.n	400434 <rtc_set_date+0x7c>
	p_rtc->RTC_CR |= RTC_CR_UPDCAL;
  40043c:	6803      	ldr	r3, [r0, #0]
  40043e:	f043 0302 	orr.w	r3, r3, #2
  400442:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  400444:	6983      	ldr	r3, [r0, #24]
  400446:	f013 0f01 	tst.w	r3, #1
  40044a:	d0fb      	beq.n	400444 <rtc_set_date+0x8c>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  40044c:	2301      	movs	r3, #1
  40044e:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_CALR = ul_date;
  400450:	60c2      	str	r2, [r0, #12]
	p_rtc->RTC_CR &= (~RTC_CR_UPDCAL);
  400452:	6803      	ldr	r3, [r0, #0]
  400454:	f023 0302 	bic.w	r3, r3, #2
  400458:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVCAL);
  40045a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  40045c:	f000 0002 	and.w	r0, r0, #2
  400460:	bc70      	pop	{r4, r5, r6}
  400462:	4770      	bx	lr
  400464:	cccccccd 	.word	0xcccccccd
  400468:	10624dd3 	.word	0x10624dd3
  40046c:	51eb851f 	.word	0x51eb851f

00400470 <rtc_get_status>:
 *
 * \return Status of the RTC.
 */
uint32_t rtc_get_status(Rtc *p_rtc)
{
	return (p_rtc->RTC_SR);
  400470:	6980      	ldr	r0, [r0, #24]
}
  400472:	4770      	bx	lr

00400474 <rtc_clear_status>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_clear Some flag bits which will be cleared.
 */
void rtc_clear_status(Rtc *p_rtc, uint32_t ul_clear)
{
	p_rtc->RTC_SCCR = ul_clear;
  400474:	61c1      	str	r1, [r0, #28]
  400476:	4770      	bx	lr

00400478 <rtt_init>:
 * \return 0 if successful.
 */
uint32_t rtt_init(Rtt *p_rtt, uint16_t us_prescaler)
{
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST | g_wobits_in_rtt_mr);
  400478:	4b03      	ldr	r3, [pc, #12]	; (400488 <rtt_init+0x10>)
  40047a:	681b      	ldr	r3, [r3, #0]
  40047c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
  400480:	4319      	orrs	r1, r3
  400482:	6001      	str	r1, [r0, #0]
#else
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST);
#endif
	return 0;
}
  400484:	2000      	movs	r0, #0
  400486:	4770      	bx	lr
  400488:	204009ec 	.word	0x204009ec

0040048c <rtt_sel_source>:
 * \param p_rtt Pointer to an RTT instance.
 * \param is_rtc_sel RTC 1Hz Clock Selection.
 */
void rtt_sel_source(Rtt *p_rtt, bool is_rtc_sel)
{
	if(is_rtc_sel) {
  40048c:	b941      	cbnz	r1, 4004a0 <rtt_sel_source+0x14>
		g_wobits_in_rtt_mr |= RTT_MR_RTC1HZ;
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
	} else {
		g_wobits_in_rtt_mr &= ~RTT_MR_RTC1HZ;
  40048e:	4a09      	ldr	r2, [pc, #36]	; (4004b4 <rtt_sel_source+0x28>)
  400490:	6813      	ldr	r3, [r2, #0]
  400492:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
  400496:	6013      	str	r3, [r2, #0]
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
  400498:	6802      	ldr	r2, [r0, #0]
  40049a:	4313      	orrs	r3, r2
  40049c:	6003      	str	r3, [r0, #0]
  40049e:	4770      	bx	lr
		g_wobits_in_rtt_mr |= RTT_MR_RTC1HZ;
  4004a0:	4a04      	ldr	r2, [pc, #16]	; (4004b4 <rtt_sel_source+0x28>)
  4004a2:	6813      	ldr	r3, [r2, #0]
  4004a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  4004a8:	6013      	str	r3, [r2, #0]
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
  4004aa:	6802      	ldr	r2, [r0, #0]
  4004ac:	4313      	orrs	r3, r2
  4004ae:	6003      	str	r3, [r0, #0]
  4004b0:	4770      	bx	lr
  4004b2:	bf00      	nop
  4004b4:	204009ec 	.word	0x204009ec

004004b8 <rtt_enable_interrupt>:
 */
void rtt_enable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
	uint32_t temp;

	temp = p_rtt->RTT_MR;
  4004b8:	6802      	ldr	r2, [r0, #0]
	temp |= ul_sources;
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	temp |= g_wobits_in_rtt_mr;
  4004ba:	4b03      	ldr	r3, [pc, #12]	; (4004c8 <rtt_enable_interrupt+0x10>)
  4004bc:	681b      	ldr	r3, [r3, #0]
  4004be:	4319      	orrs	r1, r3
  4004c0:	4311      	orrs	r1, r2
#endif
	p_rtt->RTT_MR = temp;
  4004c2:	6001      	str	r1, [r0, #0]
  4004c4:	4770      	bx	lr
  4004c6:	bf00      	nop
  4004c8:	204009ec 	.word	0x204009ec

004004cc <rtt_disable_interrupt>:
 */
void rtt_disable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
	uint32_t temp = 0;

	temp = p_rtt->RTT_MR;
  4004cc:	6803      	ldr	r3, [r0, #0]
	temp &= (~ul_sources);
  4004ce:	ea23 0101 	bic.w	r1, r3, r1
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	temp |= g_wobits_in_rtt_mr;
  4004d2:	4b02      	ldr	r3, [pc, #8]	; (4004dc <rtt_disable_interrupt+0x10>)
  4004d4:	681b      	ldr	r3, [r3, #0]
  4004d6:	4319      	orrs	r1, r3
#endif
	p_rtt->RTT_MR = temp;
  4004d8:	6001      	str	r1, [r0, #0]
  4004da:	4770      	bx	lr
  4004dc:	204009ec 	.word	0x204009ec

004004e0 <rtt_read_timer_value>:
 *
 * \return The current Real-time Timer value.
 */
uint32_t rtt_read_timer_value(Rtt *p_rtt)
{
	uint32_t rtt_val = p_rtt->RTT_VR;
  4004e0:	6882      	ldr	r2, [r0, #8]

	while (rtt_val != p_rtt->RTT_VR) {
  4004e2:	6883      	ldr	r3, [r0, #8]
  4004e4:	429a      	cmp	r2, r3
  4004e6:	d003      	beq.n	4004f0 <rtt_read_timer_value+0x10>
		rtt_val = p_rtt->RTT_VR;
  4004e8:	6882      	ldr	r2, [r0, #8]
	while (rtt_val != p_rtt->RTT_VR) {
  4004ea:	6883      	ldr	r3, [r0, #8]
  4004ec:	4293      	cmp	r3, r2
  4004ee:	d1fb      	bne.n	4004e8 <rtt_read_timer_value+0x8>
	}

	return rtt_val;
}
  4004f0:	4618      	mov	r0, r3
  4004f2:	4770      	bx	lr

004004f4 <rtt_get_status>:
 *
 * \return The Real-time Timer status.
 */
uint32_t rtt_get_status(Rtt *p_rtt)
{
	return p_rtt->RTT_SR;
  4004f4:	68c0      	ldr	r0, [r0, #12]
}
  4004f6:	4770      	bx	lr

004004f8 <rtt_write_alarm_time>:
 * \param ul_alarm_time Alarm time,Alarm time = ALMV + 1.
 *
 * \retval 0 Configuration is done.
 */
uint32_t rtt_write_alarm_time(Rtt *p_rtt, uint32_t ul_alarm_time)
{
  4004f8:	b570      	push	{r4, r5, r6, lr}
  4004fa:	4606      	mov	r6, r0
  4004fc:	460d      	mov	r5, r1
	uint32_t flag;

	flag = p_rtt->RTT_MR & RTT_MR_ALMIEN;
  4004fe:	6804      	ldr	r4, [r0, #0]
  400500:	f404 3480 	and.w	r4, r4, #65536	; 0x10000

	rtt_disable_interrupt(RTT, RTT_MR_ALMIEN);
  400504:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  400508:	4809      	ldr	r0, [pc, #36]	; (400530 <rtt_write_alarm_time+0x38>)
  40050a:	4b0a      	ldr	r3, [pc, #40]	; (400534 <rtt_write_alarm_time+0x3c>)
  40050c:	4798      	blx	r3

	/**
	 * Alarm time = ALMV + 1,If the incoming parameter 
	 * is 0, the ALMV is set to 0xFFFFFFFF.
	*/
	if(ul_alarm_time == 0) {
  40050e:	b92d      	cbnz	r5, 40051c <rtt_write_alarm_time+0x24>
		p_rtt->RTT_AR = 0xFFFFFFFF;
  400510:	f04f 33ff 	mov.w	r3, #4294967295
  400514:	6073      	str	r3, [r6, #4]
	}
	else {
		p_rtt->RTT_AR = ul_alarm_time - 1;
	}

	if (flag) {
  400516:	b924      	cbnz	r4, 400522 <rtt_write_alarm_time+0x2a>
		rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
	}

	return 0;
}
  400518:	2000      	movs	r0, #0
  40051a:	bd70      	pop	{r4, r5, r6, pc}
		p_rtt->RTT_AR = ul_alarm_time - 1;
  40051c:	3d01      	subs	r5, #1
  40051e:	6075      	str	r5, [r6, #4]
  400520:	e7f9      	b.n	400516 <rtt_write_alarm_time+0x1e>
		rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
  400522:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  400526:	4802      	ldr	r0, [pc, #8]	; (400530 <rtt_write_alarm_time+0x38>)
  400528:	4b03      	ldr	r3, [pc, #12]	; (400538 <rtt_write_alarm_time+0x40>)
  40052a:	4798      	blx	r3
  40052c:	e7f4      	b.n	400518 <rtt_write_alarm_time+0x20>
  40052e:	bf00      	nop
  400530:	400e1830 	.word	0x400e1830
  400534:	004004cd 	.word	0x004004cd
  400538:	004004b9 	.word	0x004004b9

0040053c <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  40053c:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  40053e:	4b07      	ldr	r3, [pc, #28]	; (40055c <spi_enable_clock+0x20>)
  400540:	4298      	cmp	r0, r3
  400542:	d003      	beq.n	40054c <spi_enable_clock+0x10>
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  400544:	4b06      	ldr	r3, [pc, #24]	; (400560 <spi_enable_clock+0x24>)
  400546:	4298      	cmp	r0, r3
  400548:	d004      	beq.n	400554 <spi_enable_clock+0x18>
  40054a:	bd08      	pop	{r3, pc}
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  40054c:	2015      	movs	r0, #21
  40054e:	4b05      	ldr	r3, [pc, #20]	; (400564 <spi_enable_clock+0x28>)
  400550:	4798      	blx	r3
  400552:	bd08      	pop	{r3, pc}
  400554:	202a      	movs	r0, #42	; 0x2a
  400556:	4b03      	ldr	r3, [pc, #12]	; (400564 <spi_enable_clock+0x28>)
  400558:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  40055a:	e7f6      	b.n	40054a <spi_enable_clock+0xe>
  40055c:	40008000 	.word	0x40008000
  400560:	40058000 	.word	0x40058000
  400564:	004012ad 	.word	0x004012ad

00400568 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  400568:	6843      	ldr	r3, [r0, #4]
  40056a:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  40056e:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  400570:	6843      	ldr	r3, [r0, #4]
  400572:	0409      	lsls	r1, r1, #16
  400574:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  400578:	4319      	orrs	r1, r3
  40057a:	6041      	str	r1, [r0, #4]
  40057c:	4770      	bx	lr

0040057e <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  40057e:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  400580:	f643 2499 	movw	r4, #15001	; 0x3a99
  400584:	6905      	ldr	r5, [r0, #16]
  400586:	f015 0f02 	tst.w	r5, #2
  40058a:	d103      	bne.n	400594 <spi_write+0x16>
		if (!timeout--) {
  40058c:	3c01      	subs	r4, #1
  40058e:	d1f9      	bne.n	400584 <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
  400590:	2001      	movs	r0, #1
  400592:	e00c      	b.n	4005ae <spi_write+0x30>
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
	if (p_spi->SPI_MR & SPI_MR_PS) {
  400594:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  400596:	f014 0f02 	tst.w	r4, #2
  40059a:	d006      	beq.n	4005aa <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  40059c:	0412      	lsls	r2, r2, #16
  40059e:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  4005a2:	4311      	orrs	r1, r2
		if (uc_last) {
  4005a4:	b10b      	cbz	r3, 4005aa <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
  4005a6:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  4005aa:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  4005ac:	2000      	movs	r0, #0
}
  4005ae:	bc30      	pop	{r4, r5}
  4005b0:	4770      	bx	lr

004005b2 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  4005b2:	b932      	cbnz	r2, 4005c2 <spi_set_clock_polarity+0x10>
  4005b4:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  4005b8:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4005ba:	f023 0301 	bic.w	r3, r3, #1
  4005be:	6303      	str	r3, [r0, #48]	; 0x30
  4005c0:	4770      	bx	lr
  4005c2:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  4005c6:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4005c8:	f043 0301 	orr.w	r3, r3, #1
  4005cc:	6303      	str	r3, [r0, #48]	; 0x30
  4005ce:	4770      	bx	lr

004005d0 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  4005d0:	b932      	cbnz	r2, 4005e0 <spi_set_clock_phase+0x10>
  4005d2:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  4005d6:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4005d8:	f023 0302 	bic.w	r3, r3, #2
  4005dc:	6303      	str	r3, [r0, #48]	; 0x30
  4005de:	4770      	bx	lr
  4005e0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  4005e4:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4005e6:	f043 0302 	orr.w	r3, r3, #2
  4005ea:	6303      	str	r3, [r0, #48]	; 0x30
  4005ec:	4770      	bx	lr

004005ee <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  4005ee:	2a04      	cmp	r2, #4
  4005f0:	d003      	beq.n	4005fa <spi_configure_cs_behavior+0xc>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  4005f2:	b16a      	cbz	r2, 400610 <spi_configure_cs_behavior+0x22>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  4005f4:	2a08      	cmp	r2, #8
  4005f6:	d016      	beq.n	400626 <spi_configure_cs_behavior+0x38>
  4005f8:	4770      	bx	lr
  4005fa:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  4005fe:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400600:	f023 0308 	bic.w	r3, r3, #8
  400604:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  400606:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400608:	f043 0304 	orr.w	r3, r3, #4
  40060c:	6303      	str	r3, [r0, #48]	; 0x30
  40060e:	4770      	bx	lr
  400610:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  400614:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400616:	f023 0308 	bic.w	r3, r3, #8
  40061a:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  40061c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40061e:	f023 0304 	bic.w	r3, r3, #4
  400622:	6303      	str	r3, [r0, #48]	; 0x30
  400624:	4770      	bx	lr
  400626:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  40062a:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40062c:	f043 0308 	orr.w	r3, r3, #8
  400630:	6303      	str	r3, [r0, #48]	; 0x30
	}
}
  400632:	e7e1      	b.n	4005f8 <spi_configure_cs_behavior+0xa>

00400634 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  400634:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  400638:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40063a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  40063e:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  400640:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  400642:	431a      	orrs	r2, r3
  400644:	630a      	str	r2, [r1, #48]	; 0x30
  400646:	4770      	bx	lr

00400648 <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  400648:	1e43      	subs	r3, r0, #1
  40064a:	4419      	add	r1, r3
  40064c:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  400650:	1e43      	subs	r3, r0, #1
  400652:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  400654:	bf94      	ite	ls
  400656:	b200      	sxthls	r0, r0
		return -1;
  400658:	f04f 30ff 	movhi.w	r0, #4294967295
}
  40065c:	4770      	bx	lr

0040065e <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
  40065e:	b17a      	cbz	r2, 400680 <spi_set_baudrate_div+0x22>
{
  400660:	b410      	push	{r4}
  400662:	4614      	mov	r4, r2
  400664:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  400668:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40066a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  40066e:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  400670:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  400672:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  400676:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  400678:	2000      	movs	r0, #0
}
  40067a:	f85d 4b04 	ldr.w	r4, [sp], #4
  40067e:	4770      	bx	lr
        return -1;
  400680:	f04f 30ff 	mov.w	r0, #4294967295
  400684:	4770      	bx	lr

00400686 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  400686:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400688:	0189      	lsls	r1, r1, #6
  40068a:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  40068c:	2402      	movs	r4, #2
  40068e:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  400690:	f04f 31ff 	mov.w	r1, #4294967295
  400694:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  400696:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  400698:	605a      	str	r2, [r3, #4]
}
  40069a:	f85d 4b04 	ldr.w	r4, [sp], #4
  40069e:	4770      	bx	lr

004006a0 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  4006a0:	0189      	lsls	r1, r1, #6
  4006a2:	2305      	movs	r3, #5
  4006a4:	5043      	str	r3, [r0, r1]
  4006a6:	4770      	bx	lr

004006a8 <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  4006a8:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  4006ac:	61ca      	str	r2, [r1, #28]
  4006ae:	4770      	bx	lr

004006b0 <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4006b0:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
  4006b4:	624a      	str	r2, [r1, #36]	; 0x24
  4006b6:	4770      	bx	lr

004006b8 <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4006b8:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
  4006bc:	6a08      	ldr	r0, [r1, #32]
}
  4006be:	4770      	bx	lr

004006c0 <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  4006c0:	b4f0      	push	{r4, r5, r6, r7}
  4006c2:	b086      	sub	sp, #24
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  4006c4:	2402      	movs	r4, #2
  4006c6:	9401      	str	r4, [sp, #4]
  4006c8:	2408      	movs	r4, #8
  4006ca:	9402      	str	r4, [sp, #8]
  4006cc:	2420      	movs	r4, #32
  4006ce:	9403      	str	r4, [sp, #12]
  4006d0:	2480      	movs	r4, #128	; 0x80
  4006d2:	9404      	str	r4, [sp, #16]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  4006d4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  4006d6:	0be4      	lsrs	r4, r4, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  4006d8:	9405      	str	r4, [sp, #20]
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
  4006da:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
  4006de:	d814      	bhi.n	40070a <tc_find_mck_divisor+0x4a>
  4006e0:	0c4c      	lsrs	r4, r1, #17
			return 0;
		} else if (ul_freq >= ul_low) {
  4006e2:	42a0      	cmp	r0, r4
  4006e4:	d217      	bcs.n	400716 <tc_find_mck_divisor+0x56>
  4006e6:	2501      	movs	r5, #1
		ul_high = ul_mck / divisors[ul_index];
  4006e8:	af01      	add	r7, sp, #4
  4006ea:	f857 4025 	ldr.w	r4, [r7, r5, lsl #2]
  4006ee:	fbb1 f4f4 	udiv	r4, r1, r4
		ul_low  = ul_high / TC_DIV_FACTOR;
  4006f2:	0c26      	lsrs	r6, r4, #16
		if (ul_freq > ul_high) {
  4006f4:	4284      	cmp	r4, r0
  4006f6:	d30a      	bcc.n	40070e <tc_find_mck_divisor+0x4e>
		} else if (ul_freq >= ul_low) {
  4006f8:	4286      	cmp	r6, r0
  4006fa:	d90d      	bls.n	400718 <tc_find_mck_divisor+0x58>
			ul_index++) {
  4006fc:	3501      	adds	r5, #1
	for (ul_index = 0;
  4006fe:	2d05      	cmp	r5, #5
  400700:	d1f3      	bne.n	4006ea <tc_find_mck_divisor+0x2a>
			break;
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
  400702:	2000      	movs	r0, #0
	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
}
  400704:	b006      	add	sp, #24
  400706:	bcf0      	pop	{r4, r5, r6, r7}
  400708:	4770      	bx	lr
			return 0;
  40070a:	2000      	movs	r0, #0
  40070c:	e7fa      	b.n	400704 <tc_find_mck_divisor+0x44>
  40070e:	2000      	movs	r0, #0
  400710:	e7f8      	b.n	400704 <tc_find_mck_divisor+0x44>
	return 1;
  400712:	2001      	movs	r0, #1
  400714:	e7f6      	b.n	400704 <tc_find_mck_divisor+0x44>
	for (ul_index = 0;
  400716:	2500      	movs	r5, #0
	if (p_uldiv) {
  400718:	b12a      	cbz	r2, 400726 <tc_find_mck_divisor+0x66>
		*p_uldiv = divisors[ul_index];
  40071a:	a906      	add	r1, sp, #24
  40071c:	eb01 0185 	add.w	r1, r1, r5, lsl #2
  400720:	f851 1c14 	ldr.w	r1, [r1, #-20]
  400724:	6011      	str	r1, [r2, #0]
	if (p_ultcclks) {
  400726:	2b00      	cmp	r3, #0
  400728:	d0f3      	beq.n	400712 <tc_find_mck_divisor+0x52>
		*p_ultcclks = ul_index;
  40072a:	601d      	str	r5, [r3, #0]
	return 1;
  40072c:	2001      	movs	r0, #1
  40072e:	e7e9      	b.n	400704 <tc_find_mck_divisor+0x44>

00400730 <gfx_mono_set_framebuffer>:
	gfx_mono_set_framebuffer(framebuffer);
\endcode
 */
void gfx_mono_set_framebuffer(uint8_t *framebuffer)
{
	fbpointer = framebuffer;
  400730:	4b01      	ldr	r3, [pc, #4]	; (400738 <gfx_mono_set_framebuffer+0x8>)
  400732:	6018      	str	r0, [r3, #0]
  400734:	4770      	bx	lr
  400736:	bf00      	nop
  400738:	204009f0 	.word	0x204009f0

0040073c <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
  40073c:	4b02      	ldr	r3, [pc, #8]	; (400748 <gfx_mono_framebuffer_put_byte+0xc>)
  40073e:	681b      	ldr	r3, [r3, #0]
  400740:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
  400744:	5442      	strb	r2, [r0, r1]
  400746:	4770      	bx	lr
  400748:	204009f0 	.word	0x204009f0

0040074c <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
  40074c:	4b02      	ldr	r3, [pc, #8]	; (400758 <gfx_mono_framebuffer_get_byte+0xc>)
  40074e:	681b      	ldr	r3, [r3, #0]
  400750:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
}
  400754:	5c40      	ldrb	r0, [r0, r1]
  400756:	4770      	bx	lr
  400758:	204009f0 	.word	0x204009f0

0040075c <gfx_mono_generic_draw_horizontal_line>:
 * \param[in]  length     Length of the line in pixels.
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_horizontal_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
  40075c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t page;
	uint8_t pixelmask;
	uint8_t temp;

	/* Clip line length if too long */
	if (x + length > GFX_MONO_LCD_WIDTH) {
  400760:	1884      	adds	r4, r0, r2
  400762:	2c80      	cmp	r4, #128	; 0x80
  400764:	dd02      	ble.n	40076c <gfx_mono_generic_draw_horizontal_line+0x10>
		length = GFX_MONO_LCD_WIDTH - x;
  400766:	f1c0 0480 	rsb	r4, r0, #128	; 0x80
  40076a:	b2e2      	uxtb	r2, r4
	}

	page = y / 8;
	pixelmask = (1 << (y - (page * 8)));

	if (length == 0) {
  40076c:	b322      	cbz	r2, 4007b8 <gfx_mono_generic_draw_horizontal_line+0x5c>
	page = y / 8;
  40076e:	08cd      	lsrs	r5, r1, #3
	pixelmask = (1 << (y - (page * 8)));
  400770:	eba1 01c5 	sub.w	r1, r1, r5, lsl #3
  400774:	2601      	movs	r6, #1
  400776:	fa06 f101 	lsl.w	r1, r6, r1
  40077a:	b2ce      	uxtb	r6, r1
		/* Nothing to do. Move along. */
		return;
	}

	switch (color) {
  40077c:	2b01      	cmp	r3, #1
  40077e:	d01d      	beq.n	4007bc <gfx_mono_generic_draw_horizontal_line+0x60>
  400780:	2b00      	cmp	r3, #0
  400782:	d035      	beq.n	4007f0 <gfx_mono_generic_draw_horizontal_line+0x94>
  400784:	2b02      	cmp	r3, #2
  400786:	d117      	bne.n	4007b8 <gfx_mono_generic_draw_horizontal_line+0x5c>
  400788:	3801      	subs	r0, #1
  40078a:	b2c7      	uxtb	r7, r0
  40078c:	19d4      	adds	r4, r2, r7
  40078e:	b2e4      	uxtb	r4, r4
		}
		break;

	case GFX_PIXEL_XOR:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
  400790:	f8df a090 	ldr.w	sl, [pc, #144]	; 400824 <gfx_mono_generic_draw_horizontal_line+0xc8>
			temp ^= pixelmask;
			gfx_mono_put_byte(page, x + length, temp);
  400794:	f04f 0900 	mov.w	r9, #0
  400798:	f8df 808c 	ldr.w	r8, [pc, #140]	; 400828 <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  40079c:	4621      	mov	r1, r4
  40079e:	4628      	mov	r0, r5
  4007a0:	47d0      	blx	sl
			temp ^= pixelmask;
  4007a2:	ea86 0200 	eor.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  4007a6:	464b      	mov	r3, r9
  4007a8:	b2d2      	uxtb	r2, r2
  4007aa:	4621      	mov	r1, r4
  4007ac:	4628      	mov	r0, r5
  4007ae:	47c0      	blx	r8
  4007b0:	3c01      	subs	r4, #1
  4007b2:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  4007b4:	42bc      	cmp	r4, r7
  4007b6:	d1f1      	bne.n	40079c <gfx_mono_generic_draw_horizontal_line+0x40>
  4007b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4007bc:	3801      	subs	r0, #1
  4007be:	b2c7      	uxtb	r7, r0
  4007c0:	19d4      	adds	r4, r2, r7
  4007c2:	b2e4      	uxtb	r4, r4
			temp = gfx_mono_get_byte(page, x + length);
  4007c4:	f8df a05c 	ldr.w	sl, [pc, #92]	; 400824 <gfx_mono_generic_draw_horizontal_line+0xc8>
			gfx_mono_put_byte(page, x + length, temp);
  4007c8:	f04f 0900 	mov.w	r9, #0
  4007cc:	f8df 8058 	ldr.w	r8, [pc, #88]	; 400828 <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  4007d0:	4621      	mov	r1, r4
  4007d2:	4628      	mov	r0, r5
  4007d4:	47d0      	blx	sl
			temp |= pixelmask;
  4007d6:	ea46 0200 	orr.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  4007da:	464b      	mov	r3, r9
  4007dc:	b2d2      	uxtb	r2, r2
  4007de:	4621      	mov	r1, r4
  4007e0:	4628      	mov	r0, r5
  4007e2:	47c0      	blx	r8
  4007e4:	3c01      	subs	r4, #1
  4007e6:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  4007e8:	42bc      	cmp	r4, r7
  4007ea:	d1f1      	bne.n	4007d0 <gfx_mono_generic_draw_horizontal_line+0x74>
  4007ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4007f0:	3801      	subs	r0, #1
  4007f2:	b2c7      	uxtb	r7, r0
  4007f4:	19d4      	adds	r4, r2, r7
  4007f6:	b2e4      	uxtb	r4, r4
			temp = gfx_mono_get_byte(page, x + length);
  4007f8:	f8df 8028 	ldr.w	r8, [pc, #40]	; 400824 <gfx_mono_generic_draw_horizontal_line+0xc8>
			temp &= ~pixelmask;
  4007fc:	43ce      	mvns	r6, r1
			gfx_mono_put_byte(page, x + length, temp);
  4007fe:	f8df 9028 	ldr.w	r9, [pc, #40]	; 400828 <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  400802:	4621      	mov	r1, r4
  400804:	4628      	mov	r0, r5
  400806:	47c0      	blx	r8
			temp &= ~pixelmask;
  400808:	ea06 0200 	and.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  40080c:	2300      	movs	r3, #0
  40080e:	b2d2      	uxtb	r2, r2
  400810:	4621      	mov	r1, r4
  400812:	4628      	mov	r0, r5
  400814:	47c8      	blx	r9
  400816:	3c01      	subs	r4, #1
  400818:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  40081a:	42bc      	cmp	r4, r7
  40081c:	d1f1      	bne.n	400802 <gfx_mono_generic_draw_horizontal_line+0xa6>
  40081e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400822:	bf00      	nop
  400824:	00400a5d 	.word	0x00400a5d
  400828:	00400959 	.word	0x00400959

0040082c <gfx_mono_generic_draw_filled_rect>:
 * \param[in]  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
  40082c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400830:	f89d 7020 	ldrb.w	r7, [sp, #32]
	if (height == 0) {
  400834:	b18b      	cbz	r3, 40085a <gfx_mono_generic_draw_filled_rect+0x2e>
  400836:	461c      	mov	r4, r3
  400838:	4690      	mov	r8, r2
  40083a:	4606      	mov	r6, r0
  40083c:	1e4d      	subs	r5, r1, #1
  40083e:	b2ed      	uxtb	r5, r5
  400840:	442c      	add	r4, r5
  400842:	b2e4      	uxtb	r4, r4
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
  400844:	f8df 9018 	ldr.w	r9, [pc, #24]	; 400860 <gfx_mono_generic_draw_filled_rect+0x34>
  400848:	463b      	mov	r3, r7
  40084a:	4642      	mov	r2, r8
  40084c:	4621      	mov	r1, r4
  40084e:	4630      	mov	r0, r6
  400850:	47c8      	blx	r9
  400852:	3c01      	subs	r4, #1
  400854:	b2e4      	uxtb	r4, r4
	while (height-- > 0) {
  400856:	42ac      	cmp	r4, r5
  400858:	d1f6      	bne.n	400848 <gfx_mono_generic_draw_filled_rect+0x1c>
  40085a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40085e:	bf00      	nop
  400860:	0040075d 	.word	0x0040075d

00400864 <gfx_mono_draw_char>:
 * \param[in] y        Y coordinate on screen.
 * \param[in] font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
  400864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400868:	b083      	sub	sp, #12
  40086a:	4604      	mov	r4, r0
  40086c:	4688      	mov	r8, r1
  40086e:	4691      	mov	r9, r2
  400870:	469b      	mov	fp, r3
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
  400872:	7a5b      	ldrb	r3, [r3, #9]
  400874:	f89b 2008 	ldrb.w	r2, [fp, #8]
  400878:	2100      	movs	r1, #0
  40087a:	9100      	str	r1, [sp, #0]
  40087c:	4649      	mov	r1, r9
  40087e:	4640      	mov	r0, r8
  400880:	4d21      	ldr	r5, [pc, #132]	; (400908 <gfx_mono_draw_char+0xa4>)
  400882:	47a8      	blx	r5
			GFX_PIXEL_CLR);

	switch (font->type) {
  400884:	f89b 3000 	ldrb.w	r3, [fp]
  400888:	b113      	cbz	r3, 400890 <gfx_mono_draw_char+0x2c>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
  40088a:	b003      	add	sp, #12
  40088c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
  400890:	f89b 2008 	ldrb.w	r2, [fp, #8]
  400894:	08d3      	lsrs	r3, r2, #3
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
  400896:	f012 0f07 	tst.w	r2, #7
		char_row_size++;
  40089a:	bf18      	it	ne
  40089c:	3301      	addne	r3, #1
	glyph_data_offset = char_row_size * font->height *
  40089e:	f89b a009 	ldrb.w	sl, [fp, #9]
			((uint8_t)ch - font->first_char);
  4008a2:	f89b 700a 	ldrb.w	r7, [fp, #10]
  4008a6:	1be7      	subs	r7, r4, r7
	glyph_data_offset = char_row_size * font->height *
  4008a8:	fb17 f70a 	smulbb	r7, r7, sl
  4008ac:	fb17 f703 	smulbb	r7, r7, r3
	glyph_data = font->data.progmem + glyph_data_offset;
  4008b0:	f8db 3004 	ldr.w	r3, [fp, #4]
  4008b4:	fa13 f787 	uxtah	r7, r3, r7
  4008b8:	e01f      	b.n	4008fa <gfx_mono_draw_char+0x96>
			glyph_byte <<= 1;
  4008ba:	0064      	lsls	r4, r4, #1
  4008bc:	b2e4      	uxtb	r4, r4
  4008be:	3501      	adds	r5, #1
		for (i = 0; i < pixelsToDraw; i++) {
  4008c0:	b2eb      	uxtb	r3, r5
  4008c2:	429e      	cmp	r6, r3
  4008c4:	d910      	bls.n	4008e8 <gfx_mono_draw_char+0x84>
  4008c6:	b2eb      	uxtb	r3, r5
  4008c8:	eb08 0003 	add.w	r0, r8, r3
  4008cc:	b2c0      	uxtb	r0, r0
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
  4008ce:	f013 0f07 	tst.w	r3, #7
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
  4008d2:	bf08      	it	eq
  4008d4:	f817 4b01 	ldrbeq.w	r4, [r7], #1
			if ((glyph_byte & 0x80)) {
  4008d8:	f014 0f80 	tst.w	r4, #128	; 0x80
  4008dc:	d0ed      	beq.n	4008ba <gfx_mono_draw_char+0x56>
				gfx_mono_draw_pixel(inc_x, inc_y,
  4008de:	2201      	movs	r2, #1
  4008e0:	4649      	mov	r1, r9
  4008e2:	4b0a      	ldr	r3, [pc, #40]	; (40090c <gfx_mono_draw_char+0xa8>)
  4008e4:	4798      	blx	r3
  4008e6:	e7e8      	b.n	4008ba <gfx_mono_draw_char+0x56>
		inc_y += 1;
  4008e8:	f109 0901 	add.w	r9, r9, #1
  4008ec:	fa5f f989 	uxtb.w	r9, r9
		rows_left--;
  4008f0:	f10a 3aff 	add.w	sl, sl, #4294967295
	} while (rows_left > 0);
  4008f4:	f01a 0aff 	ands.w	sl, sl, #255	; 0xff
  4008f8:	d0c7      	beq.n	40088a <gfx_mono_draw_char+0x26>
		uint8_t pixelsToDraw = font->width;
  4008fa:	f89b 6008 	ldrb.w	r6, [fp, #8]
		for (i = 0; i < pixelsToDraw; i++) {
  4008fe:	2e00      	cmp	r6, #0
  400900:	d0f2      	beq.n	4008e8 <gfx_mono_draw_char+0x84>
  400902:	2500      	movs	r5, #0
  400904:	462c      	mov	r4, r5
  400906:	e7de      	b.n	4008c6 <gfx_mono_draw_char+0x62>
  400908:	0040082d 	.word	0x0040082d
  40090c:	004009f9 	.word	0x004009f9

00400910 <gfx_mono_draw_string>:
 * \param[in] y         Y coordinate on screen.
 * \param[in] font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
  400910:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400914:	4604      	mov	r4, r0
  400916:	4690      	mov	r8, r2
  400918:	461d      	mov	r5, r3
  40091a:	4689      	mov	r9, r1
			x = start_of_string_position_x;
			y += font->height + 1;
		} else if (*str == '\r') {
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
  40091c:	4f0d      	ldr	r7, [pc, #52]	; (400954 <gfx_mono_draw_string+0x44>)
			x = start_of_string_position_x;
  40091e:	460e      	mov	r6, r1
  400920:	e008      	b.n	400934 <gfx_mono_draw_string+0x24>
			y += font->height + 1;
  400922:	7a6a      	ldrb	r2, [r5, #9]
  400924:	3201      	adds	r2, #1
  400926:	4442      	add	r2, r8
  400928:	fa5f f882 	uxtb.w	r8, r2
			x = start_of_string_position_x;
  40092c:	46b1      	mov	r9, r6
			x += font->width;
		}
	} while (*(++str));
  40092e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  400932:	b16b      	cbz	r3, 400950 <gfx_mono_draw_string+0x40>
		if (*str == '\n') {
  400934:	7820      	ldrb	r0, [r4, #0]
  400936:	280a      	cmp	r0, #10
  400938:	d0f3      	beq.n	400922 <gfx_mono_draw_string+0x12>
		} else if (*str == '\r') {
  40093a:	280d      	cmp	r0, #13
  40093c:	d0f7      	beq.n	40092e <gfx_mono_draw_string+0x1e>
			gfx_mono_draw_char(*str, x, y, font);
  40093e:	462b      	mov	r3, r5
  400940:	4642      	mov	r2, r8
  400942:	4649      	mov	r1, r9
  400944:	47b8      	blx	r7
			x += font->width;
  400946:	7a2b      	ldrb	r3, [r5, #8]
  400948:	4499      	add	r9, r3
  40094a:	fa5f f989 	uxtb.w	r9, r9
  40094e:	e7ee      	b.n	40092e <gfx_mono_draw_string+0x1e>
}
  400950:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400954:	00400865 	.word	0x00400865

00400958 <gfx_mono_ssd1306_put_byte>:
	gfx_mono_ssd1306_put_byte(0, 0, 0xFF, false);
\endcode
  */
 void gfx_mono_ssd1306_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data, bool force)
{
  400958:	b570      	push	{r4, r5, r6, lr}
  40095a:	4604      	mov	r4, r0
  40095c:	460d      	mov	r5, r1
  40095e:	4616      	mov	r6, r2
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	if (!force && data == gfx_mono_framebuffer_get_byte(page, column)) {
  400960:	b91b      	cbnz	r3, 40096a <gfx_mono_ssd1306_put_byte+0x12>
  400962:	4b0d      	ldr	r3, [pc, #52]	; (400998 <gfx_mono_ssd1306_put_byte+0x40>)
  400964:	4798      	blx	r3
  400966:	42b0      	cmp	r0, r6
  400968:	d015      	beq.n	400996 <gfx_mono_ssd1306_put_byte+0x3e>
		return;
	}
	gfx_mono_framebuffer_put_byte(page, column, data);
  40096a:	4632      	mov	r2, r6
  40096c:	4629      	mov	r1, r5
  40096e:	4620      	mov	r0, r4
  400970:	4b0a      	ldr	r3, [pc, #40]	; (40099c <gfx_mono_ssd1306_put_byte+0x44>)
  400972:	4798      	blx	r3
 * \param address the page address
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
  400974:	f004 000f 	and.w	r0, r4, #15
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  400978:	f040 00b0 	orr.w	r0, r0, #176	; 0xb0
  40097c:	4c08      	ldr	r4, [pc, #32]	; (4009a0 <gfx_mono_ssd1306_put_byte+0x48>)
  40097e:	47a0      	blx	r4
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_MSB(address >> 4));
  400980:	f3c5 1002 	ubfx	r0, r5, #4, #3
  400984:	f040 0010 	orr.w	r0, r0, #16
  400988:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_LSB(address & 0x0F));
  40098a:	f005 000f 	and.w	r0, r5, #15
  40098e:	47a0      	blx	r4
#endif

	ssd1306_set_page_address(page);
	ssd1306_set_column_address(column);

	ssd1306_write_data(data);
  400990:	4630      	mov	r0, r6
  400992:	4b04      	ldr	r3, [pc, #16]	; (4009a4 <gfx_mono_ssd1306_put_byte+0x4c>)
  400994:	4798      	blx	r3
  400996:	bd70      	pop	{r4, r5, r6, pc}
  400998:	0040074d 	.word	0x0040074d
  40099c:	0040073d 	.word	0x0040073d
  4009a0:	00400a69 	.word	0x00400a69
  4009a4:	00400c89 	.word	0x00400c89

004009a8 <gfx_mono_ssd1306_init>:
{
  4009a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	gfx_mono_set_framebuffer(framebuffer);
  4009ac:	480d      	ldr	r0, [pc, #52]	; (4009e4 <gfx_mono_ssd1306_init+0x3c>)
  4009ae:	4b0e      	ldr	r3, [pc, #56]	; (4009e8 <gfx_mono_ssd1306_init+0x40>)
  4009b0:	4798      	blx	r3
	ssd1306_init();
  4009b2:	4b0e      	ldr	r3, [pc, #56]	; (4009ec <gfx_mono_ssd1306_init+0x44>)
  4009b4:	4798      	blx	r3
 */
static inline void ssd1306_set_display_start_line_address(uint8_t address)
{
	// Make sure address is 6 bits
	address &= 0x3F;
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(address));
  4009b6:	2040      	movs	r0, #64	; 0x40
  4009b8:	4b0d      	ldr	r3, [pc, #52]	; (4009f0 <gfx_mono_ssd1306_init+0x48>)
  4009ba:	4798      	blx	r3
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  4009bc:	2500      	movs	r5, #0
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
  4009be:	f04f 0801 	mov.w	r8, #1
  4009c2:	462f      	mov	r7, r5
  4009c4:	4e0b      	ldr	r6, [pc, #44]	; (4009f4 <gfx_mono_ssd1306_init+0x4c>)
{
  4009c6:	2400      	movs	r4, #0
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
  4009c8:	4643      	mov	r3, r8
  4009ca:	463a      	mov	r2, r7
  4009cc:	b2e1      	uxtb	r1, r4
  4009ce:	4628      	mov	r0, r5
  4009d0:	47b0      	blx	r6
  4009d2:	3401      	adds	r4, #1
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
  4009d4:	2c80      	cmp	r4, #128	; 0x80
  4009d6:	d1f7      	bne.n	4009c8 <gfx_mono_ssd1306_init+0x20>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  4009d8:	3501      	adds	r5, #1
  4009da:	b2ed      	uxtb	r5, r5
  4009dc:	2d04      	cmp	r5, #4
  4009de:	d1f2      	bne.n	4009c6 <gfx_mono_ssd1306_init+0x1e>
  4009e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4009e4:	204009f4 	.word	0x204009f4
  4009e8:	00400731 	.word	0x00400731
  4009ec:	00400aa9 	.word	0x00400aa9
  4009f0:	00400a69 	.word	0x00400a69
  4009f4:	00400959 	.word	0x00400959

004009f8 <gfx_mono_ssd1306_draw_pixel>:
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
  4009f8:	09c3      	lsrs	r3, r0, #7
  4009fa:	d12a      	bne.n	400a52 <gfx_mono_ssd1306_draw_pixel+0x5a>
  4009fc:	291f      	cmp	r1, #31
  4009fe:	d828      	bhi.n	400a52 <gfx_mono_ssd1306_draw_pixel+0x5a>
{
  400a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400a04:	4614      	mov	r4, r2
  400a06:	4605      	mov	r5, r0
	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
  400a08:	08ce      	lsrs	r6, r1, #3
	pixel_mask = (1 << (y - (page * 8)));
  400a0a:	eba1 01c6 	sub.w	r1, r1, r6, lsl #3
  400a0e:	2201      	movs	r2, #1
  400a10:	fa02 f701 	lsl.w	r7, r2, r1
  400a14:	fa5f f887 	uxtb.w	r8, r7
\endcode
 */
uint8_t gfx_mono_ssd1306_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
  400a18:	4601      	mov	r1, r0
  400a1a:	4630      	mov	r0, r6
  400a1c:	4b0d      	ldr	r3, [pc, #52]	; (400a54 <gfx_mono_ssd1306_draw_pixel+0x5c>)
  400a1e:	4798      	blx	r3
  400a20:	4602      	mov	r2, r0
	switch (color) {
  400a22:	2c01      	cmp	r4, #1
  400a24:	d009      	beq.n	400a3a <gfx_mono_ssd1306_draw_pixel+0x42>
  400a26:	b164      	cbz	r4, 400a42 <gfx_mono_ssd1306_draw_pixel+0x4a>
  400a28:	2c02      	cmp	r4, #2
  400a2a:	d00e      	beq.n	400a4a <gfx_mono_ssd1306_draw_pixel+0x52>
	gfx_mono_put_byte(page, x, pixel_value);
  400a2c:	2300      	movs	r3, #0
  400a2e:	4629      	mov	r1, r5
  400a30:	4630      	mov	r0, r6
  400a32:	4c09      	ldr	r4, [pc, #36]	; (400a58 <gfx_mono_ssd1306_draw_pixel+0x60>)
  400a34:	47a0      	blx	r4
  400a36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pixel_value |= pixel_mask;
  400a3a:	ea48 0200 	orr.w	r2, r8, r0
  400a3e:	b2d2      	uxtb	r2, r2
		break;
  400a40:	e7f4      	b.n	400a2c <gfx_mono_ssd1306_draw_pixel+0x34>
		pixel_value &= ~pixel_mask;
  400a42:	ea20 0207 	bic.w	r2, r0, r7
  400a46:	b2d2      	uxtb	r2, r2
		break;
  400a48:	e7f0      	b.n	400a2c <gfx_mono_ssd1306_draw_pixel+0x34>
		pixel_value ^= pixel_mask;
  400a4a:	ea88 0200 	eor.w	r2, r8, r0
  400a4e:	b2d2      	uxtb	r2, r2
		break;
  400a50:	e7ec      	b.n	400a2c <gfx_mono_ssd1306_draw_pixel+0x34>
  400a52:	4770      	bx	lr
  400a54:	0040074d 	.word	0x0040074d
  400a58:	00400959 	.word	0x00400959

00400a5c <gfx_mono_ssd1306_get_byte>:
{
  400a5c:	b508      	push	{r3, lr}
	return gfx_mono_framebuffer_get_byte(page, column);
  400a5e:	4b01      	ldr	r3, [pc, #4]	; (400a64 <gfx_mono_ssd1306_get_byte+0x8>)
  400a60:	4798      	blx	r3
	ssd1306_set_column_address(column);

	return ssd1306_read_data();

#endif
}
  400a62:	bd08      	pop	{r3, pc}
  400a64:	0040074d 	.word	0x0040074d

00400a68 <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
void ssd1306_write_command(uint8_t command)
{
  400a68:	b538      	push	{r3, r4, r5, lr}
  400a6a:	4605      	mov	r5, r0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400a6c:	2208      	movs	r2, #8
  400a6e:	4b09      	ldr	r3, [pc, #36]	; (400a94 <ssd1306_write_command+0x2c>)
  400a70:	635a      	str	r2, [r3, #52]	; 0x34
	ioport_set_pin_level(SSD1306_DC_PIN, false);
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  400a72:	4c09      	ldr	r4, [pc, #36]	; (400a98 <ssd1306_write_command+0x30>)
  400a74:	2101      	movs	r1, #1
  400a76:	4620      	mov	r0, r4
  400a78:	4b08      	ldr	r3, [pc, #32]	; (400a9c <ssd1306_write_command+0x34>)
  400a7a:	4798      	blx	r3
	spi_write(SPI0, command, 1, 1);
  400a7c:	2301      	movs	r3, #1
  400a7e:	461a      	mov	r2, r3
  400a80:	4629      	mov	r1, r5
  400a82:	4620      	mov	r0, r4
  400a84:	4c06      	ldr	r4, [pc, #24]	; (400aa0 <ssd1306_write_command+0x38>)
  400a86:	47a0      	blx	r4
	delay_us(10);
  400a88:	f44f 70fd 	mov.w	r0, #506	; 0x1fa
  400a8c:	4b05      	ldr	r3, [pc, #20]	; (400aa4 <ssd1306_write_command+0x3c>)
  400a8e:	4798      	blx	r3
  400a90:	bd38      	pop	{r3, r4, r5, pc}
  400a92:	bf00      	nop
  400a94:	400e1000 	.word	0x400e1000
  400a98:	40008000 	.word	0x40008000
  400a9c:	00400569 	.word	0x00400569
  400aa0:	0040057f 	.word	0x0040057f
  400aa4:	20400001 	.word	0x20400001

00400aa8 <ssd1306_init>:
{
  400aa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400aac:	4d66      	ldr	r5, [pc, #408]	; (400c48 <ssd1306_init+0x1a0>)
  400aae:	f44f 3600 	mov.w	r6, #131072	; 0x20000
  400ab2:	612e      	str	r6, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400ab4:	f8c5 60a0 	str.w	r6, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400ab8:	4b64      	ldr	r3, [pc, #400]	; (400c4c <ssd1306_init+0x1a4>)
  400aba:	2708      	movs	r7, #8
  400abc:	611f      	str	r7, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400abe:	f8c3 70a0 	str.w	r7, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400ac2:	666e      	str	r6, [r5, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400ac4:	f8c5 6090 	str.w	r6, [r5, #144]	; 0x90
		base->PIO_MDDR = mask;
  400ac8:	656e      	str	r6, [r5, #84]	; 0x54
		base->PIO_IFDR = mask;
  400aca:	626e      	str	r6, [r5, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400acc:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400ad0:	6f2a      	ldr	r2, [r5, #112]	; 0x70
  400ad2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  400ad6:	672a      	str	r2, [r5, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400ad8:	6f6a      	ldr	r2, [r5, #116]	; 0x74
  400ada:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  400ade:	676a      	str	r2, [r5, #116]	; 0x74
		base->PIO_PUER = mask;
  400ae0:	665f      	str	r7, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400ae2:	f8c3 7090 	str.w	r7, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400ae6:	655f      	str	r7, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400ae8:	625f      	str	r7, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400aea:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400aee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400af0:	f022 0208 	bic.w	r2, r2, #8
  400af4:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400af6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400af8:	f022 0208 	bic.w	r2, r2, #8
  400afc:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  400afe:	601f      	str	r7, [r3, #0]
  400b00:	602e      	str	r6, [r5, #0]
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400b02:	631f      	str	r7, [r3, #48]	; 0x30
  400b04:	632e      	str	r6, [r5, #48]	; 0x30
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  400b06:	f8df 817c 	ldr.w	r8, [pc, #380]	; 400c84 <ssd1306_init+0x1dc>
  400b0a:	2300      	movs	r3, #0
  400b0c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  400b10:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400b14:	4640      	mov	r0, r8
  400b16:	4c4e      	ldr	r4, [pc, #312]	; (400c50 <ssd1306_init+0x1a8>)
  400b18:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  400b1a:	2300      	movs	r3, #0
  400b1c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400b20:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400b24:	4640      	mov	r0, r8
  400b26:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  400b28:	2300      	movs	r3, #0
  400b2a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400b2e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400b32:	4640      	mov	r0, r8
  400b34:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  400b36:	2300      	movs	r3, #0
  400b38:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  400b3c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400b40:	4640      	mov	r0, r8
  400b42:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  400b44:	2300      	movs	r3, #0
  400b46:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400b4a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400b4e:	4640      	mov	r0, r8
  400b50:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  400b52:	2300      	movs	r3, #0
  400b54:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400b58:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400b5c:	4640      	mov	r0, r8
  400b5e:	47a0      	blx	r4
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  400b60:	4c3c      	ldr	r4, [pc, #240]	; (400c54 <ssd1306_init+0x1ac>)
  400b62:	f04f 0902 	mov.w	r9, #2
  400b66:	f8c4 9000 	str.w	r9, [r4]
	p_spi->SPI_CR = SPI_CR_SWRST;
  400b6a:	f04f 0880 	mov.w	r8, #128	; 0x80
  400b6e:	f8c4 8000 	str.w	r8, [r4]
	p_spi->SPI_MR |= SPI_MR_MSTR;
  400b72:	6863      	ldr	r3, [r4, #4]
  400b74:	f043 0301 	orr.w	r3, r3, #1
  400b78:	6063      	str	r3, [r4, #4]
		spi_configure_cs_behavior(SPI0, 1, SPI_CS_KEEP_LOW);
  400b7a:	463a      	mov	r2, r7
  400b7c:	2101      	movs	r1, #1
  400b7e:	4620      	mov	r0, r4
  400b80:	4b35      	ldr	r3, [pc, #212]	; (400c58 <ssd1306_init+0x1b0>)
  400b82:	4798      	blx	r3
		spi_set_clock_polarity(SPI0, 1, 0);
  400b84:	2200      	movs	r2, #0
  400b86:	2101      	movs	r1, #1
  400b88:	4620      	mov	r0, r4
  400b8a:	4b34      	ldr	r3, [pc, #208]	; (400c5c <ssd1306_init+0x1b4>)
  400b8c:	4798      	blx	r3
		spi_set_clock_phase(SPI0, 1, 0);
  400b8e:	2200      	movs	r2, #0
  400b90:	2101      	movs	r1, #1
  400b92:	4620      	mov	r0, r4
  400b94:	4b32      	ldr	r3, [pc, #200]	; (400c60 <ssd1306_init+0x1b8>)
  400b96:	4798      	blx	r3
	p_spi->SPI_MR &= (~SPI_MR_PS);
  400b98:	6863      	ldr	r3, [r4, #4]
  400b9a:	f023 0302 	bic.w	r3, r3, #2
  400b9e:	6063      	str	r3, [r4, #4]
		spi_set_bits_per_transfer(SPI0, 1, SPI_CSR_BITS_8_BIT);
  400ba0:	2200      	movs	r2, #0
  400ba2:	2101      	movs	r1, #1
  400ba4:	4620      	mov	r0, r4
  400ba6:	4b2f      	ldr	r3, [pc, #188]	; (400c64 <ssd1306_init+0x1bc>)
  400ba8:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  400baa:	6863      	ldr	r3, [r4, #4]
  400bac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  400bb0:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  400bb2:	6863      	ldr	r3, [r4, #4]
  400bb4:	f043 0310 	orr.w	r3, r3, #16
  400bb8:	6063      	str	r3, [r4, #4]
		int div = spi_calc_baudrate_div(2000000, sysclk_get_peripheral_hz());
  400bba:	492b      	ldr	r1, [pc, #172]	; (400c68 <ssd1306_init+0x1c0>)
  400bbc:	482b      	ldr	r0, [pc, #172]	; (400c6c <ssd1306_init+0x1c4>)
  400bbe:	4b2c      	ldr	r3, [pc, #176]	; (400c70 <ssd1306_init+0x1c8>)
  400bc0:	4798      	blx	r3
		spi_set_baudrate_div(SPI0,1, div);
  400bc2:	b2c2      	uxtb	r2, r0
  400bc4:	2101      	movs	r1, #1
  400bc6:	4620      	mov	r0, r4
  400bc8:	4b2a      	ldr	r3, [pc, #168]	; (400c74 <ssd1306_init+0x1cc>)
  400bca:	4798      	blx	r3
		spi_enable_clock(SPI0);
  400bcc:	4620      	mov	r0, r4
  400bce:	4b2a      	ldr	r3, [pc, #168]	; (400c78 <ssd1306_init+0x1d0>)
  400bd0:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
  400bd2:	2301      	movs	r3, #1
  400bd4:	6023      	str	r3, [r4, #0]
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400bd6:	636e      	str	r6, [r5, #52]	; 0x34
	delay_cycles(delay_10us); // At lest 10us
  400bd8:	f640 30b8 	movw	r0, #3000	; 0xbb8
  400bdc:	4c27      	ldr	r4, [pc, #156]	; (400c7c <ssd1306_init+0x1d4>)
  400bde:	47a0      	blx	r4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400be0:	632e      	str	r6, [r5, #48]	; 0x30
	delay_cycles(delay_10us); // At lest 10us
  400be2:	f640 30b8 	movw	r0, #3000	; 0xbb8
  400be6:	47a0      	blx	r4
  400be8:	632e      	str	r6, [r5, #48]	; 0x30
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO);
  400bea:	20a8      	movs	r0, #168	; 0xa8
  400bec:	4c24      	ldr	r4, [pc, #144]	; (400c80 <ssd1306_init+0x1d8>)
  400bee:	47a0      	blx	r4
	ssd1306_write_command(0x1F);
  400bf0:	201f      	movs	r0, #31
  400bf2:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET);
  400bf4:	20d3      	movs	r0, #211	; 0xd3
  400bf6:	47a0      	blx	r4
	ssd1306_write_command(0x00);
  400bf8:	2000      	movs	r0, #0
  400bfa:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(0x00));
  400bfc:	2040      	movs	r0, #64	; 0x40
  400bfe:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0);
  400c00:	20a1      	movs	r0, #161	; 0xa1
  400c02:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
  400c04:	20c8      	movs	r0, #200	; 0xc8
  400c06:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS);
  400c08:	20da      	movs	r0, #218	; 0xda
  400c0a:	47a0      	blx	r4
	ssd1306_write_command(0x02);
  400c0c:	4648      	mov	r0, r9
  400c0e:	47a0      	blx	r4
 *
 * \retval contrast the contrast value written to the OLED controller
 */
static inline uint8_t ssd1306_set_contrast(uint8_t contrast)
{
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
  400c10:	2081      	movs	r0, #129	; 0x81
  400c12:	47a0      	blx	r4
	ssd1306_write_command(contrast);
  400c14:	208f      	movs	r0, #143	; 0x8f
  400c16:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON);
  400c18:	20a4      	movs	r0, #164	; 0xa4
  400c1a:	47a0      	blx	r4
 * This function will disable invert on all pixels on the OLED
 *
 */
static inline void ssd1306_display_invert_disable(void)
{
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY);
  400c1c:	20a6      	movs	r0, #166	; 0xa6
  400c1e:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO);
  400c20:	20d5      	movs	r0, #213	; 0xd5
  400c22:	47a0      	blx	r4
	ssd1306_write_command(0x80);
  400c24:	4640      	mov	r0, r8
  400c26:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING);
  400c28:	208d      	movs	r0, #141	; 0x8d
  400c2a:	47a0      	blx	r4
	ssd1306_write_command(0x14);
  400c2c:	2014      	movs	r0, #20
  400c2e:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
  400c30:	20db      	movs	r0, #219	; 0xdb
  400c32:	47a0      	blx	r4
	ssd1306_write_command(0x40); // Default => 0x20 (0.77*VCC)
  400c34:	2040      	movs	r0, #64	; 0x40
  400c36:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
  400c38:	20d9      	movs	r0, #217	; 0xd9
  400c3a:	47a0      	blx	r4
	ssd1306_write_command(0xF1);
  400c3c:	20f1      	movs	r0, #241	; 0xf1
  400c3e:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
  400c40:	20af      	movs	r0, #175	; 0xaf
  400c42:	47a0      	blx	r4
  400c44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400c48:	400e1200 	.word	0x400e1200
  400c4c:	400e1000 	.word	0x400e1000
  400c50:	00400f8d 	.word	0x00400f8d
  400c54:	40008000 	.word	0x40008000
  400c58:	004005ef 	.word	0x004005ef
  400c5c:	004005b3 	.word	0x004005b3
  400c60:	004005d1 	.word	0x004005d1
  400c64:	00400635 	.word	0x00400635
  400c68:	08f0d180 	.word	0x08f0d180
  400c6c:	001e8480 	.word	0x001e8480
  400c70:	00400649 	.word	0x00400649
  400c74:	0040065f 	.word	0x0040065f
  400c78:	0040053d 	.word	0x0040053d
  400c7c:	20400001 	.word	0x20400001
  400c80:	00400a69 	.word	0x00400a69
  400c84:	400e1400 	.word	0x400e1400

00400c88 <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
void ssd1306_write_data(uint8_t data)
{
  400c88:	b538      	push	{r3, r4, r5, lr}
  400c8a:	4605      	mov	r5, r0
  400c8c:	2208      	movs	r2, #8
  400c8e:	4b09      	ldr	r3, [pc, #36]	; (400cb4 <ssd1306_write_data+0x2c>)
  400c90:	631a      	str	r2, [r3, #48]	; 0x30
	ioport_set_pin_level(SSD1306_DC_PIN, true);
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  400c92:	4c09      	ldr	r4, [pc, #36]	; (400cb8 <ssd1306_write_data+0x30>)
  400c94:	2101      	movs	r1, #1
  400c96:	4620      	mov	r0, r4
  400c98:	4b08      	ldr	r3, [pc, #32]	; (400cbc <ssd1306_write_data+0x34>)
  400c9a:	4798      	blx	r3
	spi_write(SPI0, data, 1, 1);
  400c9c:	2301      	movs	r3, #1
  400c9e:	461a      	mov	r2, r3
  400ca0:	4629      	mov	r1, r5
  400ca2:	4620      	mov	r0, r4
  400ca4:	4c06      	ldr	r4, [pc, #24]	; (400cc0 <ssd1306_write_data+0x38>)
  400ca6:	47a0      	blx	r4
	delay_us(10);
  400ca8:	f44f 70fd 	mov.w	r0, #506	; 0x1fa
  400cac:	4b05      	ldr	r3, [pc, #20]	; (400cc4 <ssd1306_write_data+0x3c>)
  400cae:	4798      	blx	r3
  400cb0:	bd38      	pop	{r3, r4, r5, pc}
  400cb2:	bf00      	nop
  400cb4:	400e1000 	.word	0x400e1000
  400cb8:	40008000 	.word	0x40008000
  400cbc:	00400569 	.word	0x00400569
  400cc0:	0040057f 	.word	0x0040057f
  400cc4:	20400001 	.word	0x20400001

00400cc8 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400cc8:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400cca:	4810      	ldr	r0, [pc, #64]	; (400d0c <sysclk_init+0x44>)
  400ccc:	4b10      	ldr	r3, [pc, #64]	; (400d10 <sysclk_init+0x48>)
  400cce:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400cd0:	213e      	movs	r1, #62	; 0x3e
  400cd2:	2000      	movs	r0, #0
  400cd4:	4b0f      	ldr	r3, [pc, #60]	; (400d14 <sysclk_init+0x4c>)
  400cd6:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400cd8:	4c0f      	ldr	r4, [pc, #60]	; (400d18 <sysclk_init+0x50>)
  400cda:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400cdc:	2800      	cmp	r0, #0
  400cde:	d0fc      	beq.n	400cda <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400ce0:	4b0e      	ldr	r3, [pc, #56]	; (400d1c <sysclk_init+0x54>)
  400ce2:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400ce4:	4a0e      	ldr	r2, [pc, #56]	; (400d20 <sysclk_init+0x58>)
  400ce6:	4b0f      	ldr	r3, [pc, #60]	; (400d24 <sysclk_init+0x5c>)
  400ce8:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  400cea:	4c0f      	ldr	r4, [pc, #60]	; (400d28 <sysclk_init+0x60>)
  400cec:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400cee:	2800      	cmp	r0, #0
  400cf0:	d0fc      	beq.n	400cec <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  400cf2:	2002      	movs	r0, #2
  400cf4:	4b0d      	ldr	r3, [pc, #52]	; (400d2c <sysclk_init+0x64>)
  400cf6:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400cf8:	2000      	movs	r0, #0
  400cfa:	4b0d      	ldr	r3, [pc, #52]	; (400d30 <sysclk_init+0x68>)
  400cfc:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400cfe:	4b0d      	ldr	r3, [pc, #52]	; (400d34 <sysclk_init+0x6c>)
  400d00:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400d02:	4802      	ldr	r0, [pc, #8]	; (400d0c <sysclk_init+0x44>)
  400d04:	4b02      	ldr	r3, [pc, #8]	; (400d10 <sysclk_init+0x48>)
  400d06:	4798      	blx	r3
  400d08:	bd10      	pop	{r4, pc}
  400d0a:	bf00      	nop
  400d0c:	11e1a300 	.word	0x11e1a300
  400d10:	0040179d 	.word	0x0040179d
  400d14:	00401229 	.word	0x00401229
  400d18:	0040127d 	.word	0x0040127d
  400d1c:	0040128d 	.word	0x0040128d
  400d20:	20183f01 	.word	0x20183f01
  400d24:	400e0600 	.word	0x400e0600
  400d28:	0040129d 	.word	0x0040129d
  400d2c:	0040118d 	.word	0x0040118d
  400d30:	004011c5 	.word	0x004011c5
  400d34:	00401691 	.word	0x00401691

00400d38 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  400d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400d3a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400d3e:	4b48      	ldr	r3, [pc, #288]	; (400e60 <board_init+0x128>)
  400d40:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  400d42:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400d46:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  400d4a:	4b46      	ldr	r3, [pc, #280]	; (400e64 <board_init+0x12c>)
  400d4c:	2200      	movs	r2, #0
  400d4e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  400d52:	695a      	ldr	r2, [r3, #20]
  400d54:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  400d58:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  400d5a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400d5e:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  400d62:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  400d66:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  400d6a:	f007 0007 	and.w	r0, r7, #7
  400d6e:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  400d70:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  400d74:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  400d78:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  400d7c:	f3bf 8f4f 	dsb	sy
  400d80:	f04f 34ff 	mov.w	r4, #4294967295
  400d84:	fa04 fc00 	lsl.w	ip, r4, r0
  400d88:	fa06 f000 	lsl.w	r0, r6, r0
  400d8c:	fa04 f40e 	lsl.w	r4, r4, lr
  400d90:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  400d94:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  400d96:	463a      	mov	r2, r7
  400d98:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  400d9a:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  400d9e:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  400da2:	3a01      	subs	r2, #1
  400da4:	4423      	add	r3, r4
  400da6:	f1b2 3fff 	cmp.w	r2, #4294967295
  400daa:	d1f6      	bne.n	400d9a <board_init+0x62>
        } while(sets--);
  400dac:	3e01      	subs	r6, #1
  400dae:	4460      	add	r0, ip
  400db0:	f1b6 3fff 	cmp.w	r6, #4294967295
  400db4:	d1ef      	bne.n	400d96 <board_init+0x5e>
  400db6:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  400dba:	4b2a      	ldr	r3, [pc, #168]	; (400e64 <board_init+0x12c>)
  400dbc:	695a      	ldr	r2, [r3, #20]
  400dbe:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  400dc2:	615a      	str	r2, [r3, #20]
  400dc4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400dc8:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400dcc:	4a26      	ldr	r2, [pc, #152]	; (400e68 <board_init+0x130>)
  400dce:	4927      	ldr	r1, [pc, #156]	; (400e6c <board_init+0x134>)
  400dd0:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400dd2:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  400dd6:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  400dd8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400ddc:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400de0:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  400de4:	f022 0201 	bic.w	r2, r2, #1
  400de8:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  400dec:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  400df0:	f022 0201 	bic.w	r2, r2, #1
  400df4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  400df8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400dfc:	f3bf 8f6f 	isb	sy
  400e00:	200a      	movs	r0, #10
  400e02:	4c1b      	ldr	r4, [pc, #108]	; (400e70 <board_init+0x138>)
  400e04:	47a0      	blx	r4
  400e06:	200b      	movs	r0, #11
  400e08:	47a0      	blx	r4
  400e0a:	200c      	movs	r0, #12
  400e0c:	47a0      	blx	r4
  400e0e:	2010      	movs	r0, #16
  400e10:	47a0      	blx	r4
  400e12:	2011      	movs	r0, #17
  400e14:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400e16:	4b17      	ldr	r3, [pc, #92]	; (400e74 <board_init+0x13c>)
  400e18:	f44f 7280 	mov.w	r2, #256	; 0x100
  400e1c:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400e1e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400e22:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400e24:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  400e28:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400e2c:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400e2e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400e32:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400e34:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400e38:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  400e3a:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  400e3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400e40:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400e42:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400e46:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400e48:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400e4a:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400e4e:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400e50:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  400e54:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  400e58:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  400e5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400e5e:	bf00      	nop
  400e60:	400e1850 	.word	0x400e1850
  400e64:	e000ed00 	.word	0xe000ed00
  400e68:	400e0c00 	.word	0x400e0c00
  400e6c:	5a00080c 	.word	0x5a00080c
  400e70:	004012ad 	.word	0x004012ad
  400e74:	400e1200 	.word	0x400e1200

00400e78 <pio_set_debounce_filter>:
void pio_set_debounce_filter(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_cut_off)
{
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Set Debouncing, 0 bit field no effect */
	p_pio->PIO_IFSCER = ul_mask;
  400e78:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
	/*
	 * The debouncing filter can filter a pulse of less than 1/2 Period of a
	 * programmable Divided Slow Clock:
	 * Tdiv_slclk = ((DIV+1)*2).Tslow_clock
	 */
	p_pio->PIO_SCDR = PIO_SCDR_DIV((FREQ_SLOW_CLOCK_EXT /
  400e7c:	0053      	lsls	r3, r2, #1
  400e7e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400e82:	fbb2 f2f3 	udiv	r2, r2, r3
  400e86:	3a01      	subs	r2, #1
  400e88:	f3c2 020d 	ubfx	r2, r2, #0, #14
  400e8c:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
  400e90:	4770      	bx	lr

00400e92 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  400e92:	6301      	str	r1, [r0, #48]	; 0x30
  400e94:	4770      	bx	lr

00400e96 <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  400e96:	6341      	str	r1, [r0, #52]	; 0x34
  400e98:	4770      	bx	lr

00400e9a <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400e9a:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400e9c:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400ea0:	d03a      	beq.n	400f18 <pio_set_peripheral+0x7e>
  400ea2:	d813      	bhi.n	400ecc <pio_set_peripheral+0x32>
  400ea4:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400ea8:	d025      	beq.n	400ef6 <pio_set_peripheral+0x5c>
  400eaa:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400eae:	d10a      	bne.n	400ec6 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  400eb0:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400eb2:	4313      	orrs	r3, r2
  400eb4:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400eb6:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400eb8:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400eba:	400b      	ands	r3, r1
  400ebc:	ea23 0302 	bic.w	r3, r3, r2
  400ec0:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  400ec2:	6042      	str	r2, [r0, #4]
  400ec4:	4770      	bx	lr
	switch (ul_type) {
  400ec6:	2900      	cmp	r1, #0
  400ec8:	d1fb      	bne.n	400ec2 <pio_set_peripheral+0x28>
  400eca:	4770      	bx	lr
  400ecc:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400ed0:	d021      	beq.n	400f16 <pio_set_peripheral+0x7c>
  400ed2:	d809      	bhi.n	400ee8 <pio_set_peripheral+0x4e>
  400ed4:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400ed8:	d1f3      	bne.n	400ec2 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  400eda:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400edc:	4313      	orrs	r3, r2
  400ede:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400ee0:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400ee2:	4313      	orrs	r3, r2
  400ee4:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400ee6:	e7ec      	b.n	400ec2 <pio_set_peripheral+0x28>
	switch (ul_type) {
  400ee8:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400eec:	d013      	beq.n	400f16 <pio_set_peripheral+0x7c>
  400eee:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400ef2:	d010      	beq.n	400f16 <pio_set_peripheral+0x7c>
  400ef4:	e7e5      	b.n	400ec2 <pio_set_peripheral+0x28>
{
  400ef6:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  400ef8:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400efa:	6f04      	ldr	r4, [r0, #112]	; 0x70
  400efc:	43d3      	mvns	r3, r2
  400efe:	4021      	ands	r1, r4
  400f00:	461c      	mov	r4, r3
  400f02:	4019      	ands	r1, r3
  400f04:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400f06:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400f08:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400f0a:	400b      	ands	r3, r1
  400f0c:	4023      	ands	r3, r4
  400f0e:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  400f10:	6042      	str	r2, [r0, #4]
}
  400f12:	f85d 4b04 	ldr.w	r4, [sp], #4
  400f16:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  400f18:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400f1a:	6f01      	ldr	r1, [r0, #112]	; 0x70
  400f1c:	400b      	ands	r3, r1
  400f1e:	ea23 0302 	bic.w	r3, r3, r2
  400f22:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400f24:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400f26:	4313      	orrs	r3, r2
  400f28:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400f2a:	e7ca      	b.n	400ec2 <pio_set_peripheral+0x28>

00400f2c <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400f2c:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400f2e:	f012 0f01 	tst.w	r2, #1
  400f32:	d10d      	bne.n	400f50 <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  400f34:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400f36:	f012 0f0a 	tst.w	r2, #10
  400f3a:	d00b      	beq.n	400f54 <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  400f3c:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  400f3e:	f012 0f02 	tst.w	r2, #2
  400f42:	d109      	bne.n	400f58 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  400f44:	f012 0f08 	tst.w	r2, #8
  400f48:	d008      	beq.n	400f5c <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  400f4a:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  400f4e:	e005      	b.n	400f5c <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  400f50:	6641      	str	r1, [r0, #100]	; 0x64
  400f52:	e7f0      	b.n	400f36 <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  400f54:	6241      	str	r1, [r0, #36]	; 0x24
  400f56:	e7f2      	b.n	400f3e <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  400f58:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  400f5c:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  400f5e:	6001      	str	r1, [r0, #0]
  400f60:	4770      	bx	lr

00400f62 <pio_set_output>:
{
  400f62:	b410      	push	{r4}
  400f64:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  400f66:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400f68:	b94c      	cbnz	r4, 400f7e <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  400f6a:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  400f6c:	b14b      	cbz	r3, 400f82 <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  400f6e:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  400f70:	b94a      	cbnz	r2, 400f86 <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  400f72:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  400f74:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400f76:	6001      	str	r1, [r0, #0]
}
  400f78:	f85d 4b04 	ldr.w	r4, [sp], #4
  400f7c:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  400f7e:	6641      	str	r1, [r0, #100]	; 0x64
  400f80:	e7f4      	b.n	400f6c <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  400f82:	6541      	str	r1, [r0, #84]	; 0x54
  400f84:	e7f4      	b.n	400f70 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  400f86:	6301      	str	r1, [r0, #48]	; 0x30
  400f88:	e7f4      	b.n	400f74 <pio_set_output+0x12>
	...

00400f8c <pio_configure>:
{
  400f8c:	b570      	push	{r4, r5, r6, lr}
  400f8e:	b082      	sub	sp, #8
  400f90:	4605      	mov	r5, r0
  400f92:	4616      	mov	r6, r2
  400f94:	461c      	mov	r4, r3
	switch (ul_type) {
  400f96:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400f9a:	d014      	beq.n	400fc6 <pio_configure+0x3a>
  400f9c:	d90a      	bls.n	400fb4 <pio_configure+0x28>
  400f9e:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400fa2:	d024      	beq.n	400fee <pio_configure+0x62>
  400fa4:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400fa8:	d021      	beq.n	400fee <pio_configure+0x62>
  400faa:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400fae:	d017      	beq.n	400fe0 <pio_configure+0x54>
		return 0;
  400fb0:	2000      	movs	r0, #0
  400fb2:	e01a      	b.n	400fea <pio_configure+0x5e>
	switch (ul_type) {
  400fb4:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400fb8:	d005      	beq.n	400fc6 <pio_configure+0x3a>
  400fba:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400fbe:	d002      	beq.n	400fc6 <pio_configure+0x3a>
  400fc0:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400fc4:	d1f4      	bne.n	400fb0 <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  400fc6:	4632      	mov	r2, r6
  400fc8:	4628      	mov	r0, r5
  400fca:	4b11      	ldr	r3, [pc, #68]	; (401010 <pio_configure+0x84>)
  400fcc:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400fce:	f014 0f01 	tst.w	r4, #1
  400fd2:	d102      	bne.n	400fda <pio_configure+0x4e>
		p_pio->PIO_PUDR = ul_mask;
  400fd4:	662e      	str	r6, [r5, #96]	; 0x60
	return 1;
  400fd6:	2001      	movs	r0, #1
  400fd8:	e007      	b.n	400fea <pio_configure+0x5e>
		p_pio->PIO_PUER = ul_mask;
  400fda:	666e      	str	r6, [r5, #100]	; 0x64
	return 1;
  400fdc:	2001      	movs	r0, #1
  400fde:	e004      	b.n	400fea <pio_configure+0x5e>
		pio_set_input(p_pio, ul_mask, ul_attribute);
  400fe0:	461a      	mov	r2, r3
  400fe2:	4631      	mov	r1, r6
  400fe4:	4b0b      	ldr	r3, [pc, #44]	; (401014 <pio_configure+0x88>)
  400fe6:	4798      	blx	r3
	return 1;
  400fe8:	2001      	movs	r0, #1
}
  400fea:	b002      	add	sp, #8
  400fec:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  400fee:	f004 0301 	and.w	r3, r4, #1
  400ff2:	9300      	str	r3, [sp, #0]
  400ff4:	f3c4 0380 	ubfx	r3, r4, #2, #1
  400ff8:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400ffc:	bf14      	ite	ne
  400ffe:	2200      	movne	r2, #0
  401000:	2201      	moveq	r2, #1
  401002:	4631      	mov	r1, r6
  401004:	4628      	mov	r0, r5
  401006:	4c04      	ldr	r4, [pc, #16]	; (401018 <pio_configure+0x8c>)
  401008:	47a0      	blx	r4
	return 1;
  40100a:	2001      	movs	r0, #1
		break;
  40100c:	e7ed      	b.n	400fea <pio_configure+0x5e>
  40100e:	bf00      	nop
  401010:	00400e9b 	.word	0x00400e9b
  401014:	00400f2d 	.word	0x00400f2d
  401018:	00400f63 	.word	0x00400f63

0040101c <pio_get_output_data_status>:
	if ((p_pio->PIO_ODSR & ul_mask) == 0) {
  40101c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  40101e:	420b      	tst	r3, r1
}
  401020:	bf14      	ite	ne
  401022:	2001      	movne	r0, #1
  401024:	2000      	moveq	r0, #0
  401026:	4770      	bx	lr

00401028 <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
  401028:	f012 0f10 	tst.w	r2, #16
  40102c:	d012      	beq.n	401054 <pio_configure_interrupt+0x2c>
		p_pio->PIO_AIMER = ul_mask;
  40102e:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
  401032:	f012 0f20 	tst.w	r2, #32
  401036:	d007      	beq.n	401048 <pio_configure_interrupt+0x20>
			p_pio->PIO_REHLSR = ul_mask;
  401038:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4
		if (ul_attr & PIO_IT_EDGE) {
  40103c:	f012 0f40 	tst.w	r2, #64	; 0x40
  401040:	d005      	beq.n	40104e <pio_configure_interrupt+0x26>
			p_pio->PIO_ESR = ul_mask;
  401042:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
  401046:	4770      	bx	lr
			p_pio->PIO_FELLSR = ul_mask;
  401048:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
  40104c:	e7f6      	b.n	40103c <pio_configure_interrupt+0x14>
			p_pio->PIO_LSR = ul_mask;
  40104e:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
  401052:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
  401054:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  401058:	4770      	bx	lr

0040105a <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
  40105a:	6401      	str	r1, [r0, #64]	; 0x40
  40105c:	4770      	bx	lr

0040105e <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  40105e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  401060:	4770      	bx	lr

00401062 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  401062:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  401064:	4770      	bx	lr
	...

00401068 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  401068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40106c:	4604      	mov	r4, r0
  40106e:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  401070:	4b0e      	ldr	r3, [pc, #56]	; (4010ac <pio_handler_process+0x44>)
  401072:	4798      	blx	r3
  401074:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  401076:	4620      	mov	r0, r4
  401078:	4b0d      	ldr	r3, [pc, #52]	; (4010b0 <pio_handler_process+0x48>)
  40107a:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  40107c:	4005      	ands	r5, r0
  40107e:	d013      	beq.n	4010a8 <pio_handler_process+0x40>
  401080:	4c0c      	ldr	r4, [pc, #48]	; (4010b4 <pio_handler_process+0x4c>)
  401082:	f104 0660 	add.w	r6, r4, #96	; 0x60
  401086:	e003      	b.n	401090 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  401088:	42b4      	cmp	r4, r6
  40108a:	d00d      	beq.n	4010a8 <pio_handler_process+0x40>
  40108c:	3410      	adds	r4, #16
		while (status != 0) {
  40108e:	b15d      	cbz	r5, 4010a8 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  401090:	6820      	ldr	r0, [r4, #0]
  401092:	4540      	cmp	r0, r8
  401094:	d1f8      	bne.n	401088 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401096:	6861      	ldr	r1, [r4, #4]
  401098:	4229      	tst	r1, r5
  40109a:	d0f5      	beq.n	401088 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  40109c:	68e3      	ldr	r3, [r4, #12]
  40109e:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  4010a0:	6863      	ldr	r3, [r4, #4]
  4010a2:	ea25 0503 	bic.w	r5, r5, r3
  4010a6:	e7ef      	b.n	401088 <pio_handler_process+0x20>
  4010a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4010ac:	0040105f 	.word	0x0040105f
  4010b0:	00401063 	.word	0x00401063
  4010b4:	20400bf4 	.word	0x20400bf4

004010b8 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  4010b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  4010ba:	4c18      	ldr	r4, [pc, #96]	; (40111c <pio_handler_set+0x64>)
  4010bc:	6826      	ldr	r6, [r4, #0]
  4010be:	2e06      	cmp	r6, #6
  4010c0:	d82a      	bhi.n	401118 <pio_handler_set+0x60>
  4010c2:	f04f 0c00 	mov.w	ip, #0
  4010c6:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  4010c8:	4f15      	ldr	r7, [pc, #84]	; (401120 <pio_handler_set+0x68>)
  4010ca:	e004      	b.n	4010d6 <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  4010cc:	3401      	adds	r4, #1
  4010ce:	b2e4      	uxtb	r4, r4
  4010d0:	46a4      	mov	ip, r4
  4010d2:	42a6      	cmp	r6, r4
  4010d4:	d309      	bcc.n	4010ea <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
  4010d6:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  4010d8:	0125      	lsls	r5, r4, #4
  4010da:	597d      	ldr	r5, [r7, r5]
  4010dc:	428d      	cmp	r5, r1
  4010de:	d1f5      	bne.n	4010cc <pio_handler_set+0x14>
  4010e0:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  4010e4:	686d      	ldr	r5, [r5, #4]
  4010e6:	4295      	cmp	r5, r2
  4010e8:	d1f0      	bne.n	4010cc <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  4010ea:	4d0d      	ldr	r5, [pc, #52]	; (401120 <pio_handler_set+0x68>)
  4010ec:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  4010f0:	eb05 040e 	add.w	r4, r5, lr
  4010f4:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  4010f8:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  4010fa:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  4010fc:	9906      	ldr	r1, [sp, #24]
  4010fe:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  401100:	3601      	adds	r6, #1
  401102:	4566      	cmp	r6, ip
  401104:	d005      	beq.n	401112 <pio_handler_set+0x5a>
  401106:	4611      	mov	r1, r2
		gs_ul_nb_sources++;
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  401108:	461a      	mov	r2, r3
  40110a:	4b06      	ldr	r3, [pc, #24]	; (401124 <pio_handler_set+0x6c>)
  40110c:	4798      	blx	r3

	return 0;
  40110e:	2000      	movs	r0, #0
  401110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		gs_ul_nb_sources++;
  401112:	4902      	ldr	r1, [pc, #8]	; (40111c <pio_handler_set+0x64>)
  401114:	600e      	str	r6, [r1, #0]
  401116:	e7f6      	b.n	401106 <pio_handler_set+0x4e>
		return 1;
  401118:	2001      	movs	r0, #1
}
  40111a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40111c:	20400c64 	.word	0x20400c64
  401120:	20400bf4 	.word	0x20400bf4
  401124:	00401029 	.word	0x00401029

00401128 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  401128:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  40112a:	210a      	movs	r1, #10
  40112c:	4801      	ldr	r0, [pc, #4]	; (401134 <PIOA_Handler+0xc>)
  40112e:	4b02      	ldr	r3, [pc, #8]	; (401138 <PIOA_Handler+0x10>)
  401130:	4798      	blx	r3
  401132:	bd08      	pop	{r3, pc}
  401134:	400e0e00 	.word	0x400e0e00
  401138:	00401069 	.word	0x00401069

0040113c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  40113c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  40113e:	210b      	movs	r1, #11
  401140:	4801      	ldr	r0, [pc, #4]	; (401148 <PIOB_Handler+0xc>)
  401142:	4b02      	ldr	r3, [pc, #8]	; (40114c <PIOB_Handler+0x10>)
  401144:	4798      	blx	r3
  401146:	bd08      	pop	{r3, pc}
  401148:	400e1000 	.word	0x400e1000
  40114c:	00401069 	.word	0x00401069

00401150 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  401150:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  401152:	210c      	movs	r1, #12
  401154:	4801      	ldr	r0, [pc, #4]	; (40115c <PIOC_Handler+0xc>)
  401156:	4b02      	ldr	r3, [pc, #8]	; (401160 <PIOC_Handler+0x10>)
  401158:	4798      	blx	r3
  40115a:	bd08      	pop	{r3, pc}
  40115c:	400e1200 	.word	0x400e1200
  401160:	00401069 	.word	0x00401069

00401164 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  401164:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  401166:	2110      	movs	r1, #16
  401168:	4801      	ldr	r0, [pc, #4]	; (401170 <PIOD_Handler+0xc>)
  40116a:	4b02      	ldr	r3, [pc, #8]	; (401174 <PIOD_Handler+0x10>)
  40116c:	4798      	blx	r3
  40116e:	bd08      	pop	{r3, pc}
  401170:	400e1400 	.word	0x400e1400
  401174:	00401069 	.word	0x00401069

00401178 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  401178:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  40117a:	2111      	movs	r1, #17
  40117c:	4801      	ldr	r0, [pc, #4]	; (401184 <PIOE_Handler+0xc>)
  40117e:	4b02      	ldr	r3, [pc, #8]	; (401188 <PIOE_Handler+0x10>)
  401180:	4798      	blx	r3
  401182:	bd08      	pop	{r3, pc}
  401184:	400e1600 	.word	0x400e1600
  401188:	00401069 	.word	0x00401069

0040118c <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  40118c:	2803      	cmp	r0, #3
  40118e:	d011      	beq.n	4011b4 <pmc_mck_set_division+0x28>
  401190:	2804      	cmp	r0, #4
  401192:	d012      	beq.n	4011ba <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  401194:	2802      	cmp	r0, #2
  401196:	bf0c      	ite	eq
  401198:	f44f 7180 	moveq.w	r1, #256	; 0x100
  40119c:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  40119e:	4a08      	ldr	r2, [pc, #32]	; (4011c0 <pmc_mck_set_division+0x34>)
  4011a0:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4011a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  4011a6:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  4011a8:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4011aa:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4011ac:	f013 0f08 	tst.w	r3, #8
  4011b0:	d0fb      	beq.n	4011aa <pmc_mck_set_division+0x1e>
}
  4011b2:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  4011b4:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  4011b8:	e7f1      	b.n	40119e <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  4011ba:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  4011be:	e7ee      	b.n	40119e <pmc_mck_set_division+0x12>
  4011c0:	400e0600 	.word	0x400e0600

004011c4 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4011c4:	4a17      	ldr	r2, [pc, #92]	; (401224 <pmc_switch_mck_to_pllack+0x60>)
  4011c6:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4011c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4011cc:	4318      	orrs	r0, r3
  4011ce:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4011d0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4011d2:	f013 0f08 	tst.w	r3, #8
  4011d6:	d10a      	bne.n	4011ee <pmc_switch_mck_to_pllack+0x2a>
  4011d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4011dc:	4911      	ldr	r1, [pc, #68]	; (401224 <pmc_switch_mck_to_pllack+0x60>)
  4011de:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4011e0:	f012 0f08 	tst.w	r2, #8
  4011e4:	d103      	bne.n	4011ee <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4011e6:	3b01      	subs	r3, #1
  4011e8:	d1f9      	bne.n	4011de <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  4011ea:	2001      	movs	r0, #1
  4011ec:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4011ee:	4a0d      	ldr	r2, [pc, #52]	; (401224 <pmc_switch_mck_to_pllack+0x60>)
  4011f0:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4011f2:	f023 0303 	bic.w	r3, r3, #3
  4011f6:	f043 0302 	orr.w	r3, r3, #2
  4011fa:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4011fc:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4011fe:	f013 0f08 	tst.w	r3, #8
  401202:	d10a      	bne.n	40121a <pmc_switch_mck_to_pllack+0x56>
  401204:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401208:	4906      	ldr	r1, [pc, #24]	; (401224 <pmc_switch_mck_to_pllack+0x60>)
  40120a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40120c:	f012 0f08 	tst.w	r2, #8
  401210:	d105      	bne.n	40121e <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401212:	3b01      	subs	r3, #1
  401214:	d1f9      	bne.n	40120a <pmc_switch_mck_to_pllack+0x46>
			return 1;
  401216:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  401218:	4770      	bx	lr
	return 0;
  40121a:	2000      	movs	r0, #0
  40121c:	4770      	bx	lr
  40121e:	2000      	movs	r0, #0
  401220:	4770      	bx	lr
  401222:	bf00      	nop
  401224:	400e0600 	.word	0x400e0600

00401228 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  401228:	b9a0      	cbnz	r0, 401254 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40122a:	480e      	ldr	r0, [pc, #56]	; (401264 <pmc_switch_mainck_to_xtal+0x3c>)
  40122c:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  40122e:	0209      	lsls	r1, r1, #8
  401230:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  401232:	4a0d      	ldr	r2, [pc, #52]	; (401268 <pmc_switch_mainck_to_xtal+0x40>)
  401234:	401a      	ands	r2, r3
  401236:	4b0d      	ldr	r3, [pc, #52]	; (40126c <pmc_switch_mainck_to_xtal+0x44>)
  401238:	4313      	orrs	r3, r2
  40123a:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40123c:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40123e:	4602      	mov	r2, r0
  401240:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401242:	f013 0f01 	tst.w	r3, #1
  401246:	d0fb      	beq.n	401240 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  401248:	4a06      	ldr	r2, [pc, #24]	; (401264 <pmc_switch_mainck_to_xtal+0x3c>)
  40124a:	6a11      	ldr	r1, [r2, #32]
  40124c:	4b08      	ldr	r3, [pc, #32]	; (401270 <pmc_switch_mainck_to_xtal+0x48>)
  40124e:	430b      	orrs	r3, r1
  401250:	6213      	str	r3, [r2, #32]
  401252:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401254:	4903      	ldr	r1, [pc, #12]	; (401264 <pmc_switch_mainck_to_xtal+0x3c>)
  401256:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  401258:	4a06      	ldr	r2, [pc, #24]	; (401274 <pmc_switch_mainck_to_xtal+0x4c>)
  40125a:	401a      	ands	r2, r3
  40125c:	4b06      	ldr	r3, [pc, #24]	; (401278 <pmc_switch_mainck_to_xtal+0x50>)
  40125e:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401260:	620b      	str	r3, [r1, #32]
  401262:	4770      	bx	lr
  401264:	400e0600 	.word	0x400e0600
  401268:	ffc8fffc 	.word	0xffc8fffc
  40126c:	00370001 	.word	0x00370001
  401270:	01370000 	.word	0x01370000
  401274:	fec8fffc 	.word	0xfec8fffc
  401278:	01370002 	.word	0x01370002

0040127c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  40127c:	4b02      	ldr	r3, [pc, #8]	; (401288 <pmc_osc_is_ready_mainck+0xc>)
  40127e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401280:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  401284:	4770      	bx	lr
  401286:	bf00      	nop
  401288:	400e0600 	.word	0x400e0600

0040128c <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  40128c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401290:	4b01      	ldr	r3, [pc, #4]	; (401298 <pmc_disable_pllack+0xc>)
  401292:	629a      	str	r2, [r3, #40]	; 0x28
  401294:	4770      	bx	lr
  401296:	bf00      	nop
  401298:	400e0600 	.word	0x400e0600

0040129c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  40129c:	4b02      	ldr	r3, [pc, #8]	; (4012a8 <pmc_is_locked_pllack+0xc>)
  40129e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4012a0:	f000 0002 	and.w	r0, r0, #2
  4012a4:	4770      	bx	lr
  4012a6:	bf00      	nop
  4012a8:	400e0600 	.word	0x400e0600

004012ac <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  4012ac:	283f      	cmp	r0, #63	; 0x3f
  4012ae:	d81e      	bhi.n	4012ee <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  4012b0:	281f      	cmp	r0, #31
  4012b2:	d80c      	bhi.n	4012ce <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4012b4:	4b11      	ldr	r3, [pc, #68]	; (4012fc <pmc_enable_periph_clk+0x50>)
  4012b6:	699a      	ldr	r2, [r3, #24]
  4012b8:	2301      	movs	r3, #1
  4012ba:	4083      	lsls	r3, r0
  4012bc:	4393      	bics	r3, r2
  4012be:	d018      	beq.n	4012f2 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  4012c0:	2301      	movs	r3, #1
  4012c2:	fa03 f000 	lsl.w	r0, r3, r0
  4012c6:	4b0d      	ldr	r3, [pc, #52]	; (4012fc <pmc_enable_periph_clk+0x50>)
  4012c8:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4012ca:	2000      	movs	r0, #0
  4012cc:	4770      	bx	lr
		ul_id -= 32;
  4012ce:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4012d0:	4b0a      	ldr	r3, [pc, #40]	; (4012fc <pmc_enable_periph_clk+0x50>)
  4012d2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4012d6:	2301      	movs	r3, #1
  4012d8:	4083      	lsls	r3, r0
  4012da:	4393      	bics	r3, r2
  4012dc:	d00b      	beq.n	4012f6 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  4012de:	2301      	movs	r3, #1
  4012e0:	fa03 f000 	lsl.w	r0, r3, r0
  4012e4:	4b05      	ldr	r3, [pc, #20]	; (4012fc <pmc_enable_periph_clk+0x50>)
  4012e6:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  4012ea:	2000      	movs	r0, #0
  4012ec:	4770      	bx	lr
		return 1;
  4012ee:	2001      	movs	r0, #1
  4012f0:	4770      	bx	lr
	return 0;
  4012f2:	2000      	movs	r0, #0
  4012f4:	4770      	bx	lr
  4012f6:	2000      	movs	r0, #0
}
  4012f8:	4770      	bx	lr
  4012fa:	bf00      	nop
  4012fc:	400e0600 	.word	0x400e0600

00401300 <pmc_set_flash_in_wait_mode>:
 *
 * \param ul_flash_state PMC_WAIT_MODE_FLASH_STANDBY flash in standby mode,
 * PMC_WAIT_MODE_FLASH_DEEP_POWERDOWN flash in deep power down mode.
 */
void pmc_set_flash_in_wait_mode(uint32_t ul_flash_state)
{
  401300:	4770      	bx	lr
	...

00401304 <pmc_enable_waitmode>:
void pmc_enable_waitmode(void)
{
	uint32_t i;

	/* Flash in wait mode */
	i = PMC->PMC_FSMR;
  401304:	4a10      	ldr	r2, [pc, #64]	; (401348 <pmc_enable_waitmode+0x44>)
  401306:	6f13      	ldr	r3, [r2, #112]	; 0x70
	i &= ~PMC_FSMR_FLPM_Msk;
  401308:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
#if !(SAMV71 || SAMV70 || SAME70 || SAMS70)
	i |= ul_flash_in_wait_mode;
#else
	i |= PMC_WAIT_MODE_FLASH_IDLE;
  40130c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
#endif
	PMC->PMC_FSMR = i;
  401310:	6713      	str	r3, [r2, #112]	; 0x70

	/* Set the WAITMODE bit = 1 */
	PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_WAITMODE;
  401312:	6a11      	ldr	r1, [r2, #32]
  401314:	4b0d      	ldr	r3, [pc, #52]	; (40134c <pmc_enable_waitmode+0x48>)
  401316:	430b      	orrs	r3, r1
  401318:	6213      	str	r3, [r2, #32]

	/* Waiting for Master Clock Ready MCKRDY = 1 */
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40131a:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40131c:	f013 0f08 	tst.w	r3, #8
  401320:	d0fb      	beq.n	40131a <pmc_enable_waitmode+0x16>
  401322:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
  __ASM volatile ("nop");
  401326:	bf00      	nop

	/* Waiting for MOSCRCEN bit cleared is strongly recommended
	 * to ensure that the core will not execute undesired instructions
	 */
	for (i = 0; i < 500; i++) {
  401328:	3b01      	subs	r3, #1
  40132a:	d1fc      	bne.n	401326 <pmc_enable_waitmode+0x22>
		__NOP();
	}
	while (!(PMC->CKGR_MOR & CKGR_MOR_MOSCRCEN));
  40132c:	4a06      	ldr	r2, [pc, #24]	; (401348 <pmc_enable_waitmode+0x44>)
  40132e:	6a13      	ldr	r3, [r2, #32]
  401330:	f013 0f08 	tst.w	r3, #8
  401334:	d0fb      	beq.n	40132e <pmc_enable_waitmode+0x2a>

#if (!SAMG)
	/* Restore Flash in idle mode */
	i = PMC->PMC_FSMR;
  401336:	4a04      	ldr	r2, [pc, #16]	; (401348 <pmc_enable_waitmode+0x44>)
  401338:	6f13      	ldr	r3, [r2, #112]	; 0x70
	i &= ~PMC_FSMR_FLPM_Msk;
  40133a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
	i |= PMC_WAIT_MODE_FLASH_IDLE;
  40133e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
	PMC->PMC_FSMR = i;
  401342:	6713      	str	r3, [r2, #112]	; 0x70
  401344:	4770      	bx	lr
  401346:	bf00      	nop
  401348:	400e0600 	.word	0x400e0600
  40134c:	00370004 	.word	0x00370004

00401350 <pmc_sleep>:
static volatile bool b_is_sleep_clock_used = false;
/** Callback invoked once when clocks are restored */
static pmc_callback_wakeup_clocks_restored_t callback_clocks_restored = NULL;

void pmc_sleep(int sleep_mode)
{
  401350:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	switch (sleep_mode) {
  401354:	1e43      	subs	r3, r0, #1
  401356:	2b04      	cmp	r3, #4
  401358:	f200 8107 	bhi.w	40156a <pmc_sleep+0x21a>
  40135c:	e8df f013 	tbh	[pc, r3, lsl #1]
  401360:	00050005 	.word	0x00050005
  401364:	00150015 	.word	0x00150015
  401368:	00f6      	.short	0x00f6
	case SAM_PM_SMODE_SLEEP_WFI:
	case SAM_PM_SMODE_SLEEP_WFE:
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG || SAMV71 || SAMV70 || SAMS70 || SAME70)
		SCB->SCR &= (uint32_t)~SCR_SLEEPDEEP;
  40136a:	4a81      	ldr	r2, [pc, #516]	; (401570 <pmc_sleep+0x220>)
  40136c:	6913      	ldr	r3, [r2, #16]
  40136e:	f023 0304 	bic.w	r3, r3, #4
  401372:	6113      	str	r3, [r2, #16]
		cpu_irq_enable();
  401374:	2201      	movs	r2, #1
  401376:	4b7f      	ldr	r3, [pc, #508]	; (401574 <pmc_sleep+0x224>)
  401378:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  40137a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  40137e:	b662      	cpsie	i
  __ASM volatile ("dsb");
  401380:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("wfi");
  401384:	bf30      	wfi
  401386:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40138a:	4604      	mov	r4, r0
#if defined(EFC1)
		uint32_t fmr1;
#endif
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG || SAMV71 || SAMV70 || SAMS70 || SAME70)
		(sleep_mode == SAM_PM_SMODE_WAIT_FAST) ?
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_STANDBY) :
  40138c:	2803      	cmp	r0, #3
  40138e:	bf0c      	ite	eq
  401390:	2000      	moveq	r0, #0
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_DEEP_POWERDOWN);
  401392:	f44f 1000 	movne.w	r0, #2097152	; 0x200000
  401396:	4b78      	ldr	r3, [pc, #480]	; (401578 <pmc_sleep+0x228>)
  401398:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  40139a:	b672      	cpsid	i
  __ASM volatile ("dmb");
  40139c:	f3bf 8f5f 	dmb	sy
#endif
		cpu_irq_disable();
  4013a0:	2200      	movs	r2, #0
  4013a2:	4b74      	ldr	r3, [pc, #464]	; (401574 <pmc_sleep+0x224>)
  4013a4:	701a      	strb	r2, [r3, #0]
		b_is_sleep_clock_used = true;
  4013a6:	2201      	movs	r2, #1
  4013a8:	4b74      	ldr	r3, [pc, #464]	; (40157c <pmc_sleep+0x22c>)
  4013aa:	701a      	strb	r2, [r3, #0]
	uint32_t mor  = PMC->CKGR_MOR;
  4013ac:	4b74      	ldr	r3, [pc, #464]	; (401580 <pmc_sleep+0x230>)
  4013ae:	6a1f      	ldr	r7, [r3, #32]
	uint32_t mckr = PMC->PMC_MCKR;
  4013b0:	6b1d      	ldr	r5, [r3, #48]	; 0x30
	uint32_t fmr  = EFC0->EEFC_FMR;
  4013b2:	4a74      	ldr	r2, [pc, #464]	; (401584 <pmc_sleep+0x234>)
  4013b4:	f8d2 8000 	ldr.w	r8, [r2]
		*p_pll0_setting = PMC->CKGR_PLLAR;
  4013b8:	6a9e      	ldr	r6, [r3, #40]	; 0x28
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor | CKGR_MOR_MOSCRCEN;
  4013ba:	4a73      	ldr	r2, [pc, #460]	; (401588 <pmc_sleep+0x238>)
  4013bc:	433a      	orrs	r2, r7
  4013be:	621a      	str	r2, [r3, #32]
	if ((mckr & PMC_MCKR_CSS_Msk) > PMC_MCKR_CSS_MAIN_CLK) {
  4013c0:	f005 0903 	and.w	r9, r5, #3
  4013c4:	f1b9 0f01 	cmp.w	r9, #1
  4013c8:	f240 8089 	bls.w	4014de <pmc_sleep+0x18e>
		mckr = (mckr & (~PMC_MCKR_CSS_Msk)) | PMC_MCKR_CSS_MAIN_CLK;
  4013cc:	f025 0103 	bic.w	r1, r5, #3
  4013d0:	f041 0101 	orr.w	r1, r1, #1
		PMC->PMC_MCKR = mckr;
  4013d4:	6319      	str	r1, [r3, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4013d6:	461a      	mov	r2, r3
  4013d8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4013da:	f013 0f08 	tst.w	r3, #8
  4013de:	d0fb      	beq.n	4013d8 <pmc_sleep+0x88>
	if (mckr & PMC_MCKR_PRES_Msk) {
  4013e0:	f011 0f70 	tst.w	r1, #112	; 0x70
  4013e4:	d008      	beq.n	4013f8 <pmc_sleep+0xa8>
		mckr = (mckr & (~PMC_MCKR_PRES_Msk));
  4013e6:	f021 0170 	bic.w	r1, r1, #112	; 0x70
		PMC->PMC_MCKR = mckr;
  4013ea:	4b65      	ldr	r3, [pc, #404]	; (401580 <pmc_sleep+0x230>)
  4013ec:	6319      	str	r1, [r3, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4013ee:	461a      	mov	r2, r3
  4013f0:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4013f2:	f013 0f08 	tst.w	r3, #8
  4013f6:	d0fb      	beq.n	4013f0 <pmc_sleep+0xa0>
	pmc_disable_pllack();
  4013f8:	4b64      	ldr	r3, [pc, #400]	; (40158c <pmc_sleep+0x23c>)
  4013fa:	4798      	blx	r3
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  4013fc:	4a60      	ldr	r2, [pc, #384]	; (401580 <pmc_sleep+0x230>)
  4013fe:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401400:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  401404:	d0fb      	beq.n	4013fe <pmc_sleep+0xae>
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  401406:	4a5e      	ldr	r2, [pc, #376]	; (401580 <pmc_sleep+0x230>)
  401408:	6a11      	ldr	r1, [r2, #32]
  40140a:	4b61      	ldr	r3, [pc, #388]	; (401590 <pmc_sleep+0x240>)
  40140c:	400b      	ands	r3, r1
  40140e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  401412:	6213      	str	r3, [r2, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  401414:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401416:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  40141a:	d0fb      	beq.n	401414 <pmc_sleep+0xc4>
	EFC0->EEFC_FMR = fmr & (~EEFC_FMR_FWS_Msk);
  40141c:	f428 6370 	bic.w	r3, r8, #3840	; 0xf00
  401420:	4a58      	ldr	r2, [pc, #352]	; (401584 <pmc_sleep+0x234>)
  401422:	6013      	str	r3, [r2, #0]
	if (disable_xtal) {
  401424:	2c04      	cmp	r4, #4
  401426:	d05c      	beq.n	4014e2 <pmc_sleep+0x192>
				&fmr1,
#endif
				(sleep_mode == SAM_PM_SMODE_WAIT));

		/* Enter wait mode */
		cpu_irq_enable();
  401428:	4c52      	ldr	r4, [pc, #328]	; (401574 <pmc_sleep+0x224>)
  40142a:	2301      	movs	r3, #1
  40142c:	7023      	strb	r3, [r4, #0]
  40142e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401432:	b662      	cpsie	i

		pmc_enable_waitmode();
  401434:	4b57      	ldr	r3, [pc, #348]	; (401594 <pmc_sleep+0x244>)
  401436:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
  401438:	b672      	cpsid	i
  40143a:	f3bf 8f5f 	dmb	sy

		cpu_irq_disable();
  40143e:	2300      	movs	r3, #0
  401440:	7023      	strb	r3, [r4, #0]
	if (CKGR_MOR_MOSCXTBY == (osc_setting & CKGR_MOR_MOSCXTBY)) {
  401442:	f017 0f02 	tst.w	r7, #2
  401446:	d055      	beq.n	4014f4 <pmc_sleep+0x1a4>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401448:	4a4d      	ldr	r2, [pc, #308]	; (401580 <pmc_sleep+0x230>)
  40144a:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40144c:	4952      	ldr	r1, [pc, #328]	; (401598 <pmc_sleep+0x248>)
  40144e:	4019      	ands	r1, r3
  401450:	4b52      	ldr	r3, [pc, #328]	; (40159c <pmc_sleep+0x24c>)
  401452:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401454:	6213      	str	r3, [r2, #32]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  401456:	6a11      	ldr	r1, [r2, #32]
				| CKGR_MOR_KEY_PASSWD;
  401458:	4b51      	ldr	r3, [pc, #324]	; (4015a0 <pmc_sleep+0x250>)
  40145a:	400b      	ands	r3, r1
  40145c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  401460:	6213      	str	r3, [r2, #32]
	if (pll0_setting & CKGR_PLLAR_MULA_Msk) {
  401462:	4b50      	ldr	r3, [pc, #320]	; (4015a4 <pmc_sleep+0x254>)
  401464:	4033      	ands	r3, r6
  401466:	2b00      	cmp	r3, #0
  401468:	d06e      	beq.n	401548 <pmc_sleep+0x1f8>
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | pll0_setting;
  40146a:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
  40146e:	4b44      	ldr	r3, [pc, #272]	; (401580 <pmc_sleep+0x230>)
  401470:	629e      	str	r6, [r3, #40]	; 0x28
		pll_sr |= PMC_SR_LOCKA;
  401472:	2102      	movs	r1, #2
	switch(mck_setting & PMC_MCKR_CSS_Msk) {
  401474:	f1b9 0f02 	cmp.w	r9, #2
  401478:	d104      	bne.n	401484 <pmc_sleep+0x134>
		while (!(PMC->PMC_SR & PMC_SR_LOCKA));
  40147a:	4a41      	ldr	r2, [pc, #260]	; (401580 <pmc_sleep+0x230>)
  40147c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40147e:	f013 0f02 	tst.w	r3, #2
  401482:	d0fb      	beq.n	40147c <pmc_sleep+0x12c>
	mckr = PMC->PMC_MCKR;
  401484:	4a3e      	ldr	r2, [pc, #248]	; (401580 <pmc_sleep+0x230>)
  401486:	6b13      	ldr	r3, [r2, #48]	; 0x30
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
  401488:	f023 0370 	bic.w	r3, r3, #112	; 0x70
		| (mck_setting & PMC_MCKR_PRES_Msk);
  40148c:	f005 0070 	and.w	r0, r5, #112	; 0x70
  401490:	4303      	orrs	r3, r0
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
  401492:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  401494:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401496:	f013 0f08 	tst.w	r3, #8
  40149a:	d0fb      	beq.n	401494 <pmc_sleep+0x144>
	EFC0->EEFC_FMR = fmr_setting;
  40149c:	4b39      	ldr	r3, [pc, #228]	; (401584 <pmc_sleep+0x234>)
  40149e:	f8c3 8000 	str.w	r8, [r3]
	PMC->PMC_MCKR = mck_setting;
  4014a2:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
  4014a6:	631d      	str	r5, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4014a8:	461a      	mov	r2, r3
  4014aa:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4014ac:	f013 0f08 	tst.w	r3, #8
  4014b0:	d0fb      	beq.n	4014aa <pmc_sleep+0x15a>
	while (!(PMC->PMC_SR & pll_sr));
  4014b2:	4a33      	ldr	r2, [pc, #204]	; (401580 <pmc_sleep+0x230>)
  4014b4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4014b6:	420b      	tst	r3, r1
  4014b8:	d0fc      	beq.n	4014b4 <pmc_sleep+0x164>

#if (SAM4C || SAM4CM || SAM4CP)
		/* Restore the sub-system 1 */
		PMC->PMC_SCER = cpclk_backup | PMC_SCER_CPKEY_PASSWD;
#endif
		b_is_sleep_clock_used = false;
  4014ba:	2200      	movs	r2, #0
  4014bc:	4b2f      	ldr	r3, [pc, #188]	; (40157c <pmc_sleep+0x22c>)
  4014be:	701a      	strb	r2, [r3, #0]
		if (callback_clocks_restored) {
  4014c0:	4b39      	ldr	r3, [pc, #228]	; (4015a8 <pmc_sleep+0x258>)
  4014c2:	681b      	ldr	r3, [r3, #0]
  4014c4:	b11b      	cbz	r3, 4014ce <pmc_sleep+0x17e>
			callback_clocks_restored();
  4014c6:	4798      	blx	r3
			callback_clocks_restored = NULL;
  4014c8:	2200      	movs	r2, #0
  4014ca:	4b37      	ldr	r3, [pc, #220]	; (4015a8 <pmc_sleep+0x258>)
  4014cc:	601a      	str	r2, [r3, #0]
		}
		cpu_irq_enable();
  4014ce:	2201      	movs	r2, #1
  4014d0:	4b28      	ldr	r3, [pc, #160]	; (401574 <pmc_sleep+0x224>)
  4014d2:	701a      	strb	r2, [r3, #0]
  4014d4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4014d8:	b662      	cpsie	i
  4014da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uint32_t mckr = PMC->PMC_MCKR;
  4014de:	4629      	mov	r1, r5
  4014e0:	e77e      	b.n	4013e0 <pmc_sleep+0x90>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4014e2:	f5a2 62c0 	sub.w	r2, r2, #1536	; 0x600
  4014e6:	6a11      	ldr	r1, [r2, #32]
  4014e8:	4b30      	ldr	r3, [pc, #192]	; (4015ac <pmc_sleep+0x25c>)
  4014ea:	400b      	ands	r3, r1
  4014ec:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4014f0:	6213      	str	r3, [r2, #32]
  4014f2:	e799      	b.n	401428 <pmc_sleep+0xd8>
	} else if (CKGR_MOR_MOSCXTEN == (osc_setting & CKGR_MOR_MOSCXTEN)) {
  4014f4:	f017 0f01 	tst.w	r7, #1
  4014f8:	d0b3      	beq.n	401462 <pmc_sleep+0x112>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN)) {
  4014fa:	4b21      	ldr	r3, [pc, #132]	; (401580 <pmc_sleep+0x230>)
  4014fc:	6a1b      	ldr	r3, [r3, #32]
  4014fe:	f013 0f01 	tst.w	r3, #1
  401502:	d10b      	bne.n	40151c <pmc_sleep+0x1cc>
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401504:	491e      	ldr	r1, [pc, #120]	; (401580 <pmc_sleep+0x230>)
  401506:	6a0b      	ldr	r3, [r1, #32]
					CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN;
  401508:	4a29      	ldr	r2, [pc, #164]	; (4015b0 <pmc_sleep+0x260>)
  40150a:	401a      	ands	r2, r3
  40150c:	4b29      	ldr	r3, [pc, #164]	; (4015b4 <pmc_sleep+0x264>)
  40150e:	4313      	orrs	r3, r2
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401510:	620b      	str	r3, [r1, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  401512:	460a      	mov	r2, r1
  401514:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401516:	f013 0f01 	tst.w	r3, #1
  40151a:	d0fb      	beq.n	401514 <pmc_sleep+0x1c4>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
  40151c:	4b18      	ldr	r3, [pc, #96]	; (401580 <pmc_sleep+0x230>)
  40151e:	6a1b      	ldr	r3, [r3, #32]
  401520:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401524:	d108      	bne.n	401538 <pmc_sleep+0x1e8>
			PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  401526:	4a16      	ldr	r2, [pc, #88]	; (401580 <pmc_sleep+0x230>)
  401528:	6a11      	ldr	r1, [r2, #32]
  40152a:	4b23      	ldr	r3, [pc, #140]	; (4015b8 <pmc_sleep+0x268>)
  40152c:	430b      	orrs	r3, r1
  40152e:	6213      	str	r3, [r2, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  401530:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401532:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  401536:	d0fb      	beq.n	401530 <pmc_sleep+0x1e0>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  401538:	4a11      	ldr	r2, [pc, #68]	; (401580 <pmc_sleep+0x230>)
  40153a:	6a11      	ldr	r1, [r2, #32]
					| CKGR_MOR_KEY_PASSWD;
  40153c:	4b18      	ldr	r3, [pc, #96]	; (4015a0 <pmc_sleep+0x250>)
  40153e:	400b      	ands	r3, r1
  401540:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  401544:	6213      	str	r3, [r2, #32]
  401546:	e78c      	b.n	401462 <pmc_sleep+0x112>
	uint32_t pll_sr = 0;
  401548:	2100      	movs	r1, #0
  40154a:	e793      	b.n	401474 <pmc_sleep+0x124>

		break;
	}
#if (!(SAMG51 || SAMG53 || SAMG54))
	case SAM_PM_SMODE_BACKUP:
		SCB->SCR |= SCR_SLEEPDEEP;
  40154c:	4a08      	ldr	r2, [pc, #32]	; (401570 <pmc_sleep+0x220>)
  40154e:	6913      	ldr	r3, [r2, #16]
  401550:	f043 0304 	orr.w	r3, r3, #4
  401554:	6113      	str	r3, [r2, #16]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAMS70 || SAME70)
		SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_VROFF_STOP_VREG;
  401556:	4a19      	ldr	r2, [pc, #100]	; (4015bc <pmc_sleep+0x26c>)
  401558:	4b19      	ldr	r3, [pc, #100]	; (4015c0 <pmc_sleep+0x270>)
  40155a:	601a      	str	r2, [r3, #0]
		cpu_irq_enable();
  40155c:	2201      	movs	r2, #1
  40155e:	4b05      	ldr	r3, [pc, #20]	; (401574 <pmc_sleep+0x224>)
  401560:	701a      	strb	r2, [r3, #0]
  401562:	f3bf 8f5f 	dmb	sy
  401566:	b662      	cpsie	i
  __ASM volatile ("wfi");
  401568:	bf30      	wfi
  40156a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40156e:	bf00      	nop
  401570:	e000ed00 	.word	0xe000ed00
  401574:	20400018 	.word	0x20400018
  401578:	00401301 	.word	0x00401301
  40157c:	20400c68 	.word	0x20400c68
  401580:	400e0600 	.word	0x400e0600
  401584:	400e0c00 	.word	0x400e0c00
  401588:	00370008 	.word	0x00370008
  40158c:	0040128d 	.word	0x0040128d
  401590:	fec8ffff 	.word	0xfec8ffff
  401594:	00401305 	.word	0x00401305
  401598:	fec8fffc 	.word	0xfec8fffc
  40159c:	01370002 	.word	0x01370002
  4015a0:	ffc8ff87 	.word	0xffc8ff87
  4015a4:	07ff0000 	.word	0x07ff0000
  4015a8:	20400c6c 	.word	0x20400c6c
  4015ac:	ffc8fffe 	.word	0xffc8fffe
  4015b0:	ffc8fffc 	.word	0xffc8fffc
  4015b4:	00370001 	.word	0x00370001
  4015b8:	01370000 	.word	0x01370000
  4015bc:	a5000004 	.word	0xa5000004
  4015c0:	400e1810 	.word	0x400e1810

004015c4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4015c4:	e7fe      	b.n	4015c4 <Dummy_Handler>
	...

004015c8 <Reset_Handler>:
{
  4015c8:	b500      	push	{lr}
  4015ca:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  4015cc:	4b25      	ldr	r3, [pc, #148]	; (401664 <Reset_Handler+0x9c>)
  4015ce:	4a26      	ldr	r2, [pc, #152]	; (401668 <Reset_Handler+0xa0>)
  4015d0:	429a      	cmp	r2, r3
  4015d2:	d010      	beq.n	4015f6 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  4015d4:	4b25      	ldr	r3, [pc, #148]	; (40166c <Reset_Handler+0xa4>)
  4015d6:	4a23      	ldr	r2, [pc, #140]	; (401664 <Reset_Handler+0x9c>)
  4015d8:	429a      	cmp	r2, r3
  4015da:	d20c      	bcs.n	4015f6 <Reset_Handler+0x2e>
  4015dc:	3b01      	subs	r3, #1
  4015de:	1a9b      	subs	r3, r3, r2
  4015e0:	f023 0303 	bic.w	r3, r3, #3
  4015e4:	3304      	adds	r3, #4
  4015e6:	4413      	add	r3, r2
  4015e8:	491f      	ldr	r1, [pc, #124]	; (401668 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  4015ea:	f851 0b04 	ldr.w	r0, [r1], #4
  4015ee:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  4015f2:	429a      	cmp	r2, r3
  4015f4:	d1f9      	bne.n	4015ea <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  4015f6:	4b1e      	ldr	r3, [pc, #120]	; (401670 <Reset_Handler+0xa8>)
  4015f8:	4a1e      	ldr	r2, [pc, #120]	; (401674 <Reset_Handler+0xac>)
  4015fa:	429a      	cmp	r2, r3
  4015fc:	d20a      	bcs.n	401614 <Reset_Handler+0x4c>
  4015fe:	3b01      	subs	r3, #1
  401600:	1a9b      	subs	r3, r3, r2
  401602:	f023 0303 	bic.w	r3, r3, #3
  401606:	3304      	adds	r3, #4
  401608:	4413      	add	r3, r2
                *pDest++ = 0;
  40160a:	2100      	movs	r1, #0
  40160c:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  401610:	4293      	cmp	r3, r2
  401612:	d1fb      	bne.n	40160c <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  401614:	4a18      	ldr	r2, [pc, #96]	; (401678 <Reset_Handler+0xb0>)
  401616:	4b19      	ldr	r3, [pc, #100]	; (40167c <Reset_Handler+0xb4>)
  401618:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  40161c:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40161e:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401622:	fab3 f383 	clz	r3, r3
  401626:	095b      	lsrs	r3, r3, #5
  401628:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  40162a:	b672      	cpsid	i
  __ASM volatile ("dmb");
  40162c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401630:	2200      	movs	r2, #0
  401632:	4b13      	ldr	r3, [pc, #76]	; (401680 <Reset_Handler+0xb8>)
  401634:	701a      	strb	r2, [r3, #0]
	return flags;
  401636:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  401638:	4a12      	ldr	r2, [pc, #72]	; (401684 <Reset_Handler+0xbc>)
  40163a:	6813      	ldr	r3, [r2, #0]
  40163c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  401640:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  401642:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401646:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  40164a:	b129      	cbz	r1, 401658 <Reset_Handler+0x90>
		cpu_irq_enable();
  40164c:	2201      	movs	r2, #1
  40164e:	4b0c      	ldr	r3, [pc, #48]	; (401680 <Reset_Handler+0xb8>)
  401650:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  401652:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401656:	b662      	cpsie	i
        __libc_init_array();
  401658:	4b0b      	ldr	r3, [pc, #44]	; (401688 <Reset_Handler+0xc0>)
  40165a:	4798      	blx	r3
        main();
  40165c:	4b0b      	ldr	r3, [pc, #44]	; (40168c <Reset_Handler+0xc4>)
  40165e:	4798      	blx	r3
  401660:	e7fe      	b.n	401660 <Reset_Handler+0x98>
  401662:	bf00      	nop
  401664:	20400000 	.word	0x20400000
  401668:	0040745c 	.word	0x0040745c
  40166c:	204009d0 	.word	0x204009d0
  401670:	20400cd4 	.word	0x20400cd4
  401674:	204009d0 	.word	0x204009d0
  401678:	e000ed00 	.word	0xe000ed00
  40167c:	00400000 	.word	0x00400000
  401680:	20400018 	.word	0x20400018
  401684:	e000ed88 	.word	0xe000ed88
  401688:	00401e3d 	.word	0x00401e3d
  40168c:	00401ce9 	.word	0x00401ce9

00401690 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  401690:	4b3b      	ldr	r3, [pc, #236]	; (401780 <SystemCoreClockUpdate+0xf0>)
  401692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401694:	f003 0303 	and.w	r3, r3, #3
  401698:	2b01      	cmp	r3, #1
  40169a:	d01d      	beq.n	4016d8 <SystemCoreClockUpdate+0x48>
  40169c:	b183      	cbz	r3, 4016c0 <SystemCoreClockUpdate+0x30>
  40169e:	2b02      	cmp	r3, #2
  4016a0:	d036      	beq.n	401710 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  4016a2:	4b37      	ldr	r3, [pc, #220]	; (401780 <SystemCoreClockUpdate+0xf0>)
  4016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4016a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4016aa:	2b70      	cmp	r3, #112	; 0x70
  4016ac:	d05f      	beq.n	40176e <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4016ae:	4b34      	ldr	r3, [pc, #208]	; (401780 <SystemCoreClockUpdate+0xf0>)
  4016b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4016b2:	4934      	ldr	r1, [pc, #208]	; (401784 <SystemCoreClockUpdate+0xf4>)
  4016b4:	f3c2 1202 	ubfx	r2, r2, #4, #3
  4016b8:	680b      	ldr	r3, [r1, #0]
  4016ba:	40d3      	lsrs	r3, r2
  4016bc:	600b      	str	r3, [r1, #0]
  4016be:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  4016c0:	4b31      	ldr	r3, [pc, #196]	; (401788 <SystemCoreClockUpdate+0xf8>)
  4016c2:	695b      	ldr	r3, [r3, #20]
  4016c4:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4016c8:	bf14      	ite	ne
  4016ca:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4016ce:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  4016d2:	4b2c      	ldr	r3, [pc, #176]	; (401784 <SystemCoreClockUpdate+0xf4>)
  4016d4:	601a      	str	r2, [r3, #0]
  4016d6:	e7e4      	b.n	4016a2 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4016d8:	4b29      	ldr	r3, [pc, #164]	; (401780 <SystemCoreClockUpdate+0xf0>)
  4016da:	6a1b      	ldr	r3, [r3, #32]
  4016dc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  4016e0:	d003      	beq.n	4016ea <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  4016e2:	4a2a      	ldr	r2, [pc, #168]	; (40178c <SystemCoreClockUpdate+0xfc>)
  4016e4:	4b27      	ldr	r3, [pc, #156]	; (401784 <SystemCoreClockUpdate+0xf4>)
  4016e6:	601a      	str	r2, [r3, #0]
  4016e8:	e7db      	b.n	4016a2 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4016ea:	4a29      	ldr	r2, [pc, #164]	; (401790 <SystemCoreClockUpdate+0x100>)
  4016ec:	4b25      	ldr	r3, [pc, #148]	; (401784 <SystemCoreClockUpdate+0xf4>)
  4016ee:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4016f0:	4b23      	ldr	r3, [pc, #140]	; (401780 <SystemCoreClockUpdate+0xf0>)
  4016f2:	6a1b      	ldr	r3, [r3, #32]
  4016f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4016f8:	2b10      	cmp	r3, #16
  4016fa:	d005      	beq.n	401708 <SystemCoreClockUpdate+0x78>
  4016fc:	2b20      	cmp	r3, #32
  4016fe:	d1d0      	bne.n	4016a2 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  401700:	4a22      	ldr	r2, [pc, #136]	; (40178c <SystemCoreClockUpdate+0xfc>)
  401702:	4b20      	ldr	r3, [pc, #128]	; (401784 <SystemCoreClockUpdate+0xf4>)
  401704:	601a      	str	r2, [r3, #0]
          break;
  401706:	e7cc      	b.n	4016a2 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  401708:	4a22      	ldr	r2, [pc, #136]	; (401794 <SystemCoreClockUpdate+0x104>)
  40170a:	4b1e      	ldr	r3, [pc, #120]	; (401784 <SystemCoreClockUpdate+0xf4>)
  40170c:	601a      	str	r2, [r3, #0]
          break;
  40170e:	e7c8      	b.n	4016a2 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401710:	4b1b      	ldr	r3, [pc, #108]	; (401780 <SystemCoreClockUpdate+0xf0>)
  401712:	6a1b      	ldr	r3, [r3, #32]
  401714:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401718:	d016      	beq.n	401748 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  40171a:	4a1c      	ldr	r2, [pc, #112]	; (40178c <SystemCoreClockUpdate+0xfc>)
  40171c:	4b19      	ldr	r3, [pc, #100]	; (401784 <SystemCoreClockUpdate+0xf4>)
  40171e:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  401720:	4b17      	ldr	r3, [pc, #92]	; (401780 <SystemCoreClockUpdate+0xf0>)
  401722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401724:	f003 0303 	and.w	r3, r3, #3
  401728:	2b02      	cmp	r3, #2
  40172a:	d1ba      	bne.n	4016a2 <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  40172c:	4a14      	ldr	r2, [pc, #80]	; (401780 <SystemCoreClockUpdate+0xf0>)
  40172e:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401730:	6a92      	ldr	r2, [r2, #40]	; 0x28
  401732:	4814      	ldr	r0, [pc, #80]	; (401784 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401734:	f3c1 410a 	ubfx	r1, r1, #16, #11
  401738:	6803      	ldr	r3, [r0, #0]
  40173a:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  40173e:	b2d2      	uxtb	r2, r2
  401740:	fbb3 f3f2 	udiv	r3, r3, r2
  401744:	6003      	str	r3, [r0, #0]
  401746:	e7ac      	b.n	4016a2 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401748:	4a11      	ldr	r2, [pc, #68]	; (401790 <SystemCoreClockUpdate+0x100>)
  40174a:	4b0e      	ldr	r3, [pc, #56]	; (401784 <SystemCoreClockUpdate+0xf4>)
  40174c:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  40174e:	4b0c      	ldr	r3, [pc, #48]	; (401780 <SystemCoreClockUpdate+0xf0>)
  401750:	6a1b      	ldr	r3, [r3, #32]
  401752:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401756:	2b10      	cmp	r3, #16
  401758:	d005      	beq.n	401766 <SystemCoreClockUpdate+0xd6>
  40175a:	2b20      	cmp	r3, #32
  40175c:	d1e0      	bne.n	401720 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  40175e:	4a0b      	ldr	r2, [pc, #44]	; (40178c <SystemCoreClockUpdate+0xfc>)
  401760:	4b08      	ldr	r3, [pc, #32]	; (401784 <SystemCoreClockUpdate+0xf4>)
  401762:	601a      	str	r2, [r3, #0]
          break;
  401764:	e7dc      	b.n	401720 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  401766:	4a0b      	ldr	r2, [pc, #44]	; (401794 <SystemCoreClockUpdate+0x104>)
  401768:	4b06      	ldr	r3, [pc, #24]	; (401784 <SystemCoreClockUpdate+0xf4>)
  40176a:	601a      	str	r2, [r3, #0]
          break;
  40176c:	e7d8      	b.n	401720 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  40176e:	4a05      	ldr	r2, [pc, #20]	; (401784 <SystemCoreClockUpdate+0xf4>)
  401770:	6813      	ldr	r3, [r2, #0]
  401772:	4909      	ldr	r1, [pc, #36]	; (401798 <SystemCoreClockUpdate+0x108>)
  401774:	fba1 1303 	umull	r1, r3, r1, r3
  401778:	085b      	lsrs	r3, r3, #1
  40177a:	6013      	str	r3, [r2, #0]
  40177c:	4770      	bx	lr
  40177e:	bf00      	nop
  401780:	400e0600 	.word	0x400e0600
  401784:	2040001c 	.word	0x2040001c
  401788:	400e1810 	.word	0x400e1810
  40178c:	00b71b00 	.word	0x00b71b00
  401790:	003d0900 	.word	0x003d0900
  401794:	007a1200 	.word	0x007a1200
  401798:	aaaaaaab 	.word	0xaaaaaaab

0040179c <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  40179c:	4b16      	ldr	r3, [pc, #88]	; (4017f8 <system_init_flash+0x5c>)
  40179e:	4298      	cmp	r0, r3
  4017a0:	d913      	bls.n	4017ca <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  4017a2:	4b16      	ldr	r3, [pc, #88]	; (4017fc <system_init_flash+0x60>)
  4017a4:	4298      	cmp	r0, r3
  4017a6:	d915      	bls.n	4017d4 <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  4017a8:	4b15      	ldr	r3, [pc, #84]	; (401800 <system_init_flash+0x64>)
  4017aa:	4298      	cmp	r0, r3
  4017ac:	d916      	bls.n	4017dc <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  4017ae:	4b15      	ldr	r3, [pc, #84]	; (401804 <system_init_flash+0x68>)
  4017b0:	4298      	cmp	r0, r3
  4017b2:	d917      	bls.n	4017e4 <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  4017b4:	4b14      	ldr	r3, [pc, #80]	; (401808 <system_init_flash+0x6c>)
  4017b6:	4298      	cmp	r0, r3
  4017b8:	d918      	bls.n	4017ec <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  4017ba:	4b14      	ldr	r3, [pc, #80]	; (40180c <system_init_flash+0x70>)
  4017bc:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4017be:	bf94      	ite	ls
  4017c0:	4a13      	ldrls	r2, [pc, #76]	; (401810 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  4017c2:	4a14      	ldrhi	r2, [pc, #80]	; (401814 <system_init_flash+0x78>)
  4017c4:	4b14      	ldr	r3, [pc, #80]	; (401818 <system_init_flash+0x7c>)
  4017c6:	601a      	str	r2, [r3, #0]
  4017c8:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4017ca:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4017ce:	4b12      	ldr	r3, [pc, #72]	; (401818 <system_init_flash+0x7c>)
  4017d0:	601a      	str	r2, [r3, #0]
  4017d2:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4017d4:	4a11      	ldr	r2, [pc, #68]	; (40181c <system_init_flash+0x80>)
  4017d6:	4b10      	ldr	r3, [pc, #64]	; (401818 <system_init_flash+0x7c>)
  4017d8:	601a      	str	r2, [r3, #0]
  4017da:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  4017dc:	4a10      	ldr	r2, [pc, #64]	; (401820 <system_init_flash+0x84>)
  4017de:	4b0e      	ldr	r3, [pc, #56]	; (401818 <system_init_flash+0x7c>)
  4017e0:	601a      	str	r2, [r3, #0]
  4017e2:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  4017e4:	4a0f      	ldr	r2, [pc, #60]	; (401824 <system_init_flash+0x88>)
  4017e6:	4b0c      	ldr	r3, [pc, #48]	; (401818 <system_init_flash+0x7c>)
  4017e8:	601a      	str	r2, [r3, #0]
  4017ea:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  4017ec:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  4017f0:	4b09      	ldr	r3, [pc, #36]	; (401818 <system_init_flash+0x7c>)
  4017f2:	601a      	str	r2, [r3, #0]
  4017f4:	4770      	bx	lr
  4017f6:	bf00      	nop
  4017f8:	015ef3bf 	.word	0x015ef3bf
  4017fc:	02bde77f 	.word	0x02bde77f
  401800:	041cdb3f 	.word	0x041cdb3f
  401804:	057bceff 	.word	0x057bceff
  401808:	06dac2bf 	.word	0x06dac2bf
  40180c:	0839b67f 	.word	0x0839b67f
  401810:	04000500 	.word	0x04000500
  401814:	04000600 	.word	0x04000600
  401818:	400e0c00 	.word	0x400e0c00
  40181c:	04000100 	.word	0x04000100
  401820:	04000200 	.word	0x04000200
  401824:	04000300 	.word	0x04000300

00401828 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  401828:	4b0a      	ldr	r3, [pc, #40]	; (401854 <_sbrk+0x2c>)
  40182a:	681b      	ldr	r3, [r3, #0]
  40182c:	b153      	cbz	r3, 401844 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  40182e:	4b09      	ldr	r3, [pc, #36]	; (401854 <_sbrk+0x2c>)
  401830:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  401832:	181a      	adds	r2, r3, r0
  401834:	4908      	ldr	r1, [pc, #32]	; (401858 <_sbrk+0x30>)
  401836:	4291      	cmp	r1, r2
  401838:	db08      	blt.n	40184c <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  40183a:	4610      	mov	r0, r2
  40183c:	4a05      	ldr	r2, [pc, #20]	; (401854 <_sbrk+0x2c>)
  40183e:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  401840:	4618      	mov	r0, r3
  401842:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  401844:	4a05      	ldr	r2, [pc, #20]	; (40185c <_sbrk+0x34>)
  401846:	4b03      	ldr	r3, [pc, #12]	; (401854 <_sbrk+0x2c>)
  401848:	601a      	str	r2, [r3, #0]
  40184a:	e7f0      	b.n	40182e <_sbrk+0x6>
		return (caddr_t) -1;	
  40184c:	f04f 30ff 	mov.w	r0, #4294967295
}
  401850:	4770      	bx	lr
  401852:	bf00      	nop
  401854:	20400c70 	.word	0x20400c70
  401858:	2045fffc 	.word	0x2045fffc
  40185c:	20402ed8 	.word	0x20402ed8

00401860 <button_callback>:
/************************************************************************/
/* Handlers                                                             */
/************************************************************************/

void button_callback(){
  flag_button = 1;
  401860:	2201      	movs	r2, #1
  401862:	4b01      	ldr	r3, [pc, #4]	; (401868 <button_callback+0x8>)
  401864:	701a      	strb	r2, [r3, #0]
  401866:	4770      	bx	lr
  401868:	20400c74 	.word	0x20400c74

0040186c <RTT_init>:
 * arg2 rttIRQSource : Pode ser uma 
 *     - 0: 
 *     - RTT_MR_RTTINCIEN: Interrupção por incremento (pllPreScale)
 *     - RTT_MR_ALMIEN : Interrupção por alarme
 */
static void RTT_init(float freqPrescale, uint32_t IrqNPulses, uint32_t rttIRQSource) {
  40186c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401870:	ed2d 8b02 	vpush	{d8}
  401874:	b082      	sub	sp, #8
  401876:	eeb0 8a40 	vmov.f32	s16, s0
  40187a:	4680      	mov	r8, r0
  40187c:	460f      	mov	r7, r1

  uint16_t pllPreScale = (int) (((float) 32768) / freqPrescale);
	
  rtt_sel_source(RTT, false);
  40187e:	4c20      	ldr	r4, [pc, #128]	; (401900 <RTT_init+0x94>)
  401880:	2100      	movs	r1, #0
  401882:	4620      	mov	r0, r4
  401884:	4b1f      	ldr	r3, [pc, #124]	; (401904 <RTT_init+0x98>)
  401886:	4798      	blx	r3
  uint16_t pllPreScale = (int) (((float) 32768) / freqPrescale);
  401888:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 401908 <RTT_init+0x9c>
  40188c:	eec7 7a08 	vdiv.f32	s15, s14, s16
  401890:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  401894:	edcd 7a01 	vstr	s15, [sp, #4]
  rtt_init(RTT, pllPreScale);
  401898:	f8bd 1004 	ldrh.w	r1, [sp, #4]
  40189c:	4620      	mov	r0, r4
  40189e:	4b1b      	ldr	r3, [pc, #108]	; (40190c <RTT_init+0xa0>)
  4018a0:	4798      	blx	r3
  
  if (rttIRQSource & RTT_MR_ALMIEN) {
  4018a2:	f417 3f80 	tst.w	r7, #65536	; 0x10000
  4018a6:	d116      	bne.n	4018d6 <RTT_init+0x6a>
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  4018a8:	4b19      	ldr	r3, [pc, #100]	; (401910 <RTT_init+0xa4>)
  4018aa:	2208      	movs	r2, #8
  4018ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  4018b0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4018b4:	2180      	movs	r1, #128	; 0x80
  4018b6:	f883 1303 	strb.w	r1, [r3, #771]	; 0x303
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4018ba:	601a      	str	r2, [r3, #0]
  NVIC_ClearPendingIRQ(RTT_IRQn);
  NVIC_SetPriority(RTT_IRQn, 4);
  NVIC_EnableIRQ(RTT_IRQn);

  /* Enable RTT interrupt */
  if (rttIRQSource & (RTT_MR_RTTINCIEN | RTT_MR_ALMIEN))
  4018bc:	f417 3f40 	tst.w	r7, #196608	; 0x30000
  4018c0:	d119      	bne.n	4018f6 <RTT_init+0x8a>
		rtt_enable_interrupt(RTT, rttIRQSource);
  else
		rtt_disable_interrupt(RTT, RTT_MR_RTTINCIEN | RTT_MR_ALMIEN);
  4018c2:	f44f 3140 	mov.w	r1, #196608	; 0x30000
  4018c6:	480e      	ldr	r0, [pc, #56]	; (401900 <RTT_init+0x94>)
  4018c8:	4b12      	ldr	r3, [pc, #72]	; (401914 <RTT_init+0xa8>)
  4018ca:	4798      	blx	r3
		  
}
  4018cc:	b002      	add	sp, #8
  4018ce:	ecbd 8b02 	vpop	{d8}
  4018d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  	ul_previous_time = rtt_read_timer_value(RTT);
  4018d6:	4620      	mov	r0, r4
  4018d8:	4b0f      	ldr	r3, [pc, #60]	; (401918 <RTT_init+0xac>)
  4018da:	4798      	blx	r3
  4018dc:	4604      	mov	r4, r0
  	while (ul_previous_time == rtt_read_timer_value(RTT));
  4018de:	4e08      	ldr	r6, [pc, #32]	; (401900 <RTT_init+0x94>)
  4018e0:	4d0d      	ldr	r5, [pc, #52]	; (401918 <RTT_init+0xac>)
  4018e2:	4630      	mov	r0, r6
  4018e4:	47a8      	blx	r5
  4018e6:	4284      	cmp	r4, r0
  4018e8:	d0fb      	beq.n	4018e2 <RTT_init+0x76>
  	rtt_write_alarm_time(RTT, IrqNPulses+ul_previous_time);
  4018ea:	eb04 0108 	add.w	r1, r4, r8
  4018ee:	4804      	ldr	r0, [pc, #16]	; (401900 <RTT_init+0x94>)
  4018f0:	4b0a      	ldr	r3, [pc, #40]	; (40191c <RTT_init+0xb0>)
  4018f2:	4798      	blx	r3
  4018f4:	e7d8      	b.n	4018a8 <RTT_init+0x3c>
		rtt_enable_interrupt(RTT, rttIRQSource);
  4018f6:	4639      	mov	r1, r7
  4018f8:	4801      	ldr	r0, [pc, #4]	; (401900 <RTT_init+0x94>)
  4018fa:	4b09      	ldr	r3, [pc, #36]	; (401920 <RTT_init+0xb4>)
  4018fc:	4798      	blx	r3
  4018fe:	e7e5      	b.n	4018cc <RTT_init+0x60>
  401900:	400e1830 	.word	0x400e1830
  401904:	0040048d 	.word	0x0040048d
  401908:	47000000 	.word	0x47000000
  40190c:	00400479 	.word	0x00400479
  401910:	e000e100 	.word	0xe000e100
  401914:	004004cd 	.word	0x004004cd
  401918:	004004e1 	.word	0x004004e1
  40191c:	004004f9 	.word	0x004004f9
  401920:	004004b9 	.word	0x004004b9

00401924 <RTC_Handler>:
void RTC_Handler(void) {
  401924:	b538      	push	{r3, r4, r5, lr}
	uint32_t ul_status = rtc_get_status(RTC);
  401926:	4812      	ldr	r0, [pc, #72]	; (401970 <RTC_Handler+0x4c>)
  401928:	4b12      	ldr	r3, [pc, #72]	; (401974 <RTC_Handler+0x50>)
  40192a:	4798      	blx	r3
	if ((ul_status & RTC_SR_SEC) == RTC_SR_SEC) {
  40192c:	f010 0f04 	tst.w	r0, #4
  401930:	d002      	beq.n	401938 <RTC_Handler+0x14>
		flag_rtc_sec = 1;
  401932:	2201      	movs	r2, #1
  401934:	4b10      	ldr	r3, [pc, #64]	; (401978 <RTC_Handler+0x54>)
  401936:	701a      	strb	r2, [r3, #0]
	if ((ul_status & RTC_SR_ALARM) == RTC_SR_ALARM) {
  401938:	f010 0f02 	tst.w	r0, #2
  40193c:	d002      	beq.n	401944 <RTC_Handler+0x20>
		flag_rtc_alarm = 1;
  40193e:	2201      	movs	r2, #1
  401940:	4b0e      	ldr	r3, [pc, #56]	; (40197c <RTC_Handler+0x58>)
  401942:	701a      	strb	r2, [r3, #0]
	rtc_clear_status(RTC, RTC_SCCR_SECCLR);
  401944:	4d0a      	ldr	r5, [pc, #40]	; (401970 <RTC_Handler+0x4c>)
  401946:	2104      	movs	r1, #4
  401948:	4628      	mov	r0, r5
  40194a:	4c0d      	ldr	r4, [pc, #52]	; (401980 <RTC_Handler+0x5c>)
  40194c:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_ALRCLR);
  40194e:	2102      	movs	r1, #2
  401950:	4628      	mov	r0, r5
  401952:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_ACKCLR);
  401954:	2101      	movs	r1, #1
  401956:	4628      	mov	r0, r5
  401958:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_TIMCLR);
  40195a:	2108      	movs	r1, #8
  40195c:	4628      	mov	r0, r5
  40195e:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_CALCLR);
  401960:	2110      	movs	r1, #16
  401962:	4628      	mov	r0, r5
  401964:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_TDERRCLR);
  401966:	2120      	movs	r1, #32
  401968:	4628      	mov	r0, r5
  40196a:	47a0      	blx	r4
  40196c:	bd38      	pop	{r3, r4, r5, pc}
  40196e:	bf00      	nop
  401970:	400e1860 	.word	0x400e1860
  401974:	00400471 	.word	0x00400471
  401978:	20400c76 	.word	0x20400c76
  40197c:	20400c75 	.word	0x20400c75
  401980:	00400475 	.word	0x00400475

00401984 <init>:
void init(void) {
  401984:	b5f0      	push	{r4, r5, r6, r7, lr}
  401986:	b083      	sub	sp, #12
	sysclk_init();
  401988:	4b2b      	ldr	r3, [pc, #172]	; (401a38 <init+0xb4>)
  40198a:	4798      	blx	r3
	WDT->WDT_MR = WDT_MR_WDDIS;
  40198c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401990:	4b2a      	ldr	r3, [pc, #168]	; (401a3c <init+0xb8>)
  401992:	605a      	str	r2, [r3, #4]
	pmc_enable_periph_clk(LED_PIO_ID);
  401994:	200c      	movs	r0, #12
  401996:	4d2a      	ldr	r5, [pc, #168]	; (401a40 <init+0xbc>)
  401998:	47a8      	blx	r5
	pio_set_output(LED_PIO, LED_PIO_IDX_MASK, 1, 0, 1);
  40199a:	4f2a      	ldr	r7, [pc, #168]	; (401a44 <init+0xc0>)
  40199c:	2401      	movs	r4, #1
  40199e:	9400      	str	r4, [sp, #0]
  4019a0:	2300      	movs	r3, #0
  4019a2:	4622      	mov	r2, r4
  4019a4:	f44f 7180 	mov.w	r1, #256	; 0x100
  4019a8:	4638      	mov	r0, r7
  4019aa:	4e27      	ldr	r6, [pc, #156]	; (401a48 <init+0xc4>)
  4019ac:	47b0      	blx	r6
	pmc_enable_periph_clk(LED1_PIO_ID);
  4019ae:	200a      	movs	r0, #10
  4019b0:	47a8      	blx	r5
	pio_set_output(LED1_PIO, LED1_PIO_IDX_MASK, 1, 0, 1);
  4019b2:	9400      	str	r4, [sp, #0]
  4019b4:	2300      	movs	r3, #0
  4019b6:	4622      	mov	r2, r4
  4019b8:	4621      	mov	r1, r4
  4019ba:	4824      	ldr	r0, [pc, #144]	; (401a4c <init+0xc8>)
  4019bc:	47b0      	blx	r6
	pmc_enable_periph_clk(LED2_PIO_ID);
  4019be:	200c      	movs	r0, #12
  4019c0:	47a8      	blx	r5
	pio_set_output(LED2_PIO, LED2_PIO_IDX_MASK, 1, 0, 1);
  4019c2:	9400      	str	r4, [sp, #0]
  4019c4:	2300      	movs	r3, #0
  4019c6:	4622      	mov	r2, r4
  4019c8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  4019cc:	4638      	mov	r0, r7
  4019ce:	47b0      	blx	r6
	pmc_enable_periph_clk(LED3_PIO_ID);
  4019d0:	200b      	movs	r0, #11
  4019d2:	47a8      	blx	r5
	pio_set_output(LED3_PIO, LED3_PIO_IDX_MASK, 1, 0, 1);
  4019d4:	9400      	str	r4, [sp, #0]
  4019d6:	2300      	movs	r3, #0
  4019d8:	4622      	mov	r2, r4
  4019da:	2104      	movs	r1, #4
  4019dc:	481c      	ldr	r0, [pc, #112]	; (401a50 <init+0xcc>)
  4019de:	47b0      	blx	r6
	pmc_enable_periph_clk(BUTTON_1_PIO_ID);
  4019e0:	2010      	movs	r0, #16
  4019e2:	47a8      	blx	r5
	pio_configure(BUTTON_1_PIO, PIO_INPUT, BUTTON_1_PIO_IDX_MASK, PIO_PULLUP | PIO_DEBOUNCE);
  4019e4:	4c1b      	ldr	r4, [pc, #108]	; (401a54 <init+0xd0>)
  4019e6:	2309      	movs	r3, #9
  4019e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4019ec:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4019f0:	4620      	mov	r0, r4
  4019f2:	4d19      	ldr	r5, [pc, #100]	; (401a58 <init+0xd4>)
  4019f4:	47a8      	blx	r5
	pio_set_debounce_filter(BUTTON_1_PIO, BUTTON_1_PIO_IDX_MASK, 60);
  4019f6:	223c      	movs	r2, #60	; 0x3c
  4019f8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  4019fc:	4620      	mov	r0, r4
  4019fe:	4b17      	ldr	r3, [pc, #92]	; (401a5c <init+0xd8>)
  401a00:	4798      	blx	r3
	pio_handler_set(BUTTON_1_PIO,
  401a02:	4b17      	ldr	r3, [pc, #92]	; (401a60 <init+0xdc>)
  401a04:	9300      	str	r3, [sp, #0]
  401a06:	2350      	movs	r3, #80	; 0x50
  401a08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401a0c:	2110      	movs	r1, #16
  401a0e:	4620      	mov	r0, r4
  401a10:	4d14      	ldr	r5, [pc, #80]	; (401a64 <init+0xe0>)
  401a12:	47a8      	blx	r5
	pio_enable_interrupt(BUTTON_1_PIO, BUTTON_1_PIO_IDX_MASK);
  401a14:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401a18:	4620      	mov	r0, r4
  401a1a:	4b13      	ldr	r3, [pc, #76]	; (401a68 <init+0xe4>)
  401a1c:	4798      	blx	r3
	pio_get_interrupt_status(BUTTON_1_PIO);
  401a1e:	4620      	mov	r0, r4
  401a20:	4b12      	ldr	r3, [pc, #72]	; (401a6c <init+0xe8>)
  401a22:	4798      	blx	r3
  401a24:	4b12      	ldr	r3, [pc, #72]	; (401a70 <init+0xec>)
  401a26:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  401a2a:	601a      	str	r2, [r3, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  401a2c:	2280      	movs	r2, #128	; 0x80
  401a2e:	f883 2310 	strb.w	r2, [r3, #784]	; 0x310
}
  401a32:	b003      	add	sp, #12
  401a34:	bdf0      	pop	{r4, r5, r6, r7, pc}
  401a36:	bf00      	nop
  401a38:	00400cc9 	.word	0x00400cc9
  401a3c:	400e1850 	.word	0x400e1850
  401a40:	004012ad 	.word	0x004012ad
  401a44:	400e1200 	.word	0x400e1200
  401a48:	00400f63 	.word	0x00400f63
  401a4c:	400e0e00 	.word	0x400e0e00
  401a50:	400e1000 	.word	0x400e1000
  401a54:	400e1400 	.word	0x400e1400
  401a58:	00400f8d 	.word	0x00400f8d
  401a5c:	00400e79 	.word	0x00400e79
  401a60:	00401861 	.word	0x00401861
  401a64:	004010b9 	.word	0x004010b9
  401a68:	0040105b 	.word	0x0040105b
  401a6c:	0040105f 	.word	0x0040105f
  401a70:	e000e100 	.word	0xe000e100

00401a74 <pin_toggle>:
void pin_toggle(Pio *pio, uint32_t mask) {
  401a74:	b538      	push	{r3, r4, r5, lr}
  401a76:	4604      	mov	r4, r0
  401a78:	460d      	mov	r5, r1
  if(pio_get_output_data_status(pio, mask))
  401a7a:	4b06      	ldr	r3, [pc, #24]	; (401a94 <pin_toggle+0x20>)
  401a7c:	4798      	blx	r3
  401a7e:	b920      	cbnz	r0, 401a8a <pin_toggle+0x16>
    pio_set(pio,mask);
  401a80:	4629      	mov	r1, r5
  401a82:	4620      	mov	r0, r4
  401a84:	4b04      	ldr	r3, [pc, #16]	; (401a98 <pin_toggle+0x24>)
  401a86:	4798      	blx	r3
  401a88:	bd38      	pop	{r3, r4, r5, pc}
    pio_clear(pio, mask);
  401a8a:	4629      	mov	r1, r5
  401a8c:	4620      	mov	r0, r4
  401a8e:	4b03      	ldr	r3, [pc, #12]	; (401a9c <pin_toggle+0x28>)
  401a90:	4798      	blx	r3
  401a92:	bd38      	pop	{r3, r4, r5, pc}
  401a94:	0040101d 	.word	0x0040101d
  401a98:	00400e93 	.word	0x00400e93
  401a9c:	00400e97 	.word	0x00400e97

00401aa0 <TC0_Handler>:
void TC0_Handler(void) {
  401aa0:	b500      	push	{lr}
  401aa2:	b083      	sub	sp, #12
	volatile uint32_t status = tc_get_status(TC0, 0);
  401aa4:	2100      	movs	r1, #0
  401aa6:	4805      	ldr	r0, [pc, #20]	; (401abc <TC0_Handler+0x1c>)
  401aa8:	4b05      	ldr	r3, [pc, #20]	; (401ac0 <TC0_Handler+0x20>)
  401aaa:	4798      	blx	r3
  401aac:	9001      	str	r0, [sp, #4]
	pin_toggle(LED3_PIO, LED3_PIO_IDX_MASK);
  401aae:	2104      	movs	r1, #4
  401ab0:	4804      	ldr	r0, [pc, #16]	; (401ac4 <TC0_Handler+0x24>)
  401ab2:	4b05      	ldr	r3, [pc, #20]	; (401ac8 <TC0_Handler+0x28>)
  401ab4:	4798      	blx	r3
}
  401ab6:	b003      	add	sp, #12
  401ab8:	f85d fb04 	ldr.w	pc, [sp], #4
  401abc:	4000c000 	.word	0x4000c000
  401ac0:	004006b9 	.word	0x004006b9
  401ac4:	400e1000 	.word	0x400e1000
  401ac8:	00401a75 	.word	0x00401a75

00401acc <TC1_Handler>:
void TC1_Handler(void) {
  401acc:	b500      	push	{lr}
  401ace:	b083      	sub	sp, #12
	volatile uint32_t status = tc_get_status(TC0, 1);
  401ad0:	2101      	movs	r1, #1
  401ad2:	4805      	ldr	r0, [pc, #20]	; (401ae8 <TC1_Handler+0x1c>)
  401ad4:	4b05      	ldr	r3, [pc, #20]	; (401aec <TC1_Handler+0x20>)
  401ad6:	4798      	blx	r3
  401ad8:	9001      	str	r0, [sp, #4]
	pin_toggle(LED1_PIO, LED1_PIO_IDX_MASK);
  401ada:	2101      	movs	r1, #1
  401adc:	4804      	ldr	r0, [pc, #16]	; (401af0 <TC1_Handler+0x24>)
  401ade:	4b05      	ldr	r3, [pc, #20]	; (401af4 <TC1_Handler+0x28>)
  401ae0:	4798      	blx	r3
}
  401ae2:	b003      	add	sp, #12
  401ae4:	f85d fb04 	ldr.w	pc, [sp], #4
  401ae8:	4000c000 	.word	0x4000c000
  401aec:	004006b9 	.word	0x004006b9
  401af0:	400e0e00 	.word	0x400e0e00
  401af4:	00401a75 	.word	0x00401a75

00401af8 <TC2_Handler>:
void TC2_Handler(void) {
  401af8:	b500      	push	{lr}
  401afa:	b083      	sub	sp, #12
	volatile uint32_t status = tc_get_status(TC0, 2);
  401afc:	2102      	movs	r1, #2
  401afe:	4806      	ldr	r0, [pc, #24]	; (401b18 <TC2_Handler+0x20>)
  401b00:	4b06      	ldr	r3, [pc, #24]	; (401b1c <TC2_Handler+0x24>)
  401b02:	4798      	blx	r3
  401b04:	9001      	str	r0, [sp, #4]
	pin_toggle(LED_PIO, LED_PIO_IDX_MASK);
  401b06:	f44f 7180 	mov.w	r1, #256	; 0x100
  401b0a:	4805      	ldr	r0, [pc, #20]	; (401b20 <TC2_Handler+0x28>)
  401b0c:	4b05      	ldr	r3, [pc, #20]	; (401b24 <TC2_Handler+0x2c>)
  401b0e:	4798      	blx	r3
}
  401b10:	b003      	add	sp, #12
  401b12:	f85d fb04 	ldr.w	pc, [sp], #4
  401b16:	bf00      	nop
  401b18:	4000c000 	.word	0x4000c000
  401b1c:	004006b9 	.word	0x004006b9
  401b20:	400e1200 	.word	0x400e1200
  401b24:	00401a75 	.word	0x00401a75

00401b28 <RTT_Handler>:
void RTT_Handler(void) {
  401b28:	b508      	push	{r3, lr}
	ul_status = rtt_get_status(RTT);
  401b2a:	480a      	ldr	r0, [pc, #40]	; (401b54 <RTT_Handler+0x2c>)
  401b2c:	4b0a      	ldr	r3, [pc, #40]	; (401b58 <RTT_Handler+0x30>)
  401b2e:	4798      	blx	r3
	if ((ul_status & RTT_SR_ALMS) == RTT_SR_ALMS) {
  401b30:	f010 0f01 	tst.w	r0, #1
  401b34:	d100      	bne.n	401b38 <RTT_Handler+0x10>
  401b36:	bd08      	pop	{r3, pc}
		RTT_init(4, 0, RTT_MR_RTTINCIEN);
  401b38:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  401b3c:	2000      	movs	r0, #0
  401b3e:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
  401b42:	4b06      	ldr	r3, [pc, #24]	; (401b5c <RTT_Handler+0x34>)
  401b44:	4798      	blx	r3
		pin_toggle(LED2_PIO, LED2_PIO_IDX_MASK);
  401b46:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401b4a:	4805      	ldr	r0, [pc, #20]	; (401b60 <RTT_Handler+0x38>)
  401b4c:	4b05      	ldr	r3, [pc, #20]	; (401b64 <RTT_Handler+0x3c>)
  401b4e:	4798      	blx	r3
}
  401b50:	e7f1      	b.n	401b36 <RTT_Handler+0xe>
  401b52:	bf00      	nop
  401b54:	400e1830 	.word	0x400e1830
  401b58:	004004f5 	.word	0x004004f5
  401b5c:	0040186d 	.word	0x0040186d
  401b60:	400e1200 	.word	0x400e1200
  401b64:	00401a75 	.word	0x00401a75

00401b68 <TC_init>:
void TC_init(Tc * TC, int ID_TC, int TC_CHANNEL, int freq){
  401b68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401b6c:	b085      	sub	sp, #20
  401b6e:	4606      	mov	r6, r0
  401b70:	460c      	mov	r4, r1
  401b72:	4617      	mov	r7, r2
  401b74:	4698      	mov	r8, r3
	pmc_enable_periph_clk(ID_TC);
  401b76:	4608      	mov	r0, r1
  401b78:	4b1c      	ldr	r3, [pc, #112]	; (401bec <TC_init+0x84>)
  401b7a:	4798      	blx	r3
	tc_find_mck_divisor(freq, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  401b7c:	4d1c      	ldr	r5, [pc, #112]	; (401bf0 <TC_init+0x88>)
  401b7e:	9500      	str	r5, [sp, #0]
  401b80:	ab02      	add	r3, sp, #8
  401b82:	aa03      	add	r2, sp, #12
  401b84:	4629      	mov	r1, r5
  401b86:	4640      	mov	r0, r8
  401b88:	f8df 9080 	ldr.w	r9, [pc, #128]	; 401c0c <TC_init+0xa4>
  401b8c:	47c8      	blx	r9
	tc_init(TC, TC_CHANNEL, ul_tcclks | TC_CMR_CPCTRG);
  401b8e:	9a02      	ldr	r2, [sp, #8]
  401b90:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  401b94:	4639      	mov	r1, r7
  401b96:	4630      	mov	r0, r6
  401b98:	4b16      	ldr	r3, [pc, #88]	; (401bf4 <TC_init+0x8c>)
  401b9a:	4798      	blx	r3
	tc_write_rc(TC, TC_CHANNEL, (ul_sysclk / ul_div) / freq);
  401b9c:	9a03      	ldr	r2, [sp, #12]
  401b9e:	fbb5 f2f2 	udiv	r2, r5, r2
  401ba2:	fbb2 f2f8 	udiv	r2, r2, r8
  401ba6:	4639      	mov	r1, r7
  401ba8:	4630      	mov	r0, r6
  401baa:	4b13      	ldr	r3, [pc, #76]	; (401bf8 <TC_init+0x90>)
  401bac:	4798      	blx	r3
  	NVIC_SetPriority(ID_TC, 4);
  401bae:	b263      	sxtb	r3, r4
  if(IRQn < 0) {
  401bb0:	2b00      	cmp	r3, #0
  401bb2:	db13      	blt.n	401bdc <TC_init+0x74>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  401bb4:	4a11      	ldr	r2, [pc, #68]	; (401bfc <TC_init+0x94>)
  401bb6:	2180      	movs	r1, #128	; 0x80
  401bb8:	54d1      	strb	r1, [r2, r3]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401bba:	095b      	lsrs	r3, r3, #5
  401bbc:	f004 041f 	and.w	r4, r4, #31
  401bc0:	2201      	movs	r2, #1
  401bc2:	fa02 f404 	lsl.w	r4, r2, r4
  401bc6:	4a0e      	ldr	r2, [pc, #56]	; (401c00 <TC_init+0x98>)
  401bc8:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
	tc_enable_interrupt(TC, TC_CHANNEL, TC_IER_CPCS);
  401bcc:	2210      	movs	r2, #16
  401bce:	4639      	mov	r1, r7
  401bd0:	4630      	mov	r0, r6
  401bd2:	4b0c      	ldr	r3, [pc, #48]	; (401c04 <TC_init+0x9c>)
  401bd4:	4798      	blx	r3
}
  401bd6:	b005      	add	sp, #20
  401bd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  401bdc:	f004 010f 	and.w	r1, r4, #15
  401be0:	4a09      	ldr	r2, [pc, #36]	; (401c08 <TC_init+0xa0>)
  401be2:	440a      	add	r2, r1
  401be4:	2180      	movs	r1, #128	; 0x80
  401be6:	7611      	strb	r1, [r2, #24]
  401be8:	e7e7      	b.n	401bba <TC_init+0x52>
  401bea:	bf00      	nop
  401bec:	004012ad 	.word	0x004012ad
  401bf0:	11e1a300 	.word	0x11e1a300
  401bf4:	00400687 	.word	0x00400687
  401bf8:	004006a9 	.word	0x004006a9
  401bfc:	e000e400 	.word	0xe000e400
  401c00:	e000e100 	.word	0xe000e100
  401c04:	004006b1 	.word	0x004006b1
  401c08:	e000ecfc 	.word	0xe000ecfc
  401c0c:	004006c1 	.word	0x004006c1

00401c10 <RTC_init>:

/**
* Configura o RTC para funcionar com interrupcao de alarme
*/
void RTC_init(Rtc *rtc, uint32_t id_rtc, calendar t, uint32_t irq_type) {
  401c10:	b082      	sub	sp, #8
  401c12:	b570      	push	{r4, r5, r6, lr}
  401c14:	b082      	sub	sp, #8
  401c16:	4605      	mov	r5, r0
  401c18:	460c      	mov	r4, r1
  401c1a:	a906      	add	r1, sp, #24
  401c1c:	e881 000c 	stmia.w	r1, {r2, r3}
	/* Configura o PMC */
	pmc_enable_periph_clk(ID_RTC);
  401c20:	2002      	movs	r0, #2
  401c22:	4b1d      	ldr	r3, [pc, #116]	; (401c98 <RTC_init+0x88>)
  401c24:	4798      	blx	r3

	/* Default RTC configuration, 24-hour mode */
	rtc_set_hour_mode(rtc, 0);
  401c26:	2100      	movs	r1, #0
  401c28:	4628      	mov	r0, r5
  401c2a:	4b1c      	ldr	r3, [pc, #112]	; (401c9c <RTC_init+0x8c>)
  401c2c:	4798      	blx	r3

	/* Configura data e hora manualmente */
	rtc_set_date(rtc, t.year, t.month, t.day, t.week);
  401c2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401c30:	9300      	str	r3, [sp, #0]
  401c32:	9b08      	ldr	r3, [sp, #32]
  401c34:	9a07      	ldr	r2, [sp, #28]
  401c36:	9906      	ldr	r1, [sp, #24]
  401c38:	4628      	mov	r0, r5
  401c3a:	4e19      	ldr	r6, [pc, #100]	; (401ca0 <RTC_init+0x90>)
  401c3c:	47b0      	blx	r6
	rtc_set_time(rtc, t.hour, t.minute, t.second);
  401c3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  401c40:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  401c42:	990a      	ldr	r1, [sp, #40]	; 0x28
  401c44:	4628      	mov	r0, r5
  401c46:	4e17      	ldr	r6, [pc, #92]	; (401ca4 <RTC_init+0x94>)
  401c48:	47b0      	blx	r6

	/* Configure RTC interrupts */
	NVIC_DisableIRQ(id_rtc);
  401c4a:	b262      	sxtb	r2, r4
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  401c4c:	b2e4      	uxtb	r4, r4
  401c4e:	f004 011f 	and.w	r1, r4, #31
  401c52:	2301      	movs	r3, #1
  401c54:	408b      	lsls	r3, r1
  401c56:	0956      	lsrs	r6, r2, #5
  401c58:	4813      	ldr	r0, [pc, #76]	; (401ca8 <RTC_init+0x98>)
  401c5a:	eb00 0186 	add.w	r1, r0, r6, lsl #2
  401c5e:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  401c62:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
  if(IRQn < 0) {
  401c66:	2a00      	cmp	r2, #0
  401c68:	db0f      	blt.n	401c8a <RTC_init+0x7a>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  401c6a:	490f      	ldr	r1, [pc, #60]	; (401ca8 <RTC_init+0x98>)
  401c6c:	4411      	add	r1, r2
  401c6e:	2280      	movs	r2, #128	; 0x80
  401c70:	f881 2300 	strb.w	r2, [r1, #768]	; 0x300
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401c74:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
	NVIC_ClearPendingIRQ(id_rtc);
	NVIC_SetPriority(id_rtc, 4);
	NVIC_EnableIRQ(id_rtc);

	/* Ativa interrupcao via alarme */
	rtc_enable_interrupt(rtc,  irq_type);
  401c78:	990d      	ldr	r1, [sp, #52]	; 0x34
  401c7a:	4628      	mov	r0, r5
  401c7c:	4b0b      	ldr	r3, [pc, #44]	; (401cac <RTC_init+0x9c>)
  401c7e:	4798      	blx	r3
}
  401c80:	b002      	add	sp, #8
  401c82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  401c86:	b002      	add	sp, #8
  401c88:	4770      	bx	lr
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  401c8a:	f004 040f 	and.w	r4, r4, #15
  401c8e:	4a08      	ldr	r2, [pc, #32]	; (401cb0 <RTC_init+0xa0>)
  401c90:	2180      	movs	r1, #128	; 0x80
  401c92:	5511      	strb	r1, [r2, r4]
  401c94:	e7ee      	b.n	401c74 <RTC_init+0x64>
  401c96:	bf00      	nop
  401c98:	004012ad 	.word	0x004012ad
  401c9c:	004001ad 	.word	0x004001ad
  401ca0:	004003b9 	.word	0x004003b9
  401ca4:	00400221 	.word	0x00400221
  401ca8:	e000e100 	.word	0xe000e100
  401cac:	004001c3 	.word	0x004001c3
  401cb0:	e000ed14 	.word	0xe000ed14

00401cb4 <display_date>:

void display_date(uint32_t hour, uint32_t min, uint32_t sec){
  401cb4:	b510      	push	{r4, lr}
  401cb6:	b0a2      	sub	sp, #136	; 0x88
	char date_str[128];
	sprintf(date_str, "%02d:%02d:%02d", hour, min, sec);
  401cb8:	9200      	str	r2, [sp, #0]
  401cba:	460b      	mov	r3, r1
  401cbc:	4602      	mov	r2, r0
  401cbe:	4906      	ldr	r1, [pc, #24]	; (401cd8 <display_date+0x24>)
  401cc0:	a802      	add	r0, sp, #8
  401cc2:	4c06      	ldr	r4, [pc, #24]	; (401cdc <display_date+0x28>)
  401cc4:	47a0      	blx	r4
	gfx_mono_draw_string(date_str, 5, 5, &sysfont);
  401cc6:	4b06      	ldr	r3, [pc, #24]	; (401ce0 <display_date+0x2c>)
  401cc8:	2205      	movs	r2, #5
  401cca:	4611      	mov	r1, r2
  401ccc:	a802      	add	r0, sp, #8
  401cce:	4c05      	ldr	r4, [pc, #20]	; (401ce4 <display_date+0x30>)
  401cd0:	47a0      	blx	r4
}
  401cd2:	b022      	add	sp, #136	; 0x88
  401cd4:	bd10      	pop	{r4, pc}
  401cd6:	bf00      	nop
  401cd8:	00407198 	.word	0x00407198
  401cdc:	00401f29 	.word	0x00401f29
  401ce0:	2040000c 	.word	0x2040000c
  401ce4:	00400911 	.word	0x00400911

00401ce8 <main>:

/************************************************************************/
/* Main Code	                                                        */
/************************************************************************/
int main(void){
  401ce8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  401cec:	b095      	sub	sp, #84	; 0x54
  board_init();
  401cee:	4b41      	ldr	r3, [pc, #260]	; (401df4 <main+0x10c>)
  401cf0:	4798      	blx	r3
	delay_init();

  init();
  401cf2:	4b41      	ldr	r3, [pc, #260]	; (401df8 <main+0x110>)
  401cf4:	4798      	blx	r3

	gfx_mono_ssd1306_init();
  401cf6:	4b41      	ldr	r3, [pc, #260]	; (401dfc <main+0x114>)
  401cf8:	4798      	blx	r3

	TC_init(TC0, ID_TC1, 1, 5);
  401cfa:	4c41      	ldr	r4, [pc, #260]	; (401e00 <main+0x118>)
  401cfc:	2305      	movs	r3, #5
  401cfe:	2201      	movs	r2, #1
  401d00:	2118      	movs	r1, #24
  401d02:	4620      	mov	r0, r4
  401d04:	4e3f      	ldr	r6, [pc, #252]	; (401e04 <main+0x11c>)
  401d06:	47b0      	blx	r6
	tc_start(TC0, 1);
  401d08:	2101      	movs	r1, #1
  401d0a:	4620      	mov	r0, r4
  401d0c:	4d3e      	ldr	r5, [pc, #248]	; (401e08 <main+0x120>)
  401d0e:	47a8      	blx	r5

	TC_init(TC0, ID_TC2, 2, 4);
  401d10:	2304      	movs	r3, #4
  401d12:	2202      	movs	r2, #2
  401d14:	2119      	movs	r1, #25
  401d16:	4620      	mov	r0, r4
  401d18:	47b0      	blx	r6
	tc_start(TC0, 2);
  401d1a:	2102      	movs	r1, #2
  401d1c:	4620      	mov	r0, r4
  401d1e:	47a8      	blx	r5

	RTT_init(4, 16, RTT_MR_ALMIEN); 
  401d20:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  401d24:	2010      	movs	r0, #16
  401d26:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
  401d2a:	4b38      	ldr	r3, [pc, #224]	; (401e0c <main+0x124>)
  401d2c:	4798      	blx	r3
	
	calendar rtc_initial = {2018, 3, 19, 12, 15, 45 ,1};
  401d2e:	ac0d      	add	r4, sp, #52	; 0x34
  401d30:	4d37      	ldr	r5, [pc, #220]	; (401e10 <main+0x128>)
  401d32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  401d34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  401d36:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  401d3a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	RTC_init(RTC, ID_RTC, rtc_initial, RTC_SR_SEC|RTC_SR_ALARM);
  401d3e:	2306      	movs	r3, #6
  401d40:	9305      	str	r3, [sp, #20]
  401d42:	466c      	mov	r4, sp
  401d44:	ad0f      	add	r5, sp, #60	; 0x3c
  401d46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  401d48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  401d4a:	682b      	ldr	r3, [r5, #0]
  401d4c:	6023      	str	r3, [r4, #0]
  401d4e:	ab0d      	add	r3, sp, #52	; 0x34
  401d50:	cb0c      	ldmia	r3, {r2, r3}
  401d52:	2102      	movs	r1, #2
  401d54:	482f      	ldr	r0, [pc, #188]	; (401e14 <main+0x12c>)
  401d56:	4c30      	ldr	r4, [pc, #192]	; (401e18 <main+0x130>)
  401d58:	47a0      	blx	r4

	uint32_t current_hour, current_min, current_sec;
	uint32_t current_year, current_month, current_day, current_week;

	while (1) {
		if (flag_rtc_sec) {
  401d5a:	4c30      	ldr	r4, [pc, #192]	; (401e1c <main+0x134>)
			flag_rtc_sec = 0;
			rtc_get_date(RTC, &current_year, &current_month, &current_day, &current_week);
  401d5c:	4d2d      	ldr	r5, [pc, #180]	; (401e14 <main+0x12c>)
  401d5e:	4e30      	ldr	r6, [pc, #192]	; (401e20 <main+0x138>)
  401d60:	e01a      	b.n	401d98 <main+0xb0>
			flag_rtc_sec = 0;
  401d62:	2300      	movs	r3, #0
  401d64:	7023      	strb	r3, [r4, #0]
			rtc_get_date(RTC, &current_year, &current_month, &current_day, &current_week);
  401d66:	ab06      	add	r3, sp, #24
  401d68:	9300      	str	r3, [sp, #0]
  401d6a:	ab07      	add	r3, sp, #28
  401d6c:	aa08      	add	r2, sp, #32
  401d6e:	a909      	add	r1, sp, #36	; 0x24
  401d70:	4628      	mov	r0, r5
  401d72:	47b0      	blx	r6
			rtc_get_time(RTC, &current_hour, &current_min, &current_sec);
  401d74:	ab0a      	add	r3, sp, #40	; 0x28
  401d76:	aa0b      	add	r2, sp, #44	; 0x2c
  401d78:	a90c      	add	r1, sp, #48	; 0x30
  401d7a:	4628      	mov	r0, r5
  401d7c:	4f29      	ldr	r7, [pc, #164]	; (401e24 <main+0x13c>)
  401d7e:	47b8      	blx	r7
			display_date(current_hour, current_min, current_sec);
  401d80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  401d82:	990b      	ldr	r1, [sp, #44]	; 0x2c
  401d84:	980c      	ldr	r0, [sp, #48]	; 0x30
  401d86:	4b28      	ldr	r3, [pc, #160]	; (401e28 <main+0x140>)
  401d88:	4798      	blx	r3
  401d8a:	e008      	b.n	401d9e <main+0xb6>

			rtc_set_time_alarm(RTC, 1, current_hour, 1, next_min, 1, next_sec);

			flag_button = 0;
		}
		if (flag_rtc_alarm) {
  401d8c:	4b27      	ldr	r3, [pc, #156]	; (401e2c <main+0x144>)
  401d8e:	781b      	ldrb	r3, [r3, #0]
  401d90:	b9fb      	cbnz	r3, 401dd2 <main+0xea>
			flag_rtc_alarm = 0;
			TC_init(TC0, ID_TC0, 0, 4);
			tc_start(TC0, 0);
		}
		pmc_sleep(SAM_PM_SMODE_SLEEP_WFI);
  401d92:	2002      	movs	r0, #2
  401d94:	4b26      	ldr	r3, [pc, #152]	; (401e30 <main+0x148>)
  401d96:	4798      	blx	r3
		if (flag_rtc_sec) {
  401d98:	7823      	ldrb	r3, [r4, #0]
  401d9a:	2b00      	cmp	r3, #0
  401d9c:	d1e1      	bne.n	401d62 <main+0x7a>
		if (flag_button) {
  401d9e:	4b25      	ldr	r3, [pc, #148]	; (401e34 <main+0x14c>)
  401da0:	781b      	ldrb	r3, [r3, #0]
  401da2:	2b00      	cmp	r3, #0
  401da4:	d0f2      	beq.n	401d8c <main+0xa4>
			next_sec = current_sec + 20;
  401da6:	990a      	ldr	r1, [sp, #40]	; 0x28
  401da8:	f101 0314 	add.w	r3, r1, #20
			if (next_sec >= 60){
  401dac:	2b3b      	cmp	r3, #59	; 0x3b
				next_min = current_min + 1;
  401dae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  401db0:	bf84      	itt	hi
  401db2:	3201      	addhi	r2, #1
				next_sec = next_sec - 60;
  401db4:	f1a1 0328 	subhi.w	r3, r1, #40	; 0x28
			rtc_set_time_alarm(RTC, 1, current_hour, 1, next_min, 1, next_sec);
  401db8:	9302      	str	r3, [sp, #8]
  401dba:	2101      	movs	r1, #1
  401dbc:	9101      	str	r1, [sp, #4]
  401dbe:	9200      	str	r2, [sp, #0]
  401dc0:	460b      	mov	r3, r1
  401dc2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  401dc4:	4628      	mov	r0, r5
  401dc6:	4f1c      	ldr	r7, [pc, #112]	; (401e38 <main+0x150>)
  401dc8:	47b8      	blx	r7
			flag_button = 0;
  401dca:	2200      	movs	r2, #0
  401dcc:	4b19      	ldr	r3, [pc, #100]	; (401e34 <main+0x14c>)
  401dce:	701a      	strb	r2, [r3, #0]
  401dd0:	e7dc      	b.n	401d8c <main+0xa4>
			flag_rtc_alarm = 0;
  401dd2:	2700      	movs	r7, #0
  401dd4:	4b15      	ldr	r3, [pc, #84]	; (401e2c <main+0x144>)
  401dd6:	701f      	strb	r7, [r3, #0]
			TC_init(TC0, ID_TC0, 0, 4);
  401dd8:	f8df 8024 	ldr.w	r8, [pc, #36]	; 401e00 <main+0x118>
  401ddc:	2304      	movs	r3, #4
  401dde:	463a      	mov	r2, r7
  401de0:	2117      	movs	r1, #23
  401de2:	4640      	mov	r0, r8
  401de4:	f8df 901c 	ldr.w	r9, [pc, #28]	; 401e04 <main+0x11c>
  401de8:	47c8      	blx	r9
			tc_start(TC0, 0);
  401dea:	4639      	mov	r1, r7
  401dec:	4640      	mov	r0, r8
  401dee:	4b06      	ldr	r3, [pc, #24]	; (401e08 <main+0x120>)
  401df0:	4798      	blx	r3
  401df2:	e7ce      	b.n	401d92 <main+0xaa>
  401df4:	00400d39 	.word	0x00400d39
  401df8:	00401985 	.word	0x00401985
  401dfc:	004009a9 	.word	0x004009a9
  401e00:	4000c000 	.word	0x4000c000
  401e04:	00401b69 	.word	0x00401b69
  401e08:	004006a1 	.word	0x004006a1
  401e0c:	0040186d 	.word	0x0040186d
  401e10:	0040717c 	.word	0x0040717c
  401e14:	400e1860 	.word	0x400e1860
  401e18:	00401c11 	.word	0x00401c11
  401e1c:	20400c76 	.word	0x20400c76
  401e20:	00400345 	.word	0x00400345
  401e24:	004001c7 	.word	0x004001c7
  401e28:	00401cb5 	.word	0x00401cb5
  401e2c:	20400c75 	.word	0x20400c75
  401e30:	00401351 	.word	0x00401351
  401e34:	20400c74 	.word	0x20400c74
  401e38:	004002b1 	.word	0x004002b1

00401e3c <__libc_init_array>:
  401e3c:	b570      	push	{r4, r5, r6, lr}
  401e3e:	4e0f      	ldr	r6, [pc, #60]	; (401e7c <__libc_init_array+0x40>)
  401e40:	4d0f      	ldr	r5, [pc, #60]	; (401e80 <__libc_init_array+0x44>)
  401e42:	1b76      	subs	r6, r6, r5
  401e44:	10b6      	asrs	r6, r6, #2
  401e46:	bf18      	it	ne
  401e48:	2400      	movne	r4, #0
  401e4a:	d005      	beq.n	401e58 <__libc_init_array+0x1c>
  401e4c:	3401      	adds	r4, #1
  401e4e:	f855 3b04 	ldr.w	r3, [r5], #4
  401e52:	4798      	blx	r3
  401e54:	42a6      	cmp	r6, r4
  401e56:	d1f9      	bne.n	401e4c <__libc_init_array+0x10>
  401e58:	4e0a      	ldr	r6, [pc, #40]	; (401e84 <__libc_init_array+0x48>)
  401e5a:	4d0b      	ldr	r5, [pc, #44]	; (401e88 <__libc_init_array+0x4c>)
  401e5c:	1b76      	subs	r6, r6, r5
  401e5e:	f005 fae7 	bl	407430 <_init>
  401e62:	10b6      	asrs	r6, r6, #2
  401e64:	bf18      	it	ne
  401e66:	2400      	movne	r4, #0
  401e68:	d006      	beq.n	401e78 <__libc_init_array+0x3c>
  401e6a:	3401      	adds	r4, #1
  401e6c:	f855 3b04 	ldr.w	r3, [r5], #4
  401e70:	4798      	blx	r3
  401e72:	42a6      	cmp	r6, r4
  401e74:	d1f9      	bne.n	401e6a <__libc_init_array+0x2e>
  401e76:	bd70      	pop	{r4, r5, r6, pc}
  401e78:	bd70      	pop	{r4, r5, r6, pc}
  401e7a:	bf00      	nop
  401e7c:	0040743c 	.word	0x0040743c
  401e80:	0040743c 	.word	0x0040743c
  401e84:	00407444 	.word	0x00407444
  401e88:	0040743c 	.word	0x0040743c

00401e8c <memset>:
  401e8c:	b470      	push	{r4, r5, r6}
  401e8e:	0786      	lsls	r6, r0, #30
  401e90:	d046      	beq.n	401f20 <memset+0x94>
  401e92:	1e54      	subs	r4, r2, #1
  401e94:	2a00      	cmp	r2, #0
  401e96:	d041      	beq.n	401f1c <memset+0x90>
  401e98:	b2ca      	uxtb	r2, r1
  401e9a:	4603      	mov	r3, r0
  401e9c:	e002      	b.n	401ea4 <memset+0x18>
  401e9e:	f114 34ff 	adds.w	r4, r4, #4294967295
  401ea2:	d33b      	bcc.n	401f1c <memset+0x90>
  401ea4:	f803 2b01 	strb.w	r2, [r3], #1
  401ea8:	079d      	lsls	r5, r3, #30
  401eaa:	d1f8      	bne.n	401e9e <memset+0x12>
  401eac:	2c03      	cmp	r4, #3
  401eae:	d92e      	bls.n	401f0e <memset+0x82>
  401eb0:	b2cd      	uxtb	r5, r1
  401eb2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  401eb6:	2c0f      	cmp	r4, #15
  401eb8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  401ebc:	d919      	bls.n	401ef2 <memset+0x66>
  401ebe:	f103 0210 	add.w	r2, r3, #16
  401ec2:	4626      	mov	r6, r4
  401ec4:	3e10      	subs	r6, #16
  401ec6:	2e0f      	cmp	r6, #15
  401ec8:	f842 5c10 	str.w	r5, [r2, #-16]
  401ecc:	f842 5c0c 	str.w	r5, [r2, #-12]
  401ed0:	f842 5c08 	str.w	r5, [r2, #-8]
  401ed4:	f842 5c04 	str.w	r5, [r2, #-4]
  401ed8:	f102 0210 	add.w	r2, r2, #16
  401edc:	d8f2      	bhi.n	401ec4 <memset+0x38>
  401ede:	f1a4 0210 	sub.w	r2, r4, #16
  401ee2:	f022 020f 	bic.w	r2, r2, #15
  401ee6:	f004 040f 	and.w	r4, r4, #15
  401eea:	3210      	adds	r2, #16
  401eec:	2c03      	cmp	r4, #3
  401eee:	4413      	add	r3, r2
  401ef0:	d90d      	bls.n	401f0e <memset+0x82>
  401ef2:	461e      	mov	r6, r3
  401ef4:	4622      	mov	r2, r4
  401ef6:	3a04      	subs	r2, #4
  401ef8:	2a03      	cmp	r2, #3
  401efa:	f846 5b04 	str.w	r5, [r6], #4
  401efe:	d8fa      	bhi.n	401ef6 <memset+0x6a>
  401f00:	1f22      	subs	r2, r4, #4
  401f02:	f022 0203 	bic.w	r2, r2, #3
  401f06:	3204      	adds	r2, #4
  401f08:	4413      	add	r3, r2
  401f0a:	f004 0403 	and.w	r4, r4, #3
  401f0e:	b12c      	cbz	r4, 401f1c <memset+0x90>
  401f10:	b2c9      	uxtb	r1, r1
  401f12:	441c      	add	r4, r3
  401f14:	f803 1b01 	strb.w	r1, [r3], #1
  401f18:	429c      	cmp	r4, r3
  401f1a:	d1fb      	bne.n	401f14 <memset+0x88>
  401f1c:	bc70      	pop	{r4, r5, r6}
  401f1e:	4770      	bx	lr
  401f20:	4614      	mov	r4, r2
  401f22:	4603      	mov	r3, r0
  401f24:	e7c2      	b.n	401eac <memset+0x20>
  401f26:	bf00      	nop

00401f28 <sprintf>:
  401f28:	b40e      	push	{r1, r2, r3}
  401f2a:	b5f0      	push	{r4, r5, r6, r7, lr}
  401f2c:	b09c      	sub	sp, #112	; 0x70
  401f2e:	ab21      	add	r3, sp, #132	; 0x84
  401f30:	490f      	ldr	r1, [pc, #60]	; (401f70 <sprintf+0x48>)
  401f32:	f853 2b04 	ldr.w	r2, [r3], #4
  401f36:	9301      	str	r3, [sp, #4]
  401f38:	4605      	mov	r5, r0
  401f3a:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  401f3e:	6808      	ldr	r0, [r1, #0]
  401f40:	9502      	str	r5, [sp, #8]
  401f42:	f44f 7702 	mov.w	r7, #520	; 0x208
  401f46:	f64f 76ff 	movw	r6, #65535	; 0xffff
  401f4a:	a902      	add	r1, sp, #8
  401f4c:	9506      	str	r5, [sp, #24]
  401f4e:	f8ad 7014 	strh.w	r7, [sp, #20]
  401f52:	9404      	str	r4, [sp, #16]
  401f54:	9407      	str	r4, [sp, #28]
  401f56:	f8ad 6016 	strh.w	r6, [sp, #22]
  401f5a:	f000 f80b 	bl	401f74 <_svfprintf_r>
  401f5e:	9b02      	ldr	r3, [sp, #8]
  401f60:	2200      	movs	r2, #0
  401f62:	701a      	strb	r2, [r3, #0]
  401f64:	b01c      	add	sp, #112	; 0x70
  401f66:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  401f6a:	b003      	add	sp, #12
  401f6c:	4770      	bx	lr
  401f6e:	bf00      	nop
  401f70:	20400020 	.word	0x20400020

00401f74 <_svfprintf_r>:
  401f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401f78:	b0c3      	sub	sp, #268	; 0x10c
  401f7a:	460c      	mov	r4, r1
  401f7c:	910b      	str	r1, [sp, #44]	; 0x2c
  401f7e:	4692      	mov	sl, r2
  401f80:	930f      	str	r3, [sp, #60]	; 0x3c
  401f82:	900c      	str	r0, [sp, #48]	; 0x30
  401f84:	f002 fa0c 	bl	4043a0 <_localeconv_r>
  401f88:	6803      	ldr	r3, [r0, #0]
  401f8a:	931a      	str	r3, [sp, #104]	; 0x68
  401f8c:	4618      	mov	r0, r3
  401f8e:	f003 f8d7 	bl	405140 <strlen>
  401f92:	89a3      	ldrh	r3, [r4, #12]
  401f94:	9019      	str	r0, [sp, #100]	; 0x64
  401f96:	0619      	lsls	r1, r3, #24
  401f98:	d503      	bpl.n	401fa2 <_svfprintf_r+0x2e>
  401f9a:	6923      	ldr	r3, [r4, #16]
  401f9c:	2b00      	cmp	r3, #0
  401f9e:	f001 8003 	beq.w	402fa8 <_svfprintf_r+0x1034>
  401fa2:	2300      	movs	r3, #0
  401fa4:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
  401fa8:	9313      	str	r3, [sp, #76]	; 0x4c
  401faa:	9315      	str	r3, [sp, #84]	; 0x54
  401fac:	9314      	str	r3, [sp, #80]	; 0x50
  401fae:	9327      	str	r3, [sp, #156]	; 0x9c
  401fb0:	9326      	str	r3, [sp, #152]	; 0x98
  401fb2:	9318      	str	r3, [sp, #96]	; 0x60
  401fb4:	931b      	str	r3, [sp, #108]	; 0x6c
  401fb6:	9309      	str	r3, [sp, #36]	; 0x24
  401fb8:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
  401fbc:	46c8      	mov	r8, r9
  401fbe:	9316      	str	r3, [sp, #88]	; 0x58
  401fc0:	9317      	str	r3, [sp, #92]	; 0x5c
  401fc2:	f89a 3000 	ldrb.w	r3, [sl]
  401fc6:	4654      	mov	r4, sl
  401fc8:	b1e3      	cbz	r3, 402004 <_svfprintf_r+0x90>
  401fca:	2b25      	cmp	r3, #37	; 0x25
  401fcc:	d102      	bne.n	401fd4 <_svfprintf_r+0x60>
  401fce:	e019      	b.n	402004 <_svfprintf_r+0x90>
  401fd0:	2b25      	cmp	r3, #37	; 0x25
  401fd2:	d003      	beq.n	401fdc <_svfprintf_r+0x68>
  401fd4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  401fd8:	2b00      	cmp	r3, #0
  401fda:	d1f9      	bne.n	401fd0 <_svfprintf_r+0x5c>
  401fdc:	eba4 050a 	sub.w	r5, r4, sl
  401fe0:	b185      	cbz	r5, 402004 <_svfprintf_r+0x90>
  401fe2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  401fe4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  401fe6:	f8c8 a000 	str.w	sl, [r8]
  401fea:	3301      	adds	r3, #1
  401fec:	442a      	add	r2, r5
  401fee:	2b07      	cmp	r3, #7
  401ff0:	f8c8 5004 	str.w	r5, [r8, #4]
  401ff4:	9227      	str	r2, [sp, #156]	; 0x9c
  401ff6:	9326      	str	r3, [sp, #152]	; 0x98
  401ff8:	dc7f      	bgt.n	4020fa <_svfprintf_r+0x186>
  401ffa:	f108 0808 	add.w	r8, r8, #8
  401ffe:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402000:	442b      	add	r3, r5
  402002:	9309      	str	r3, [sp, #36]	; 0x24
  402004:	7823      	ldrb	r3, [r4, #0]
  402006:	2b00      	cmp	r3, #0
  402008:	d07f      	beq.n	40210a <_svfprintf_r+0x196>
  40200a:	2300      	movs	r3, #0
  40200c:	461a      	mov	r2, r3
  40200e:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  402012:	4619      	mov	r1, r3
  402014:	930d      	str	r3, [sp, #52]	; 0x34
  402016:	469b      	mov	fp, r3
  402018:	f04f 30ff 	mov.w	r0, #4294967295
  40201c:	7863      	ldrb	r3, [r4, #1]
  40201e:	900a      	str	r0, [sp, #40]	; 0x28
  402020:	f104 0a01 	add.w	sl, r4, #1
  402024:	f10a 0a01 	add.w	sl, sl, #1
  402028:	f1a3 0020 	sub.w	r0, r3, #32
  40202c:	2858      	cmp	r0, #88	; 0x58
  40202e:	f200 83c1 	bhi.w	4027b4 <_svfprintf_r+0x840>
  402032:	e8df f010 	tbh	[pc, r0, lsl #1]
  402036:	0238      	.short	0x0238
  402038:	03bf03bf 	.word	0x03bf03bf
  40203c:	03bf0240 	.word	0x03bf0240
  402040:	03bf03bf 	.word	0x03bf03bf
  402044:	03bf03bf 	.word	0x03bf03bf
  402048:	024503bf 	.word	0x024503bf
  40204c:	03bf0203 	.word	0x03bf0203
  402050:	026b005d 	.word	0x026b005d
  402054:	028603bf 	.word	0x028603bf
  402058:	039d039d 	.word	0x039d039d
  40205c:	039d039d 	.word	0x039d039d
  402060:	039d039d 	.word	0x039d039d
  402064:	039d039d 	.word	0x039d039d
  402068:	03bf039d 	.word	0x03bf039d
  40206c:	03bf03bf 	.word	0x03bf03bf
  402070:	03bf03bf 	.word	0x03bf03bf
  402074:	03bf03bf 	.word	0x03bf03bf
  402078:	03bf03bf 	.word	0x03bf03bf
  40207c:	033703bf 	.word	0x033703bf
  402080:	03bf0357 	.word	0x03bf0357
  402084:	03bf0357 	.word	0x03bf0357
  402088:	03bf03bf 	.word	0x03bf03bf
  40208c:	039803bf 	.word	0x039803bf
  402090:	03bf03bf 	.word	0x03bf03bf
  402094:	03bf03ad 	.word	0x03bf03ad
  402098:	03bf03bf 	.word	0x03bf03bf
  40209c:	03bf03bf 	.word	0x03bf03bf
  4020a0:	03bf0259 	.word	0x03bf0259
  4020a4:	031e03bf 	.word	0x031e03bf
  4020a8:	03bf03bf 	.word	0x03bf03bf
  4020ac:	03bf03bf 	.word	0x03bf03bf
  4020b0:	03bf03bf 	.word	0x03bf03bf
  4020b4:	03bf03bf 	.word	0x03bf03bf
  4020b8:	03bf03bf 	.word	0x03bf03bf
  4020bc:	02db02c6 	.word	0x02db02c6
  4020c0:	03570357 	.word	0x03570357
  4020c4:	028b0357 	.word	0x028b0357
  4020c8:	03bf02db 	.word	0x03bf02db
  4020cc:	029003bf 	.word	0x029003bf
  4020d0:	029d03bf 	.word	0x029d03bf
  4020d4:	02b401cc 	.word	0x02b401cc
  4020d8:	03bf0208 	.word	0x03bf0208
  4020dc:	03bf01e1 	.word	0x03bf01e1
  4020e0:	03bf007e 	.word	0x03bf007e
  4020e4:	020d03bf 	.word	0x020d03bf
  4020e8:	980d      	ldr	r0, [sp, #52]	; 0x34
  4020ea:	930f      	str	r3, [sp, #60]	; 0x3c
  4020ec:	4240      	negs	r0, r0
  4020ee:	900d      	str	r0, [sp, #52]	; 0x34
  4020f0:	f04b 0b04 	orr.w	fp, fp, #4
  4020f4:	f89a 3000 	ldrb.w	r3, [sl]
  4020f8:	e794      	b.n	402024 <_svfprintf_r+0xb0>
  4020fa:	aa25      	add	r2, sp, #148	; 0x94
  4020fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4020fe:	980c      	ldr	r0, [sp, #48]	; 0x30
  402100:	f003 f88c 	bl	40521c <__ssprint_r>
  402104:	b940      	cbnz	r0, 402118 <_svfprintf_r+0x1a4>
  402106:	46c8      	mov	r8, r9
  402108:	e779      	b.n	401ffe <_svfprintf_r+0x8a>
  40210a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  40210c:	b123      	cbz	r3, 402118 <_svfprintf_r+0x1a4>
  40210e:	980c      	ldr	r0, [sp, #48]	; 0x30
  402110:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402112:	aa25      	add	r2, sp, #148	; 0x94
  402114:	f003 f882 	bl	40521c <__ssprint_r>
  402118:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40211a:	899b      	ldrh	r3, [r3, #12]
  40211c:	f013 0f40 	tst.w	r3, #64	; 0x40
  402120:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402122:	bf18      	it	ne
  402124:	f04f 33ff 	movne.w	r3, #4294967295
  402128:	9309      	str	r3, [sp, #36]	; 0x24
  40212a:	9809      	ldr	r0, [sp, #36]	; 0x24
  40212c:	b043      	add	sp, #268	; 0x10c
  40212e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402132:	f01b 0f20 	tst.w	fp, #32
  402136:	9311      	str	r3, [sp, #68]	; 0x44
  402138:	f040 81dd 	bne.w	4024f6 <_svfprintf_r+0x582>
  40213c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  40213e:	f01b 0f10 	tst.w	fp, #16
  402142:	4613      	mov	r3, r2
  402144:	f040 856e 	bne.w	402c24 <_svfprintf_r+0xcb0>
  402148:	f01b 0f40 	tst.w	fp, #64	; 0x40
  40214c:	f000 856a 	beq.w	402c24 <_svfprintf_r+0xcb0>
  402150:	8814      	ldrh	r4, [r2, #0]
  402152:	3204      	adds	r2, #4
  402154:	2500      	movs	r5, #0
  402156:	2301      	movs	r3, #1
  402158:	920f      	str	r2, [sp, #60]	; 0x3c
  40215a:	2700      	movs	r7, #0
  40215c:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  402160:	990a      	ldr	r1, [sp, #40]	; 0x28
  402162:	1c4a      	adds	r2, r1, #1
  402164:	f000 8265 	beq.w	402632 <_svfprintf_r+0x6be>
  402168:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  40216c:	9207      	str	r2, [sp, #28]
  40216e:	ea54 0205 	orrs.w	r2, r4, r5
  402172:	f040 8264 	bne.w	40263e <_svfprintf_r+0x6ca>
  402176:	2900      	cmp	r1, #0
  402178:	f040 843c 	bne.w	4029f4 <_svfprintf_r+0xa80>
  40217c:	2b00      	cmp	r3, #0
  40217e:	f040 84d7 	bne.w	402b30 <_svfprintf_r+0xbbc>
  402182:	f01b 0301 	ands.w	r3, fp, #1
  402186:	930e      	str	r3, [sp, #56]	; 0x38
  402188:	f000 8604 	beq.w	402d94 <_svfprintf_r+0xe20>
  40218c:	ae42      	add	r6, sp, #264	; 0x108
  40218e:	2330      	movs	r3, #48	; 0x30
  402190:	f806 3d41 	strb.w	r3, [r6, #-65]!
  402194:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402196:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  402198:	4293      	cmp	r3, r2
  40219a:	bfb8      	it	lt
  40219c:	4613      	movlt	r3, r2
  40219e:	9308      	str	r3, [sp, #32]
  4021a0:	2300      	movs	r3, #0
  4021a2:	9312      	str	r3, [sp, #72]	; 0x48
  4021a4:	b117      	cbz	r7, 4021ac <_svfprintf_r+0x238>
  4021a6:	9b08      	ldr	r3, [sp, #32]
  4021a8:	3301      	adds	r3, #1
  4021aa:	9308      	str	r3, [sp, #32]
  4021ac:	9b07      	ldr	r3, [sp, #28]
  4021ae:	f013 0302 	ands.w	r3, r3, #2
  4021b2:	9310      	str	r3, [sp, #64]	; 0x40
  4021b4:	d002      	beq.n	4021bc <_svfprintf_r+0x248>
  4021b6:	9b08      	ldr	r3, [sp, #32]
  4021b8:	3302      	adds	r3, #2
  4021ba:	9308      	str	r3, [sp, #32]
  4021bc:	9b07      	ldr	r3, [sp, #28]
  4021be:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  4021c2:	f040 830e 	bne.w	4027e2 <_svfprintf_r+0x86e>
  4021c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4021c8:	9a08      	ldr	r2, [sp, #32]
  4021ca:	eba3 0b02 	sub.w	fp, r3, r2
  4021ce:	f1bb 0f00 	cmp.w	fp, #0
  4021d2:	f340 8306 	ble.w	4027e2 <_svfprintf_r+0x86e>
  4021d6:	f1bb 0f10 	cmp.w	fp, #16
  4021da:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4021dc:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4021de:	dd29      	ble.n	402234 <_svfprintf_r+0x2c0>
  4021e0:	4643      	mov	r3, r8
  4021e2:	4621      	mov	r1, r4
  4021e4:	46a8      	mov	r8, r5
  4021e6:	2710      	movs	r7, #16
  4021e8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4021ea:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4021ec:	e006      	b.n	4021fc <_svfprintf_r+0x288>
  4021ee:	f1ab 0b10 	sub.w	fp, fp, #16
  4021f2:	f1bb 0f10 	cmp.w	fp, #16
  4021f6:	f103 0308 	add.w	r3, r3, #8
  4021fa:	dd18      	ble.n	40222e <_svfprintf_r+0x2ba>
  4021fc:	3201      	adds	r2, #1
  4021fe:	48b7      	ldr	r0, [pc, #732]	; (4024dc <_svfprintf_r+0x568>)
  402200:	9226      	str	r2, [sp, #152]	; 0x98
  402202:	3110      	adds	r1, #16
  402204:	2a07      	cmp	r2, #7
  402206:	9127      	str	r1, [sp, #156]	; 0x9c
  402208:	e883 0081 	stmia.w	r3, {r0, r7}
  40220c:	ddef      	ble.n	4021ee <_svfprintf_r+0x27a>
  40220e:	aa25      	add	r2, sp, #148	; 0x94
  402210:	4629      	mov	r1, r5
  402212:	4620      	mov	r0, r4
  402214:	f003 f802 	bl	40521c <__ssprint_r>
  402218:	2800      	cmp	r0, #0
  40221a:	f47f af7d 	bne.w	402118 <_svfprintf_r+0x1a4>
  40221e:	f1ab 0b10 	sub.w	fp, fp, #16
  402222:	f1bb 0f10 	cmp.w	fp, #16
  402226:	9927      	ldr	r1, [sp, #156]	; 0x9c
  402228:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40222a:	464b      	mov	r3, r9
  40222c:	dce6      	bgt.n	4021fc <_svfprintf_r+0x288>
  40222e:	4645      	mov	r5, r8
  402230:	460c      	mov	r4, r1
  402232:	4698      	mov	r8, r3
  402234:	3201      	adds	r2, #1
  402236:	4ba9      	ldr	r3, [pc, #676]	; (4024dc <_svfprintf_r+0x568>)
  402238:	9226      	str	r2, [sp, #152]	; 0x98
  40223a:	445c      	add	r4, fp
  40223c:	2a07      	cmp	r2, #7
  40223e:	9427      	str	r4, [sp, #156]	; 0x9c
  402240:	e888 0808 	stmia.w	r8, {r3, fp}
  402244:	f300 8498 	bgt.w	402b78 <_svfprintf_r+0xc04>
  402248:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40224c:	f108 0808 	add.w	r8, r8, #8
  402250:	b177      	cbz	r7, 402270 <_svfprintf_r+0x2fc>
  402252:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402254:	3301      	adds	r3, #1
  402256:	3401      	adds	r4, #1
  402258:	f10d 0177 	add.w	r1, sp, #119	; 0x77
  40225c:	2201      	movs	r2, #1
  40225e:	2b07      	cmp	r3, #7
  402260:	9427      	str	r4, [sp, #156]	; 0x9c
  402262:	9326      	str	r3, [sp, #152]	; 0x98
  402264:	e888 0006 	stmia.w	r8, {r1, r2}
  402268:	f300 83db 	bgt.w	402a22 <_svfprintf_r+0xaae>
  40226c:	f108 0808 	add.w	r8, r8, #8
  402270:	9b10      	ldr	r3, [sp, #64]	; 0x40
  402272:	b16b      	cbz	r3, 402290 <_svfprintf_r+0x31c>
  402274:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402276:	3301      	adds	r3, #1
  402278:	3402      	adds	r4, #2
  40227a:	a91e      	add	r1, sp, #120	; 0x78
  40227c:	2202      	movs	r2, #2
  40227e:	2b07      	cmp	r3, #7
  402280:	9427      	str	r4, [sp, #156]	; 0x9c
  402282:	9326      	str	r3, [sp, #152]	; 0x98
  402284:	e888 0006 	stmia.w	r8, {r1, r2}
  402288:	f300 83d6 	bgt.w	402a38 <_svfprintf_r+0xac4>
  40228c:	f108 0808 	add.w	r8, r8, #8
  402290:	2d80      	cmp	r5, #128	; 0x80
  402292:	f000 8315 	beq.w	4028c0 <_svfprintf_r+0x94c>
  402296:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402298:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40229a:	1a9f      	subs	r7, r3, r2
  40229c:	2f00      	cmp	r7, #0
  40229e:	dd36      	ble.n	40230e <_svfprintf_r+0x39a>
  4022a0:	2f10      	cmp	r7, #16
  4022a2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4022a4:	4d8e      	ldr	r5, [pc, #568]	; (4024e0 <_svfprintf_r+0x56c>)
  4022a6:	dd27      	ble.n	4022f8 <_svfprintf_r+0x384>
  4022a8:	4642      	mov	r2, r8
  4022aa:	4621      	mov	r1, r4
  4022ac:	46b0      	mov	r8, r6
  4022ae:	f04f 0b10 	mov.w	fp, #16
  4022b2:	462e      	mov	r6, r5
  4022b4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4022b6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4022b8:	e004      	b.n	4022c4 <_svfprintf_r+0x350>
  4022ba:	3f10      	subs	r7, #16
  4022bc:	2f10      	cmp	r7, #16
  4022be:	f102 0208 	add.w	r2, r2, #8
  4022c2:	dd15      	ble.n	4022f0 <_svfprintf_r+0x37c>
  4022c4:	3301      	adds	r3, #1
  4022c6:	3110      	adds	r1, #16
  4022c8:	2b07      	cmp	r3, #7
  4022ca:	9127      	str	r1, [sp, #156]	; 0x9c
  4022cc:	9326      	str	r3, [sp, #152]	; 0x98
  4022ce:	e882 0840 	stmia.w	r2, {r6, fp}
  4022d2:	ddf2      	ble.n	4022ba <_svfprintf_r+0x346>
  4022d4:	aa25      	add	r2, sp, #148	; 0x94
  4022d6:	4629      	mov	r1, r5
  4022d8:	4620      	mov	r0, r4
  4022da:	f002 ff9f 	bl	40521c <__ssprint_r>
  4022de:	2800      	cmp	r0, #0
  4022e0:	f47f af1a 	bne.w	402118 <_svfprintf_r+0x1a4>
  4022e4:	3f10      	subs	r7, #16
  4022e6:	2f10      	cmp	r7, #16
  4022e8:	9927      	ldr	r1, [sp, #156]	; 0x9c
  4022ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4022ec:	464a      	mov	r2, r9
  4022ee:	dce9      	bgt.n	4022c4 <_svfprintf_r+0x350>
  4022f0:	4635      	mov	r5, r6
  4022f2:	460c      	mov	r4, r1
  4022f4:	4646      	mov	r6, r8
  4022f6:	4690      	mov	r8, r2
  4022f8:	3301      	adds	r3, #1
  4022fa:	443c      	add	r4, r7
  4022fc:	2b07      	cmp	r3, #7
  4022fe:	9427      	str	r4, [sp, #156]	; 0x9c
  402300:	9326      	str	r3, [sp, #152]	; 0x98
  402302:	e888 00a0 	stmia.w	r8, {r5, r7}
  402306:	f300 8381 	bgt.w	402a0c <_svfprintf_r+0xa98>
  40230a:	f108 0808 	add.w	r8, r8, #8
  40230e:	9b07      	ldr	r3, [sp, #28]
  402310:	05df      	lsls	r7, r3, #23
  402312:	f100 8268 	bmi.w	4027e6 <_svfprintf_r+0x872>
  402316:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402318:	990e      	ldr	r1, [sp, #56]	; 0x38
  40231a:	f8c8 6000 	str.w	r6, [r8]
  40231e:	3301      	adds	r3, #1
  402320:	440c      	add	r4, r1
  402322:	2b07      	cmp	r3, #7
  402324:	9427      	str	r4, [sp, #156]	; 0x9c
  402326:	f8c8 1004 	str.w	r1, [r8, #4]
  40232a:	9326      	str	r3, [sp, #152]	; 0x98
  40232c:	f300 834d 	bgt.w	4029ca <_svfprintf_r+0xa56>
  402330:	f108 0808 	add.w	r8, r8, #8
  402334:	9b07      	ldr	r3, [sp, #28]
  402336:	075b      	lsls	r3, r3, #29
  402338:	d53a      	bpl.n	4023b0 <_svfprintf_r+0x43c>
  40233a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40233c:	9a08      	ldr	r2, [sp, #32]
  40233e:	1a9d      	subs	r5, r3, r2
  402340:	2d00      	cmp	r5, #0
  402342:	dd35      	ble.n	4023b0 <_svfprintf_r+0x43c>
  402344:	2d10      	cmp	r5, #16
  402346:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402348:	dd20      	ble.n	40238c <_svfprintf_r+0x418>
  40234a:	2610      	movs	r6, #16
  40234c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40234e:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
  402352:	e004      	b.n	40235e <_svfprintf_r+0x3ea>
  402354:	3d10      	subs	r5, #16
  402356:	2d10      	cmp	r5, #16
  402358:	f108 0808 	add.w	r8, r8, #8
  40235c:	dd16      	ble.n	40238c <_svfprintf_r+0x418>
  40235e:	3301      	adds	r3, #1
  402360:	4a5e      	ldr	r2, [pc, #376]	; (4024dc <_svfprintf_r+0x568>)
  402362:	9326      	str	r3, [sp, #152]	; 0x98
  402364:	3410      	adds	r4, #16
  402366:	2b07      	cmp	r3, #7
  402368:	9427      	str	r4, [sp, #156]	; 0x9c
  40236a:	e888 0044 	stmia.w	r8, {r2, r6}
  40236e:	ddf1      	ble.n	402354 <_svfprintf_r+0x3e0>
  402370:	aa25      	add	r2, sp, #148	; 0x94
  402372:	4659      	mov	r1, fp
  402374:	4638      	mov	r0, r7
  402376:	f002 ff51 	bl	40521c <__ssprint_r>
  40237a:	2800      	cmp	r0, #0
  40237c:	f47f aecc 	bne.w	402118 <_svfprintf_r+0x1a4>
  402380:	3d10      	subs	r5, #16
  402382:	2d10      	cmp	r5, #16
  402384:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  402386:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402388:	46c8      	mov	r8, r9
  40238a:	dce8      	bgt.n	40235e <_svfprintf_r+0x3ea>
  40238c:	3301      	adds	r3, #1
  40238e:	4a53      	ldr	r2, [pc, #332]	; (4024dc <_svfprintf_r+0x568>)
  402390:	9326      	str	r3, [sp, #152]	; 0x98
  402392:	442c      	add	r4, r5
  402394:	2b07      	cmp	r3, #7
  402396:	9427      	str	r4, [sp, #156]	; 0x9c
  402398:	e888 0024 	stmia.w	r8, {r2, r5}
  40239c:	dd08      	ble.n	4023b0 <_svfprintf_r+0x43c>
  40239e:	aa25      	add	r2, sp, #148	; 0x94
  4023a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4023a2:	980c      	ldr	r0, [sp, #48]	; 0x30
  4023a4:	f002 ff3a 	bl	40521c <__ssprint_r>
  4023a8:	2800      	cmp	r0, #0
  4023aa:	f47f aeb5 	bne.w	402118 <_svfprintf_r+0x1a4>
  4023ae:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4023b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4023b2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4023b4:	9908      	ldr	r1, [sp, #32]
  4023b6:	428a      	cmp	r2, r1
  4023b8:	bfac      	ite	ge
  4023ba:	189b      	addge	r3, r3, r2
  4023bc:	185b      	addlt	r3, r3, r1
  4023be:	9309      	str	r3, [sp, #36]	; 0x24
  4023c0:	2c00      	cmp	r4, #0
  4023c2:	f040 830d 	bne.w	4029e0 <_svfprintf_r+0xa6c>
  4023c6:	2300      	movs	r3, #0
  4023c8:	9326      	str	r3, [sp, #152]	; 0x98
  4023ca:	46c8      	mov	r8, r9
  4023cc:	e5f9      	b.n	401fc2 <_svfprintf_r+0x4e>
  4023ce:	9311      	str	r3, [sp, #68]	; 0x44
  4023d0:	f01b 0320 	ands.w	r3, fp, #32
  4023d4:	f040 81e3 	bne.w	40279e <_svfprintf_r+0x82a>
  4023d8:	f01b 0210 	ands.w	r2, fp, #16
  4023dc:	f040 842e 	bne.w	402c3c <_svfprintf_r+0xcc8>
  4023e0:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  4023e4:	f000 842a 	beq.w	402c3c <_svfprintf_r+0xcc8>
  4023e8:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4023ea:	4613      	mov	r3, r2
  4023ec:	460a      	mov	r2, r1
  4023ee:	3204      	adds	r2, #4
  4023f0:	880c      	ldrh	r4, [r1, #0]
  4023f2:	920f      	str	r2, [sp, #60]	; 0x3c
  4023f4:	2500      	movs	r5, #0
  4023f6:	e6b0      	b.n	40215a <_svfprintf_r+0x1e6>
  4023f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4023fa:	9311      	str	r3, [sp, #68]	; 0x44
  4023fc:	6816      	ldr	r6, [r2, #0]
  4023fe:	2400      	movs	r4, #0
  402400:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
  402404:	1d15      	adds	r5, r2, #4
  402406:	2e00      	cmp	r6, #0
  402408:	f000 86a7 	beq.w	40315a <_svfprintf_r+0x11e6>
  40240c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  40240e:	1c53      	adds	r3, r2, #1
  402410:	f000 8609 	beq.w	403026 <_svfprintf_r+0x10b2>
  402414:	4621      	mov	r1, r4
  402416:	4630      	mov	r0, r6
  402418:	f002 fa8a 	bl	404930 <memchr>
  40241c:	2800      	cmp	r0, #0
  40241e:	f000 86e1 	beq.w	4031e4 <_svfprintf_r+0x1270>
  402422:	1b83      	subs	r3, r0, r6
  402424:	930e      	str	r3, [sp, #56]	; 0x38
  402426:	940a      	str	r4, [sp, #40]	; 0x28
  402428:	950f      	str	r5, [sp, #60]	; 0x3c
  40242a:	f8cd b01c 	str.w	fp, [sp, #28]
  40242e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  402432:	9308      	str	r3, [sp, #32]
  402434:	9412      	str	r4, [sp, #72]	; 0x48
  402436:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40243a:	e6b3      	b.n	4021a4 <_svfprintf_r+0x230>
  40243c:	f89a 3000 	ldrb.w	r3, [sl]
  402440:	2201      	movs	r2, #1
  402442:	212b      	movs	r1, #43	; 0x2b
  402444:	e5ee      	b.n	402024 <_svfprintf_r+0xb0>
  402446:	f04b 0b20 	orr.w	fp, fp, #32
  40244a:	f89a 3000 	ldrb.w	r3, [sl]
  40244e:	e5e9      	b.n	402024 <_svfprintf_r+0xb0>
  402450:	9311      	str	r3, [sp, #68]	; 0x44
  402452:	2a00      	cmp	r2, #0
  402454:	f040 8795 	bne.w	403382 <_svfprintf_r+0x140e>
  402458:	4b22      	ldr	r3, [pc, #136]	; (4024e4 <_svfprintf_r+0x570>)
  40245a:	9318      	str	r3, [sp, #96]	; 0x60
  40245c:	f01b 0f20 	tst.w	fp, #32
  402460:	f040 8111 	bne.w	402686 <_svfprintf_r+0x712>
  402464:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402466:	f01b 0f10 	tst.w	fp, #16
  40246a:	4613      	mov	r3, r2
  40246c:	f040 83e1 	bne.w	402c32 <_svfprintf_r+0xcbe>
  402470:	f01b 0f40 	tst.w	fp, #64	; 0x40
  402474:	f000 83dd 	beq.w	402c32 <_svfprintf_r+0xcbe>
  402478:	3304      	adds	r3, #4
  40247a:	8814      	ldrh	r4, [r2, #0]
  40247c:	930f      	str	r3, [sp, #60]	; 0x3c
  40247e:	2500      	movs	r5, #0
  402480:	f01b 0f01 	tst.w	fp, #1
  402484:	f000 810c 	beq.w	4026a0 <_svfprintf_r+0x72c>
  402488:	ea54 0305 	orrs.w	r3, r4, r5
  40248c:	f000 8108 	beq.w	4026a0 <_svfprintf_r+0x72c>
  402490:	2330      	movs	r3, #48	; 0x30
  402492:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  402496:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  40249a:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  40249e:	f04b 0b02 	orr.w	fp, fp, #2
  4024a2:	2302      	movs	r3, #2
  4024a4:	e659      	b.n	40215a <_svfprintf_r+0x1e6>
  4024a6:	f89a 3000 	ldrb.w	r3, [sl]
  4024aa:	2900      	cmp	r1, #0
  4024ac:	f47f adba 	bne.w	402024 <_svfprintf_r+0xb0>
  4024b0:	2201      	movs	r2, #1
  4024b2:	2120      	movs	r1, #32
  4024b4:	e5b6      	b.n	402024 <_svfprintf_r+0xb0>
  4024b6:	f04b 0b01 	orr.w	fp, fp, #1
  4024ba:	f89a 3000 	ldrb.w	r3, [sl]
  4024be:	e5b1      	b.n	402024 <_svfprintf_r+0xb0>
  4024c0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  4024c2:	6823      	ldr	r3, [r4, #0]
  4024c4:	930d      	str	r3, [sp, #52]	; 0x34
  4024c6:	4618      	mov	r0, r3
  4024c8:	2800      	cmp	r0, #0
  4024ca:	4623      	mov	r3, r4
  4024cc:	f103 0304 	add.w	r3, r3, #4
  4024d0:	f6ff ae0a 	blt.w	4020e8 <_svfprintf_r+0x174>
  4024d4:	930f      	str	r3, [sp, #60]	; 0x3c
  4024d6:	f89a 3000 	ldrb.w	r3, [sl]
  4024da:	e5a3      	b.n	402024 <_svfprintf_r+0xb0>
  4024dc:	004071f0 	.word	0x004071f0
  4024e0:	00407200 	.word	0x00407200
  4024e4:	004071d0 	.word	0x004071d0
  4024e8:	f04b 0b10 	orr.w	fp, fp, #16
  4024ec:	f01b 0f20 	tst.w	fp, #32
  4024f0:	9311      	str	r3, [sp, #68]	; 0x44
  4024f2:	f43f ae23 	beq.w	40213c <_svfprintf_r+0x1c8>
  4024f6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4024f8:	3507      	adds	r5, #7
  4024fa:	f025 0307 	bic.w	r3, r5, #7
  4024fe:	f103 0208 	add.w	r2, r3, #8
  402502:	e9d3 4500 	ldrd	r4, r5, [r3]
  402506:	920f      	str	r2, [sp, #60]	; 0x3c
  402508:	2301      	movs	r3, #1
  40250a:	e626      	b.n	40215a <_svfprintf_r+0x1e6>
  40250c:	f89a 3000 	ldrb.w	r3, [sl]
  402510:	2b2a      	cmp	r3, #42	; 0x2a
  402512:	f10a 0401 	add.w	r4, sl, #1
  402516:	f000 8727 	beq.w	403368 <_svfprintf_r+0x13f4>
  40251a:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  40251e:	2809      	cmp	r0, #9
  402520:	46a2      	mov	sl, r4
  402522:	f200 86ad 	bhi.w	403280 <_svfprintf_r+0x130c>
  402526:	2300      	movs	r3, #0
  402528:	461c      	mov	r4, r3
  40252a:	f81a 3b01 	ldrb.w	r3, [sl], #1
  40252e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  402532:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  402536:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  40253a:	2809      	cmp	r0, #9
  40253c:	d9f5      	bls.n	40252a <_svfprintf_r+0x5b6>
  40253e:	940a      	str	r4, [sp, #40]	; 0x28
  402540:	e572      	b.n	402028 <_svfprintf_r+0xb4>
  402542:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  402546:	f89a 3000 	ldrb.w	r3, [sl]
  40254a:	e56b      	b.n	402024 <_svfprintf_r+0xb0>
  40254c:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  402550:	f89a 3000 	ldrb.w	r3, [sl]
  402554:	e566      	b.n	402024 <_svfprintf_r+0xb0>
  402556:	f89a 3000 	ldrb.w	r3, [sl]
  40255a:	2b6c      	cmp	r3, #108	; 0x6c
  40255c:	bf03      	ittte	eq
  40255e:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
  402562:	f04b 0b20 	orreq.w	fp, fp, #32
  402566:	f10a 0a01 	addeq.w	sl, sl, #1
  40256a:	f04b 0b10 	orrne.w	fp, fp, #16
  40256e:	e559      	b.n	402024 <_svfprintf_r+0xb0>
  402570:	2a00      	cmp	r2, #0
  402572:	f040 8711 	bne.w	403398 <_svfprintf_r+0x1424>
  402576:	f01b 0f20 	tst.w	fp, #32
  40257a:	f040 84f9 	bne.w	402f70 <_svfprintf_r+0xffc>
  40257e:	f01b 0f10 	tst.w	fp, #16
  402582:	f040 84ac 	bne.w	402ede <_svfprintf_r+0xf6a>
  402586:	f01b 0f40 	tst.w	fp, #64	; 0x40
  40258a:	f000 84a8 	beq.w	402ede <_svfprintf_r+0xf6a>
  40258e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402590:	6813      	ldr	r3, [r2, #0]
  402592:	3204      	adds	r2, #4
  402594:	920f      	str	r2, [sp, #60]	; 0x3c
  402596:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
  40259a:	801a      	strh	r2, [r3, #0]
  40259c:	e511      	b.n	401fc2 <_svfprintf_r+0x4e>
  40259e:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4025a0:	4bb3      	ldr	r3, [pc, #716]	; (402870 <_svfprintf_r+0x8fc>)
  4025a2:	680c      	ldr	r4, [r1, #0]
  4025a4:	9318      	str	r3, [sp, #96]	; 0x60
  4025a6:	2230      	movs	r2, #48	; 0x30
  4025a8:	2378      	movs	r3, #120	; 0x78
  4025aa:	3104      	adds	r1, #4
  4025ac:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
  4025b0:	9311      	str	r3, [sp, #68]	; 0x44
  4025b2:	f04b 0b02 	orr.w	fp, fp, #2
  4025b6:	910f      	str	r1, [sp, #60]	; 0x3c
  4025b8:	2500      	movs	r5, #0
  4025ba:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
  4025be:	2302      	movs	r3, #2
  4025c0:	e5cb      	b.n	40215a <_svfprintf_r+0x1e6>
  4025c2:	990f      	ldr	r1, [sp, #60]	; 0x3c
  4025c4:	9311      	str	r3, [sp, #68]	; 0x44
  4025c6:	680a      	ldr	r2, [r1, #0]
  4025c8:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  4025cc:	2300      	movs	r3, #0
  4025ce:	460a      	mov	r2, r1
  4025d0:	461f      	mov	r7, r3
  4025d2:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  4025d6:	3204      	adds	r2, #4
  4025d8:	2301      	movs	r3, #1
  4025da:	9308      	str	r3, [sp, #32]
  4025dc:	f8cd b01c 	str.w	fp, [sp, #28]
  4025e0:	970a      	str	r7, [sp, #40]	; 0x28
  4025e2:	9712      	str	r7, [sp, #72]	; 0x48
  4025e4:	920f      	str	r2, [sp, #60]	; 0x3c
  4025e6:	930e      	str	r3, [sp, #56]	; 0x38
  4025e8:	ae28      	add	r6, sp, #160	; 0xa0
  4025ea:	e5df      	b.n	4021ac <_svfprintf_r+0x238>
  4025ec:	9311      	str	r3, [sp, #68]	; 0x44
  4025ee:	2a00      	cmp	r2, #0
  4025f0:	f040 86ea 	bne.w	4033c8 <_svfprintf_r+0x1454>
  4025f4:	f01b 0f20 	tst.w	fp, #32
  4025f8:	d15d      	bne.n	4026b6 <_svfprintf_r+0x742>
  4025fa:	f01b 0f10 	tst.w	fp, #16
  4025fe:	f040 8308 	bne.w	402c12 <_svfprintf_r+0xc9e>
  402602:	f01b 0f40 	tst.w	fp, #64	; 0x40
  402606:	f000 8304 	beq.w	402c12 <_svfprintf_r+0xc9e>
  40260a:	990f      	ldr	r1, [sp, #60]	; 0x3c
  40260c:	f9b1 4000 	ldrsh.w	r4, [r1]
  402610:	3104      	adds	r1, #4
  402612:	17e5      	asrs	r5, r4, #31
  402614:	4622      	mov	r2, r4
  402616:	462b      	mov	r3, r5
  402618:	910f      	str	r1, [sp, #60]	; 0x3c
  40261a:	2a00      	cmp	r2, #0
  40261c:	f173 0300 	sbcs.w	r3, r3, #0
  402620:	db58      	blt.n	4026d4 <_svfprintf_r+0x760>
  402622:	990a      	ldr	r1, [sp, #40]	; 0x28
  402624:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  402628:	1c4a      	adds	r2, r1, #1
  40262a:	f04f 0301 	mov.w	r3, #1
  40262e:	f47f ad9b 	bne.w	402168 <_svfprintf_r+0x1f4>
  402632:	ea54 0205 	orrs.w	r2, r4, r5
  402636:	f000 81df 	beq.w	4029f8 <_svfprintf_r+0xa84>
  40263a:	f8cd b01c 	str.w	fp, [sp, #28]
  40263e:	2b01      	cmp	r3, #1
  402640:	f000 827b 	beq.w	402b3a <_svfprintf_r+0xbc6>
  402644:	2b02      	cmp	r3, #2
  402646:	f040 8206 	bne.w	402a56 <_svfprintf_r+0xae2>
  40264a:	9818      	ldr	r0, [sp, #96]	; 0x60
  40264c:	464e      	mov	r6, r9
  40264e:	0923      	lsrs	r3, r4, #4
  402650:	f004 010f 	and.w	r1, r4, #15
  402654:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  402658:	092a      	lsrs	r2, r5, #4
  40265a:	461c      	mov	r4, r3
  40265c:	4615      	mov	r5, r2
  40265e:	5c43      	ldrb	r3, [r0, r1]
  402660:	f806 3d01 	strb.w	r3, [r6, #-1]!
  402664:	ea54 0305 	orrs.w	r3, r4, r5
  402668:	d1f1      	bne.n	40264e <_svfprintf_r+0x6da>
  40266a:	eba9 0306 	sub.w	r3, r9, r6
  40266e:	930e      	str	r3, [sp, #56]	; 0x38
  402670:	e590      	b.n	402194 <_svfprintf_r+0x220>
  402672:	9311      	str	r3, [sp, #68]	; 0x44
  402674:	2a00      	cmp	r2, #0
  402676:	f040 86a3 	bne.w	4033c0 <_svfprintf_r+0x144c>
  40267a:	4b7e      	ldr	r3, [pc, #504]	; (402874 <_svfprintf_r+0x900>)
  40267c:	9318      	str	r3, [sp, #96]	; 0x60
  40267e:	f01b 0f20 	tst.w	fp, #32
  402682:	f43f aeef 	beq.w	402464 <_svfprintf_r+0x4f0>
  402686:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  402688:	3507      	adds	r5, #7
  40268a:	f025 0307 	bic.w	r3, r5, #7
  40268e:	f103 0208 	add.w	r2, r3, #8
  402692:	f01b 0f01 	tst.w	fp, #1
  402696:	920f      	str	r2, [sp, #60]	; 0x3c
  402698:	e9d3 4500 	ldrd	r4, r5, [r3]
  40269c:	f47f aef4 	bne.w	402488 <_svfprintf_r+0x514>
  4026a0:	2302      	movs	r3, #2
  4026a2:	e55a      	b.n	40215a <_svfprintf_r+0x1e6>
  4026a4:	9311      	str	r3, [sp, #68]	; 0x44
  4026a6:	2a00      	cmp	r2, #0
  4026a8:	f040 8686 	bne.w	4033b8 <_svfprintf_r+0x1444>
  4026ac:	f04b 0b10 	orr.w	fp, fp, #16
  4026b0:	f01b 0f20 	tst.w	fp, #32
  4026b4:	d0a1      	beq.n	4025fa <_svfprintf_r+0x686>
  4026b6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4026b8:	3507      	adds	r5, #7
  4026ba:	f025 0507 	bic.w	r5, r5, #7
  4026be:	e9d5 2300 	ldrd	r2, r3, [r5]
  4026c2:	2a00      	cmp	r2, #0
  4026c4:	f105 0108 	add.w	r1, r5, #8
  4026c8:	461d      	mov	r5, r3
  4026ca:	f173 0300 	sbcs.w	r3, r3, #0
  4026ce:	910f      	str	r1, [sp, #60]	; 0x3c
  4026d0:	4614      	mov	r4, r2
  4026d2:	daa6      	bge.n	402622 <_svfprintf_r+0x6ae>
  4026d4:	272d      	movs	r7, #45	; 0x2d
  4026d6:	4264      	negs	r4, r4
  4026d8:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  4026dc:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  4026e0:	2301      	movs	r3, #1
  4026e2:	e53d      	b.n	402160 <_svfprintf_r+0x1ec>
  4026e4:	9311      	str	r3, [sp, #68]	; 0x44
  4026e6:	2a00      	cmp	r2, #0
  4026e8:	f040 8662 	bne.w	4033b0 <_svfprintf_r+0x143c>
  4026ec:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4026ee:	3507      	adds	r5, #7
  4026f0:	f025 0307 	bic.w	r3, r5, #7
  4026f4:	f103 0208 	add.w	r2, r3, #8
  4026f8:	920f      	str	r2, [sp, #60]	; 0x3c
  4026fa:	681a      	ldr	r2, [r3, #0]
  4026fc:	9215      	str	r2, [sp, #84]	; 0x54
  4026fe:	685b      	ldr	r3, [r3, #4]
  402700:	9314      	str	r3, [sp, #80]	; 0x50
  402702:	9b14      	ldr	r3, [sp, #80]	; 0x50
  402704:	9d15      	ldr	r5, [sp, #84]	; 0x54
  402706:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  40270a:	4628      	mov	r0, r5
  40270c:	4621      	mov	r1, r4
  40270e:	f04f 32ff 	mov.w	r2, #4294967295
  402712:	4b59      	ldr	r3, [pc, #356]	; (402878 <_svfprintf_r+0x904>)
  402714:	f003 fe48 	bl	4063a8 <__aeabi_dcmpun>
  402718:	2800      	cmp	r0, #0
  40271a:	f040 834a 	bne.w	402db2 <_svfprintf_r+0xe3e>
  40271e:	4628      	mov	r0, r5
  402720:	4621      	mov	r1, r4
  402722:	f04f 32ff 	mov.w	r2, #4294967295
  402726:	4b54      	ldr	r3, [pc, #336]	; (402878 <_svfprintf_r+0x904>)
  402728:	f003 fe20 	bl	40636c <__aeabi_dcmple>
  40272c:	2800      	cmp	r0, #0
  40272e:	f040 8340 	bne.w	402db2 <_svfprintf_r+0xe3e>
  402732:	a815      	add	r0, sp, #84	; 0x54
  402734:	c80d      	ldmia	r0, {r0, r2, r3}
  402736:	9914      	ldr	r1, [sp, #80]	; 0x50
  402738:	f003 fe0e 	bl	406358 <__aeabi_dcmplt>
  40273c:	2800      	cmp	r0, #0
  40273e:	f040 8530 	bne.w	4031a2 <_svfprintf_r+0x122e>
  402742:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  402746:	4e4d      	ldr	r6, [pc, #308]	; (40287c <_svfprintf_r+0x908>)
  402748:	4b4d      	ldr	r3, [pc, #308]	; (402880 <_svfprintf_r+0x90c>)
  40274a:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  40274e:	9007      	str	r0, [sp, #28]
  402750:	9811      	ldr	r0, [sp, #68]	; 0x44
  402752:	2203      	movs	r2, #3
  402754:	2100      	movs	r1, #0
  402756:	9208      	str	r2, [sp, #32]
  402758:	910a      	str	r1, [sp, #40]	; 0x28
  40275a:	2847      	cmp	r0, #71	; 0x47
  40275c:	bfd8      	it	le
  40275e:	461e      	movle	r6, r3
  402760:	920e      	str	r2, [sp, #56]	; 0x38
  402762:	9112      	str	r1, [sp, #72]	; 0x48
  402764:	e51e      	b.n	4021a4 <_svfprintf_r+0x230>
  402766:	f04b 0b08 	orr.w	fp, fp, #8
  40276a:	f89a 3000 	ldrb.w	r3, [sl]
  40276e:	e459      	b.n	402024 <_svfprintf_r+0xb0>
  402770:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  402774:	2300      	movs	r3, #0
  402776:	461c      	mov	r4, r3
  402778:	f81a 3b01 	ldrb.w	r3, [sl], #1
  40277c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  402780:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  402784:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  402788:	2809      	cmp	r0, #9
  40278a:	d9f5      	bls.n	402778 <_svfprintf_r+0x804>
  40278c:	940d      	str	r4, [sp, #52]	; 0x34
  40278e:	e44b      	b.n	402028 <_svfprintf_r+0xb4>
  402790:	f04b 0b10 	orr.w	fp, fp, #16
  402794:	9311      	str	r3, [sp, #68]	; 0x44
  402796:	f01b 0320 	ands.w	r3, fp, #32
  40279a:	f43f ae1d 	beq.w	4023d8 <_svfprintf_r+0x464>
  40279e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  4027a0:	3507      	adds	r5, #7
  4027a2:	f025 0307 	bic.w	r3, r5, #7
  4027a6:	f103 0208 	add.w	r2, r3, #8
  4027aa:	e9d3 4500 	ldrd	r4, r5, [r3]
  4027ae:	920f      	str	r2, [sp, #60]	; 0x3c
  4027b0:	2300      	movs	r3, #0
  4027b2:	e4d2      	b.n	40215a <_svfprintf_r+0x1e6>
  4027b4:	9311      	str	r3, [sp, #68]	; 0x44
  4027b6:	2a00      	cmp	r2, #0
  4027b8:	f040 85e7 	bne.w	40338a <_svfprintf_r+0x1416>
  4027bc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4027be:	2a00      	cmp	r2, #0
  4027c0:	f43f aca3 	beq.w	40210a <_svfprintf_r+0x196>
  4027c4:	2300      	movs	r3, #0
  4027c6:	2101      	movs	r1, #1
  4027c8:	461f      	mov	r7, r3
  4027ca:	9108      	str	r1, [sp, #32]
  4027cc:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  4027d0:	f8cd b01c 	str.w	fp, [sp, #28]
  4027d4:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  4027d8:	930a      	str	r3, [sp, #40]	; 0x28
  4027da:	9312      	str	r3, [sp, #72]	; 0x48
  4027dc:	910e      	str	r1, [sp, #56]	; 0x38
  4027de:	ae28      	add	r6, sp, #160	; 0xa0
  4027e0:	e4e4      	b.n	4021ac <_svfprintf_r+0x238>
  4027e2:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4027e4:	e534      	b.n	402250 <_svfprintf_r+0x2dc>
  4027e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4027e8:	2b65      	cmp	r3, #101	; 0x65
  4027ea:	f340 80a7 	ble.w	40293c <_svfprintf_r+0x9c8>
  4027ee:	a815      	add	r0, sp, #84	; 0x54
  4027f0:	c80d      	ldmia	r0, {r0, r2, r3}
  4027f2:	9914      	ldr	r1, [sp, #80]	; 0x50
  4027f4:	f003 fda6 	bl	406344 <__aeabi_dcmpeq>
  4027f8:	2800      	cmp	r0, #0
  4027fa:	f000 8150 	beq.w	402a9e <_svfprintf_r+0xb2a>
  4027fe:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402800:	4a20      	ldr	r2, [pc, #128]	; (402884 <_svfprintf_r+0x910>)
  402802:	f8c8 2000 	str.w	r2, [r8]
  402806:	3301      	adds	r3, #1
  402808:	3401      	adds	r4, #1
  40280a:	2201      	movs	r2, #1
  40280c:	2b07      	cmp	r3, #7
  40280e:	9427      	str	r4, [sp, #156]	; 0x9c
  402810:	9326      	str	r3, [sp, #152]	; 0x98
  402812:	f8c8 2004 	str.w	r2, [r8, #4]
  402816:	f300 836a 	bgt.w	402eee <_svfprintf_r+0xf7a>
  40281a:	f108 0808 	add.w	r8, r8, #8
  40281e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  402820:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  402822:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  402824:	4293      	cmp	r3, r2
  402826:	db03      	blt.n	402830 <_svfprintf_r+0x8bc>
  402828:	9b07      	ldr	r3, [sp, #28]
  40282a:	07dd      	lsls	r5, r3, #31
  40282c:	f57f ad82 	bpl.w	402334 <_svfprintf_r+0x3c0>
  402830:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402832:	9919      	ldr	r1, [sp, #100]	; 0x64
  402834:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  402836:	f8c8 2000 	str.w	r2, [r8]
  40283a:	3301      	adds	r3, #1
  40283c:	440c      	add	r4, r1
  40283e:	2b07      	cmp	r3, #7
  402840:	f8c8 1004 	str.w	r1, [r8, #4]
  402844:	9427      	str	r4, [sp, #156]	; 0x9c
  402846:	9326      	str	r3, [sp, #152]	; 0x98
  402848:	f300 839e 	bgt.w	402f88 <_svfprintf_r+0x1014>
  40284c:	f108 0808 	add.w	r8, r8, #8
  402850:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  402852:	1e5e      	subs	r6, r3, #1
  402854:	2e00      	cmp	r6, #0
  402856:	f77f ad6d 	ble.w	402334 <_svfprintf_r+0x3c0>
  40285a:	2e10      	cmp	r6, #16
  40285c:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40285e:	4d0a      	ldr	r5, [pc, #40]	; (402888 <_svfprintf_r+0x914>)
  402860:	f340 81f5 	ble.w	402c4e <_svfprintf_r+0xcda>
  402864:	4622      	mov	r2, r4
  402866:	2710      	movs	r7, #16
  402868:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  40286c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  40286e:	e013      	b.n	402898 <_svfprintf_r+0x924>
  402870:	004071d0 	.word	0x004071d0
  402874:	004071bc 	.word	0x004071bc
  402878:	7fefffff 	.word	0x7fefffff
  40287c:	004071b0 	.word	0x004071b0
  402880:	004071ac 	.word	0x004071ac
  402884:	004071ec 	.word	0x004071ec
  402888:	00407200 	.word	0x00407200
  40288c:	f108 0808 	add.w	r8, r8, #8
  402890:	3e10      	subs	r6, #16
  402892:	2e10      	cmp	r6, #16
  402894:	f340 81da 	ble.w	402c4c <_svfprintf_r+0xcd8>
  402898:	3301      	adds	r3, #1
  40289a:	3210      	adds	r2, #16
  40289c:	2b07      	cmp	r3, #7
  40289e:	9227      	str	r2, [sp, #156]	; 0x9c
  4028a0:	9326      	str	r3, [sp, #152]	; 0x98
  4028a2:	e888 00a0 	stmia.w	r8, {r5, r7}
  4028a6:	ddf1      	ble.n	40288c <_svfprintf_r+0x918>
  4028a8:	aa25      	add	r2, sp, #148	; 0x94
  4028aa:	4621      	mov	r1, r4
  4028ac:	4658      	mov	r0, fp
  4028ae:	f002 fcb5 	bl	40521c <__ssprint_r>
  4028b2:	2800      	cmp	r0, #0
  4028b4:	f47f ac30 	bne.w	402118 <_svfprintf_r+0x1a4>
  4028b8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4028ba:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4028bc:	46c8      	mov	r8, r9
  4028be:	e7e7      	b.n	402890 <_svfprintf_r+0x91c>
  4028c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4028c2:	9a08      	ldr	r2, [sp, #32]
  4028c4:	1a9f      	subs	r7, r3, r2
  4028c6:	2f00      	cmp	r7, #0
  4028c8:	f77f ace5 	ble.w	402296 <_svfprintf_r+0x322>
  4028cc:	2f10      	cmp	r7, #16
  4028ce:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4028d0:	4db6      	ldr	r5, [pc, #728]	; (402bac <_svfprintf_r+0xc38>)
  4028d2:	dd27      	ble.n	402924 <_svfprintf_r+0x9b0>
  4028d4:	4642      	mov	r2, r8
  4028d6:	4621      	mov	r1, r4
  4028d8:	46b0      	mov	r8, r6
  4028da:	f04f 0b10 	mov.w	fp, #16
  4028de:	462e      	mov	r6, r5
  4028e0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4028e2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4028e4:	e004      	b.n	4028f0 <_svfprintf_r+0x97c>
  4028e6:	3f10      	subs	r7, #16
  4028e8:	2f10      	cmp	r7, #16
  4028ea:	f102 0208 	add.w	r2, r2, #8
  4028ee:	dd15      	ble.n	40291c <_svfprintf_r+0x9a8>
  4028f0:	3301      	adds	r3, #1
  4028f2:	3110      	adds	r1, #16
  4028f4:	2b07      	cmp	r3, #7
  4028f6:	9127      	str	r1, [sp, #156]	; 0x9c
  4028f8:	9326      	str	r3, [sp, #152]	; 0x98
  4028fa:	e882 0840 	stmia.w	r2, {r6, fp}
  4028fe:	ddf2      	ble.n	4028e6 <_svfprintf_r+0x972>
  402900:	aa25      	add	r2, sp, #148	; 0x94
  402902:	4629      	mov	r1, r5
  402904:	4620      	mov	r0, r4
  402906:	f002 fc89 	bl	40521c <__ssprint_r>
  40290a:	2800      	cmp	r0, #0
  40290c:	f47f ac04 	bne.w	402118 <_svfprintf_r+0x1a4>
  402910:	3f10      	subs	r7, #16
  402912:	2f10      	cmp	r7, #16
  402914:	9927      	ldr	r1, [sp, #156]	; 0x9c
  402916:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402918:	464a      	mov	r2, r9
  40291a:	dce9      	bgt.n	4028f0 <_svfprintf_r+0x97c>
  40291c:	4635      	mov	r5, r6
  40291e:	460c      	mov	r4, r1
  402920:	4646      	mov	r6, r8
  402922:	4690      	mov	r8, r2
  402924:	3301      	adds	r3, #1
  402926:	443c      	add	r4, r7
  402928:	2b07      	cmp	r3, #7
  40292a:	9427      	str	r4, [sp, #156]	; 0x9c
  40292c:	9326      	str	r3, [sp, #152]	; 0x98
  40292e:	e888 00a0 	stmia.w	r8, {r5, r7}
  402932:	f300 8232 	bgt.w	402d9a <_svfprintf_r+0xe26>
  402936:	f108 0808 	add.w	r8, r8, #8
  40293a:	e4ac      	b.n	402296 <_svfprintf_r+0x322>
  40293c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40293e:	9f26      	ldr	r7, [sp, #152]	; 0x98
  402940:	2b01      	cmp	r3, #1
  402942:	f340 81fe 	ble.w	402d42 <_svfprintf_r+0xdce>
  402946:	3701      	adds	r7, #1
  402948:	3401      	adds	r4, #1
  40294a:	2301      	movs	r3, #1
  40294c:	2f07      	cmp	r7, #7
  40294e:	9427      	str	r4, [sp, #156]	; 0x9c
  402950:	9726      	str	r7, [sp, #152]	; 0x98
  402952:	f8c8 6000 	str.w	r6, [r8]
  402956:	f8c8 3004 	str.w	r3, [r8, #4]
  40295a:	f300 8203 	bgt.w	402d64 <_svfprintf_r+0xdf0>
  40295e:	f108 0808 	add.w	r8, r8, #8
  402962:	9a19      	ldr	r2, [sp, #100]	; 0x64
  402964:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  402966:	f8c8 3000 	str.w	r3, [r8]
  40296a:	3701      	adds	r7, #1
  40296c:	4414      	add	r4, r2
  40296e:	2f07      	cmp	r7, #7
  402970:	9427      	str	r4, [sp, #156]	; 0x9c
  402972:	9726      	str	r7, [sp, #152]	; 0x98
  402974:	f8c8 2004 	str.w	r2, [r8, #4]
  402978:	f300 8200 	bgt.w	402d7c <_svfprintf_r+0xe08>
  40297c:	f108 0808 	add.w	r8, r8, #8
  402980:	a815      	add	r0, sp, #84	; 0x54
  402982:	c80d      	ldmia	r0, {r0, r2, r3}
  402984:	9914      	ldr	r1, [sp, #80]	; 0x50
  402986:	f003 fcdd 	bl	406344 <__aeabi_dcmpeq>
  40298a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  40298c:	2800      	cmp	r0, #0
  40298e:	f040 8101 	bne.w	402b94 <_svfprintf_r+0xc20>
  402992:	3b01      	subs	r3, #1
  402994:	3701      	adds	r7, #1
  402996:	3601      	adds	r6, #1
  402998:	441c      	add	r4, r3
  40299a:	2f07      	cmp	r7, #7
  40299c:	9726      	str	r7, [sp, #152]	; 0x98
  40299e:	9427      	str	r4, [sp, #156]	; 0x9c
  4029a0:	f8c8 6000 	str.w	r6, [r8]
  4029a4:	f8c8 3004 	str.w	r3, [r8, #4]
  4029a8:	f300 8127 	bgt.w	402bfa <_svfprintf_r+0xc86>
  4029ac:	f108 0808 	add.w	r8, r8, #8
  4029b0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  4029b2:	f8c8 2004 	str.w	r2, [r8, #4]
  4029b6:	3701      	adds	r7, #1
  4029b8:	4414      	add	r4, r2
  4029ba:	ab21      	add	r3, sp, #132	; 0x84
  4029bc:	2f07      	cmp	r7, #7
  4029be:	9427      	str	r4, [sp, #156]	; 0x9c
  4029c0:	9726      	str	r7, [sp, #152]	; 0x98
  4029c2:	f8c8 3000 	str.w	r3, [r8]
  4029c6:	f77f acb3 	ble.w	402330 <_svfprintf_r+0x3bc>
  4029ca:	aa25      	add	r2, sp, #148	; 0x94
  4029cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4029ce:	980c      	ldr	r0, [sp, #48]	; 0x30
  4029d0:	f002 fc24 	bl	40521c <__ssprint_r>
  4029d4:	2800      	cmp	r0, #0
  4029d6:	f47f ab9f 	bne.w	402118 <_svfprintf_r+0x1a4>
  4029da:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4029dc:	46c8      	mov	r8, r9
  4029de:	e4a9      	b.n	402334 <_svfprintf_r+0x3c0>
  4029e0:	aa25      	add	r2, sp, #148	; 0x94
  4029e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4029e4:	980c      	ldr	r0, [sp, #48]	; 0x30
  4029e6:	f002 fc19 	bl	40521c <__ssprint_r>
  4029ea:	2800      	cmp	r0, #0
  4029ec:	f43f aceb 	beq.w	4023c6 <_svfprintf_r+0x452>
  4029f0:	f7ff bb92 	b.w	402118 <_svfprintf_r+0x1a4>
  4029f4:	f8dd b01c 	ldr.w	fp, [sp, #28]
  4029f8:	2b01      	cmp	r3, #1
  4029fa:	f000 8134 	beq.w	402c66 <_svfprintf_r+0xcf2>
  4029fe:	2b02      	cmp	r3, #2
  402a00:	d125      	bne.n	402a4e <_svfprintf_r+0xada>
  402a02:	f8cd b01c 	str.w	fp, [sp, #28]
  402a06:	2400      	movs	r4, #0
  402a08:	2500      	movs	r5, #0
  402a0a:	e61e      	b.n	40264a <_svfprintf_r+0x6d6>
  402a0c:	aa25      	add	r2, sp, #148	; 0x94
  402a0e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402a10:	980c      	ldr	r0, [sp, #48]	; 0x30
  402a12:	f002 fc03 	bl	40521c <__ssprint_r>
  402a16:	2800      	cmp	r0, #0
  402a18:	f47f ab7e 	bne.w	402118 <_svfprintf_r+0x1a4>
  402a1c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  402a1e:	46c8      	mov	r8, r9
  402a20:	e475      	b.n	40230e <_svfprintf_r+0x39a>
  402a22:	aa25      	add	r2, sp, #148	; 0x94
  402a24:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402a26:	980c      	ldr	r0, [sp, #48]	; 0x30
  402a28:	f002 fbf8 	bl	40521c <__ssprint_r>
  402a2c:	2800      	cmp	r0, #0
  402a2e:	f47f ab73 	bne.w	402118 <_svfprintf_r+0x1a4>
  402a32:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  402a34:	46c8      	mov	r8, r9
  402a36:	e41b      	b.n	402270 <_svfprintf_r+0x2fc>
  402a38:	aa25      	add	r2, sp, #148	; 0x94
  402a3a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402a3c:	980c      	ldr	r0, [sp, #48]	; 0x30
  402a3e:	f002 fbed 	bl	40521c <__ssprint_r>
  402a42:	2800      	cmp	r0, #0
  402a44:	f47f ab68 	bne.w	402118 <_svfprintf_r+0x1a4>
  402a48:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  402a4a:	46c8      	mov	r8, r9
  402a4c:	e420      	b.n	402290 <_svfprintf_r+0x31c>
  402a4e:	f8cd b01c 	str.w	fp, [sp, #28]
  402a52:	2400      	movs	r4, #0
  402a54:	2500      	movs	r5, #0
  402a56:	4649      	mov	r1, r9
  402a58:	e000      	b.n	402a5c <_svfprintf_r+0xae8>
  402a5a:	4631      	mov	r1, r6
  402a5c:	08e2      	lsrs	r2, r4, #3
  402a5e:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  402a62:	08e8      	lsrs	r0, r5, #3
  402a64:	f004 0307 	and.w	r3, r4, #7
  402a68:	4605      	mov	r5, r0
  402a6a:	4614      	mov	r4, r2
  402a6c:	3330      	adds	r3, #48	; 0x30
  402a6e:	ea54 0205 	orrs.w	r2, r4, r5
  402a72:	f801 3c01 	strb.w	r3, [r1, #-1]
  402a76:	f101 36ff 	add.w	r6, r1, #4294967295
  402a7a:	d1ee      	bne.n	402a5a <_svfprintf_r+0xae6>
  402a7c:	9a07      	ldr	r2, [sp, #28]
  402a7e:	07d2      	lsls	r2, r2, #31
  402a80:	f57f adf3 	bpl.w	40266a <_svfprintf_r+0x6f6>
  402a84:	2b30      	cmp	r3, #48	; 0x30
  402a86:	f43f adf0 	beq.w	40266a <_svfprintf_r+0x6f6>
  402a8a:	3902      	subs	r1, #2
  402a8c:	2330      	movs	r3, #48	; 0x30
  402a8e:	f806 3c01 	strb.w	r3, [r6, #-1]
  402a92:	eba9 0301 	sub.w	r3, r9, r1
  402a96:	930e      	str	r3, [sp, #56]	; 0x38
  402a98:	460e      	mov	r6, r1
  402a9a:	f7ff bb7b 	b.w	402194 <_svfprintf_r+0x220>
  402a9e:	991f      	ldr	r1, [sp, #124]	; 0x7c
  402aa0:	2900      	cmp	r1, #0
  402aa2:	f340 822e 	ble.w	402f02 <_svfprintf_r+0xf8e>
  402aa6:	9b12      	ldr	r3, [sp, #72]	; 0x48
  402aa8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  402aaa:	4293      	cmp	r3, r2
  402aac:	bfa8      	it	ge
  402aae:	4613      	movge	r3, r2
  402ab0:	2b00      	cmp	r3, #0
  402ab2:	461f      	mov	r7, r3
  402ab4:	dd0d      	ble.n	402ad2 <_svfprintf_r+0xb5e>
  402ab6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402ab8:	f8c8 6000 	str.w	r6, [r8]
  402abc:	3301      	adds	r3, #1
  402abe:	443c      	add	r4, r7
  402ac0:	2b07      	cmp	r3, #7
  402ac2:	9427      	str	r4, [sp, #156]	; 0x9c
  402ac4:	f8c8 7004 	str.w	r7, [r8, #4]
  402ac8:	9326      	str	r3, [sp, #152]	; 0x98
  402aca:	f300 831f 	bgt.w	40310c <_svfprintf_r+0x1198>
  402ace:	f108 0808 	add.w	r8, r8, #8
  402ad2:	9b12      	ldr	r3, [sp, #72]	; 0x48
  402ad4:	2f00      	cmp	r7, #0
  402ad6:	bfa8      	it	ge
  402ad8:	1bdb      	subge	r3, r3, r7
  402ada:	2b00      	cmp	r3, #0
  402adc:	461f      	mov	r7, r3
  402ade:	f340 80d6 	ble.w	402c8e <_svfprintf_r+0xd1a>
  402ae2:	2f10      	cmp	r7, #16
  402ae4:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402ae6:	4d31      	ldr	r5, [pc, #196]	; (402bac <_svfprintf_r+0xc38>)
  402ae8:	f340 81ed 	ble.w	402ec6 <_svfprintf_r+0xf52>
  402aec:	4642      	mov	r2, r8
  402aee:	4621      	mov	r1, r4
  402af0:	46b0      	mov	r8, r6
  402af2:	f04f 0b10 	mov.w	fp, #16
  402af6:	462e      	mov	r6, r5
  402af8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  402afa:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  402afc:	e004      	b.n	402b08 <_svfprintf_r+0xb94>
  402afe:	3208      	adds	r2, #8
  402b00:	3f10      	subs	r7, #16
  402b02:	2f10      	cmp	r7, #16
  402b04:	f340 81db 	ble.w	402ebe <_svfprintf_r+0xf4a>
  402b08:	3301      	adds	r3, #1
  402b0a:	3110      	adds	r1, #16
  402b0c:	2b07      	cmp	r3, #7
  402b0e:	9127      	str	r1, [sp, #156]	; 0x9c
  402b10:	9326      	str	r3, [sp, #152]	; 0x98
  402b12:	e882 0840 	stmia.w	r2, {r6, fp}
  402b16:	ddf2      	ble.n	402afe <_svfprintf_r+0xb8a>
  402b18:	aa25      	add	r2, sp, #148	; 0x94
  402b1a:	4629      	mov	r1, r5
  402b1c:	4620      	mov	r0, r4
  402b1e:	f002 fb7d 	bl	40521c <__ssprint_r>
  402b22:	2800      	cmp	r0, #0
  402b24:	f47f aaf8 	bne.w	402118 <_svfprintf_r+0x1a4>
  402b28:	9927      	ldr	r1, [sp, #156]	; 0x9c
  402b2a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402b2c:	464a      	mov	r2, r9
  402b2e:	e7e7      	b.n	402b00 <_svfprintf_r+0xb8c>
  402b30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402b32:	930e      	str	r3, [sp, #56]	; 0x38
  402b34:	464e      	mov	r6, r9
  402b36:	f7ff bb2d 	b.w	402194 <_svfprintf_r+0x220>
  402b3a:	2d00      	cmp	r5, #0
  402b3c:	bf08      	it	eq
  402b3e:	2c0a      	cmpeq	r4, #10
  402b40:	f0c0 808f 	bcc.w	402c62 <_svfprintf_r+0xcee>
  402b44:	464e      	mov	r6, r9
  402b46:	4620      	mov	r0, r4
  402b48:	4629      	mov	r1, r5
  402b4a:	220a      	movs	r2, #10
  402b4c:	2300      	movs	r3, #0
  402b4e:	f003 fc69 	bl	406424 <__aeabi_uldivmod>
  402b52:	3230      	adds	r2, #48	; 0x30
  402b54:	f806 2d01 	strb.w	r2, [r6, #-1]!
  402b58:	4620      	mov	r0, r4
  402b5a:	4629      	mov	r1, r5
  402b5c:	2300      	movs	r3, #0
  402b5e:	220a      	movs	r2, #10
  402b60:	f003 fc60 	bl	406424 <__aeabi_uldivmod>
  402b64:	4604      	mov	r4, r0
  402b66:	460d      	mov	r5, r1
  402b68:	ea54 0305 	orrs.w	r3, r4, r5
  402b6c:	d1eb      	bne.n	402b46 <_svfprintf_r+0xbd2>
  402b6e:	eba9 0306 	sub.w	r3, r9, r6
  402b72:	930e      	str	r3, [sp, #56]	; 0x38
  402b74:	f7ff bb0e 	b.w	402194 <_svfprintf_r+0x220>
  402b78:	aa25      	add	r2, sp, #148	; 0x94
  402b7a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402b7c:	980c      	ldr	r0, [sp, #48]	; 0x30
  402b7e:	f002 fb4d 	bl	40521c <__ssprint_r>
  402b82:	2800      	cmp	r0, #0
  402b84:	f47f aac8 	bne.w	402118 <_svfprintf_r+0x1a4>
  402b88:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  402b8c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  402b8e:	46c8      	mov	r8, r9
  402b90:	f7ff bb5e 	b.w	402250 <_svfprintf_r+0x2dc>
  402b94:	1e5e      	subs	r6, r3, #1
  402b96:	2e00      	cmp	r6, #0
  402b98:	f77f af0a 	ble.w	4029b0 <_svfprintf_r+0xa3c>
  402b9c:	2e10      	cmp	r6, #16
  402b9e:	4d03      	ldr	r5, [pc, #12]	; (402bac <_svfprintf_r+0xc38>)
  402ba0:	dd22      	ble.n	402be8 <_svfprintf_r+0xc74>
  402ba2:	4622      	mov	r2, r4
  402ba4:	f04f 0b10 	mov.w	fp, #16
  402ba8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  402baa:	e006      	b.n	402bba <_svfprintf_r+0xc46>
  402bac:	00407200 	.word	0x00407200
  402bb0:	3e10      	subs	r6, #16
  402bb2:	2e10      	cmp	r6, #16
  402bb4:	f108 0808 	add.w	r8, r8, #8
  402bb8:	dd15      	ble.n	402be6 <_svfprintf_r+0xc72>
  402bba:	3701      	adds	r7, #1
  402bbc:	3210      	adds	r2, #16
  402bbe:	2f07      	cmp	r7, #7
  402bc0:	9227      	str	r2, [sp, #156]	; 0x9c
  402bc2:	9726      	str	r7, [sp, #152]	; 0x98
  402bc4:	e888 0820 	stmia.w	r8, {r5, fp}
  402bc8:	ddf2      	ble.n	402bb0 <_svfprintf_r+0xc3c>
  402bca:	aa25      	add	r2, sp, #148	; 0x94
  402bcc:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402bce:	4620      	mov	r0, r4
  402bd0:	f002 fb24 	bl	40521c <__ssprint_r>
  402bd4:	2800      	cmp	r0, #0
  402bd6:	f47f aa9f 	bne.w	402118 <_svfprintf_r+0x1a4>
  402bda:	3e10      	subs	r6, #16
  402bdc:	2e10      	cmp	r6, #16
  402bde:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  402be0:	9f26      	ldr	r7, [sp, #152]	; 0x98
  402be2:	46c8      	mov	r8, r9
  402be4:	dce9      	bgt.n	402bba <_svfprintf_r+0xc46>
  402be6:	4614      	mov	r4, r2
  402be8:	3701      	adds	r7, #1
  402bea:	4434      	add	r4, r6
  402bec:	2f07      	cmp	r7, #7
  402bee:	9427      	str	r4, [sp, #156]	; 0x9c
  402bf0:	9726      	str	r7, [sp, #152]	; 0x98
  402bf2:	e888 0060 	stmia.w	r8, {r5, r6}
  402bf6:	f77f aed9 	ble.w	4029ac <_svfprintf_r+0xa38>
  402bfa:	aa25      	add	r2, sp, #148	; 0x94
  402bfc:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402bfe:	980c      	ldr	r0, [sp, #48]	; 0x30
  402c00:	f002 fb0c 	bl	40521c <__ssprint_r>
  402c04:	2800      	cmp	r0, #0
  402c06:	f47f aa87 	bne.w	402118 <_svfprintf_r+0x1a4>
  402c0a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  402c0c:	9f26      	ldr	r7, [sp, #152]	; 0x98
  402c0e:	46c8      	mov	r8, r9
  402c10:	e6ce      	b.n	4029b0 <_svfprintf_r+0xa3c>
  402c12:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402c14:	6814      	ldr	r4, [r2, #0]
  402c16:	4613      	mov	r3, r2
  402c18:	3304      	adds	r3, #4
  402c1a:	17e5      	asrs	r5, r4, #31
  402c1c:	930f      	str	r3, [sp, #60]	; 0x3c
  402c1e:	4622      	mov	r2, r4
  402c20:	462b      	mov	r3, r5
  402c22:	e4fa      	b.n	40261a <_svfprintf_r+0x6a6>
  402c24:	3204      	adds	r2, #4
  402c26:	681c      	ldr	r4, [r3, #0]
  402c28:	920f      	str	r2, [sp, #60]	; 0x3c
  402c2a:	2301      	movs	r3, #1
  402c2c:	2500      	movs	r5, #0
  402c2e:	f7ff ba94 	b.w	40215a <_svfprintf_r+0x1e6>
  402c32:	681c      	ldr	r4, [r3, #0]
  402c34:	3304      	adds	r3, #4
  402c36:	930f      	str	r3, [sp, #60]	; 0x3c
  402c38:	2500      	movs	r5, #0
  402c3a:	e421      	b.n	402480 <_svfprintf_r+0x50c>
  402c3c:	990f      	ldr	r1, [sp, #60]	; 0x3c
  402c3e:	460a      	mov	r2, r1
  402c40:	3204      	adds	r2, #4
  402c42:	680c      	ldr	r4, [r1, #0]
  402c44:	920f      	str	r2, [sp, #60]	; 0x3c
  402c46:	2500      	movs	r5, #0
  402c48:	f7ff ba87 	b.w	40215a <_svfprintf_r+0x1e6>
  402c4c:	4614      	mov	r4, r2
  402c4e:	3301      	adds	r3, #1
  402c50:	4434      	add	r4, r6
  402c52:	2b07      	cmp	r3, #7
  402c54:	9427      	str	r4, [sp, #156]	; 0x9c
  402c56:	9326      	str	r3, [sp, #152]	; 0x98
  402c58:	e888 0060 	stmia.w	r8, {r5, r6}
  402c5c:	f77f ab68 	ble.w	402330 <_svfprintf_r+0x3bc>
  402c60:	e6b3      	b.n	4029ca <_svfprintf_r+0xa56>
  402c62:	f8dd b01c 	ldr.w	fp, [sp, #28]
  402c66:	f8cd b01c 	str.w	fp, [sp, #28]
  402c6a:	ae42      	add	r6, sp, #264	; 0x108
  402c6c:	3430      	adds	r4, #48	; 0x30
  402c6e:	2301      	movs	r3, #1
  402c70:	f806 4d41 	strb.w	r4, [r6, #-65]!
  402c74:	930e      	str	r3, [sp, #56]	; 0x38
  402c76:	f7ff ba8d 	b.w	402194 <_svfprintf_r+0x220>
  402c7a:	aa25      	add	r2, sp, #148	; 0x94
  402c7c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402c7e:	980c      	ldr	r0, [sp, #48]	; 0x30
  402c80:	f002 facc 	bl	40521c <__ssprint_r>
  402c84:	2800      	cmp	r0, #0
  402c86:	f47f aa47 	bne.w	402118 <_svfprintf_r+0x1a4>
  402c8a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  402c8c:	46c8      	mov	r8, r9
  402c8e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  402c90:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  402c92:	429a      	cmp	r2, r3
  402c94:	db44      	blt.n	402d20 <_svfprintf_r+0xdac>
  402c96:	9b07      	ldr	r3, [sp, #28]
  402c98:	07d9      	lsls	r1, r3, #31
  402c9a:	d441      	bmi.n	402d20 <_svfprintf_r+0xdac>
  402c9c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  402c9e:	9812      	ldr	r0, [sp, #72]	; 0x48
  402ca0:	1a9a      	subs	r2, r3, r2
  402ca2:	1a1d      	subs	r5, r3, r0
  402ca4:	4295      	cmp	r5, r2
  402ca6:	bfa8      	it	ge
  402ca8:	4615      	movge	r5, r2
  402caa:	2d00      	cmp	r5, #0
  402cac:	dd0e      	ble.n	402ccc <_svfprintf_r+0xd58>
  402cae:	9926      	ldr	r1, [sp, #152]	; 0x98
  402cb0:	f8c8 5004 	str.w	r5, [r8, #4]
  402cb4:	3101      	adds	r1, #1
  402cb6:	4406      	add	r6, r0
  402cb8:	442c      	add	r4, r5
  402cba:	2907      	cmp	r1, #7
  402cbc:	f8c8 6000 	str.w	r6, [r8]
  402cc0:	9427      	str	r4, [sp, #156]	; 0x9c
  402cc2:	9126      	str	r1, [sp, #152]	; 0x98
  402cc4:	f300 823b 	bgt.w	40313e <_svfprintf_r+0x11ca>
  402cc8:	f108 0808 	add.w	r8, r8, #8
  402ccc:	2d00      	cmp	r5, #0
  402cce:	bfac      	ite	ge
  402cd0:	1b56      	subge	r6, r2, r5
  402cd2:	4616      	movlt	r6, r2
  402cd4:	2e00      	cmp	r6, #0
  402cd6:	f77f ab2d 	ble.w	402334 <_svfprintf_r+0x3c0>
  402cda:	2e10      	cmp	r6, #16
  402cdc:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402cde:	4db0      	ldr	r5, [pc, #704]	; (402fa0 <_svfprintf_r+0x102c>)
  402ce0:	ddb5      	ble.n	402c4e <_svfprintf_r+0xcda>
  402ce2:	4622      	mov	r2, r4
  402ce4:	2710      	movs	r7, #16
  402ce6:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  402cea:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  402cec:	e004      	b.n	402cf8 <_svfprintf_r+0xd84>
  402cee:	f108 0808 	add.w	r8, r8, #8
  402cf2:	3e10      	subs	r6, #16
  402cf4:	2e10      	cmp	r6, #16
  402cf6:	dda9      	ble.n	402c4c <_svfprintf_r+0xcd8>
  402cf8:	3301      	adds	r3, #1
  402cfa:	3210      	adds	r2, #16
  402cfc:	2b07      	cmp	r3, #7
  402cfe:	9227      	str	r2, [sp, #156]	; 0x9c
  402d00:	9326      	str	r3, [sp, #152]	; 0x98
  402d02:	e888 00a0 	stmia.w	r8, {r5, r7}
  402d06:	ddf2      	ble.n	402cee <_svfprintf_r+0xd7a>
  402d08:	aa25      	add	r2, sp, #148	; 0x94
  402d0a:	4621      	mov	r1, r4
  402d0c:	4658      	mov	r0, fp
  402d0e:	f002 fa85 	bl	40521c <__ssprint_r>
  402d12:	2800      	cmp	r0, #0
  402d14:	f47f aa00 	bne.w	402118 <_svfprintf_r+0x1a4>
  402d18:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  402d1a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402d1c:	46c8      	mov	r8, r9
  402d1e:	e7e8      	b.n	402cf2 <_svfprintf_r+0xd7e>
  402d20:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402d22:	9819      	ldr	r0, [sp, #100]	; 0x64
  402d24:	991a      	ldr	r1, [sp, #104]	; 0x68
  402d26:	f8c8 1000 	str.w	r1, [r8]
  402d2a:	3301      	adds	r3, #1
  402d2c:	4404      	add	r4, r0
  402d2e:	2b07      	cmp	r3, #7
  402d30:	9427      	str	r4, [sp, #156]	; 0x9c
  402d32:	f8c8 0004 	str.w	r0, [r8, #4]
  402d36:	9326      	str	r3, [sp, #152]	; 0x98
  402d38:	f300 81f5 	bgt.w	403126 <_svfprintf_r+0x11b2>
  402d3c:	f108 0808 	add.w	r8, r8, #8
  402d40:	e7ac      	b.n	402c9c <_svfprintf_r+0xd28>
  402d42:	9b07      	ldr	r3, [sp, #28]
  402d44:	07da      	lsls	r2, r3, #31
  402d46:	f53f adfe 	bmi.w	402946 <_svfprintf_r+0x9d2>
  402d4a:	3701      	adds	r7, #1
  402d4c:	3401      	adds	r4, #1
  402d4e:	2301      	movs	r3, #1
  402d50:	2f07      	cmp	r7, #7
  402d52:	9427      	str	r4, [sp, #156]	; 0x9c
  402d54:	9726      	str	r7, [sp, #152]	; 0x98
  402d56:	f8c8 6000 	str.w	r6, [r8]
  402d5a:	f8c8 3004 	str.w	r3, [r8, #4]
  402d5e:	f77f ae25 	ble.w	4029ac <_svfprintf_r+0xa38>
  402d62:	e74a      	b.n	402bfa <_svfprintf_r+0xc86>
  402d64:	aa25      	add	r2, sp, #148	; 0x94
  402d66:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402d68:	980c      	ldr	r0, [sp, #48]	; 0x30
  402d6a:	f002 fa57 	bl	40521c <__ssprint_r>
  402d6e:	2800      	cmp	r0, #0
  402d70:	f47f a9d2 	bne.w	402118 <_svfprintf_r+0x1a4>
  402d74:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  402d76:	9f26      	ldr	r7, [sp, #152]	; 0x98
  402d78:	46c8      	mov	r8, r9
  402d7a:	e5f2      	b.n	402962 <_svfprintf_r+0x9ee>
  402d7c:	aa25      	add	r2, sp, #148	; 0x94
  402d7e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402d80:	980c      	ldr	r0, [sp, #48]	; 0x30
  402d82:	f002 fa4b 	bl	40521c <__ssprint_r>
  402d86:	2800      	cmp	r0, #0
  402d88:	f47f a9c6 	bne.w	402118 <_svfprintf_r+0x1a4>
  402d8c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  402d8e:	9f26      	ldr	r7, [sp, #152]	; 0x98
  402d90:	46c8      	mov	r8, r9
  402d92:	e5f5      	b.n	402980 <_svfprintf_r+0xa0c>
  402d94:	464e      	mov	r6, r9
  402d96:	f7ff b9fd 	b.w	402194 <_svfprintf_r+0x220>
  402d9a:	aa25      	add	r2, sp, #148	; 0x94
  402d9c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402d9e:	980c      	ldr	r0, [sp, #48]	; 0x30
  402da0:	f002 fa3c 	bl	40521c <__ssprint_r>
  402da4:	2800      	cmp	r0, #0
  402da6:	f47f a9b7 	bne.w	402118 <_svfprintf_r+0x1a4>
  402daa:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  402dac:	46c8      	mov	r8, r9
  402dae:	f7ff ba72 	b.w	402296 <_svfprintf_r+0x322>
  402db2:	9c15      	ldr	r4, [sp, #84]	; 0x54
  402db4:	4622      	mov	r2, r4
  402db6:	4620      	mov	r0, r4
  402db8:	9c14      	ldr	r4, [sp, #80]	; 0x50
  402dba:	4623      	mov	r3, r4
  402dbc:	4621      	mov	r1, r4
  402dbe:	f003 faf3 	bl	4063a8 <__aeabi_dcmpun>
  402dc2:	2800      	cmp	r0, #0
  402dc4:	f040 8286 	bne.w	4032d4 <_svfprintf_r+0x1360>
  402dc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402dca:	3301      	adds	r3, #1
  402dcc:	9b11      	ldr	r3, [sp, #68]	; 0x44
  402dce:	f023 0320 	bic.w	r3, r3, #32
  402dd2:	930e      	str	r3, [sp, #56]	; 0x38
  402dd4:	f000 81e2 	beq.w	40319c <_svfprintf_r+0x1228>
  402dd8:	2b47      	cmp	r3, #71	; 0x47
  402dda:	f000 811e 	beq.w	40301a <_svfprintf_r+0x10a6>
  402dde:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  402de2:	9307      	str	r3, [sp, #28]
  402de4:	9b14      	ldr	r3, [sp, #80]	; 0x50
  402de6:	1e1f      	subs	r7, r3, #0
  402de8:	9b15      	ldr	r3, [sp, #84]	; 0x54
  402dea:	9308      	str	r3, [sp, #32]
  402dec:	bfbb      	ittet	lt
  402dee:	463b      	movlt	r3, r7
  402df0:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  402df4:	2300      	movge	r3, #0
  402df6:	232d      	movlt	r3, #45	; 0x2d
  402df8:	9310      	str	r3, [sp, #64]	; 0x40
  402dfa:	9b11      	ldr	r3, [sp, #68]	; 0x44
  402dfc:	2b66      	cmp	r3, #102	; 0x66
  402dfe:	f000 81bb 	beq.w	403178 <_svfprintf_r+0x1204>
  402e02:	2b46      	cmp	r3, #70	; 0x46
  402e04:	f000 80df 	beq.w	402fc6 <_svfprintf_r+0x1052>
  402e08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402e0a:	9a08      	ldr	r2, [sp, #32]
  402e0c:	2b45      	cmp	r3, #69	; 0x45
  402e0e:	bf0c      	ite	eq
  402e10:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
  402e12:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  402e14:	a823      	add	r0, sp, #140	; 0x8c
  402e16:	a920      	add	r1, sp, #128	; 0x80
  402e18:	bf08      	it	eq
  402e1a:	1c5d      	addeq	r5, r3, #1
  402e1c:	9004      	str	r0, [sp, #16]
  402e1e:	9103      	str	r1, [sp, #12]
  402e20:	a81f      	add	r0, sp, #124	; 0x7c
  402e22:	2102      	movs	r1, #2
  402e24:	463b      	mov	r3, r7
  402e26:	9002      	str	r0, [sp, #8]
  402e28:	9501      	str	r5, [sp, #4]
  402e2a:	9100      	str	r1, [sp, #0]
  402e2c:	980c      	ldr	r0, [sp, #48]	; 0x30
  402e2e:	f000 fb73 	bl	403518 <_dtoa_r>
  402e32:	9b11      	ldr	r3, [sp, #68]	; 0x44
  402e34:	2b67      	cmp	r3, #103	; 0x67
  402e36:	4606      	mov	r6, r0
  402e38:	f040 81e0 	bne.w	4031fc <_svfprintf_r+0x1288>
  402e3c:	f01b 0f01 	tst.w	fp, #1
  402e40:	f000 8246 	beq.w	4032d0 <_svfprintf_r+0x135c>
  402e44:	1974      	adds	r4, r6, r5
  402e46:	9a16      	ldr	r2, [sp, #88]	; 0x58
  402e48:	9808      	ldr	r0, [sp, #32]
  402e4a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  402e4c:	4639      	mov	r1, r7
  402e4e:	f003 fa79 	bl	406344 <__aeabi_dcmpeq>
  402e52:	2800      	cmp	r0, #0
  402e54:	f040 8165 	bne.w	403122 <_svfprintf_r+0x11ae>
  402e58:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  402e5a:	42a3      	cmp	r3, r4
  402e5c:	d206      	bcs.n	402e6c <_svfprintf_r+0xef8>
  402e5e:	2130      	movs	r1, #48	; 0x30
  402e60:	1c5a      	adds	r2, r3, #1
  402e62:	9223      	str	r2, [sp, #140]	; 0x8c
  402e64:	7019      	strb	r1, [r3, #0]
  402e66:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  402e68:	429c      	cmp	r4, r3
  402e6a:	d8f9      	bhi.n	402e60 <_svfprintf_r+0xeec>
  402e6c:	1b9b      	subs	r3, r3, r6
  402e6e:	9313      	str	r3, [sp, #76]	; 0x4c
  402e70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  402e72:	2b47      	cmp	r3, #71	; 0x47
  402e74:	f000 80e9 	beq.w	40304a <_svfprintf_r+0x10d6>
  402e78:	9b11      	ldr	r3, [sp, #68]	; 0x44
  402e7a:	2b65      	cmp	r3, #101	; 0x65
  402e7c:	f340 81cd 	ble.w	40321a <_svfprintf_r+0x12a6>
  402e80:	9b11      	ldr	r3, [sp, #68]	; 0x44
  402e82:	2b66      	cmp	r3, #102	; 0x66
  402e84:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  402e86:	9312      	str	r3, [sp, #72]	; 0x48
  402e88:	f000 819e 	beq.w	4031c8 <_svfprintf_r+0x1254>
  402e8c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  402e8e:	9a12      	ldr	r2, [sp, #72]	; 0x48
  402e90:	4619      	mov	r1, r3
  402e92:	4291      	cmp	r1, r2
  402e94:	f300 818a 	bgt.w	4031ac <_svfprintf_r+0x1238>
  402e98:	f01b 0f01 	tst.w	fp, #1
  402e9c:	f040 8213 	bne.w	4032c6 <_svfprintf_r+0x1352>
  402ea0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  402ea4:	9308      	str	r3, [sp, #32]
  402ea6:	2367      	movs	r3, #103	; 0x67
  402ea8:	920e      	str	r2, [sp, #56]	; 0x38
  402eaa:	9311      	str	r3, [sp, #68]	; 0x44
  402eac:	9b10      	ldr	r3, [sp, #64]	; 0x40
  402eae:	2b00      	cmp	r3, #0
  402eb0:	f040 80c4 	bne.w	40303c <_svfprintf_r+0x10c8>
  402eb4:	930a      	str	r3, [sp, #40]	; 0x28
  402eb6:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  402eba:	f7ff b973 	b.w	4021a4 <_svfprintf_r+0x230>
  402ebe:	4635      	mov	r5, r6
  402ec0:	460c      	mov	r4, r1
  402ec2:	4646      	mov	r6, r8
  402ec4:	4690      	mov	r8, r2
  402ec6:	3301      	adds	r3, #1
  402ec8:	443c      	add	r4, r7
  402eca:	2b07      	cmp	r3, #7
  402ecc:	9427      	str	r4, [sp, #156]	; 0x9c
  402ece:	9326      	str	r3, [sp, #152]	; 0x98
  402ed0:	e888 00a0 	stmia.w	r8, {r5, r7}
  402ed4:	f73f aed1 	bgt.w	402c7a <_svfprintf_r+0xd06>
  402ed8:	f108 0808 	add.w	r8, r8, #8
  402edc:	e6d7      	b.n	402c8e <_svfprintf_r+0xd1a>
  402ede:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402ee0:	6813      	ldr	r3, [r2, #0]
  402ee2:	3204      	adds	r2, #4
  402ee4:	920f      	str	r2, [sp, #60]	; 0x3c
  402ee6:	9a09      	ldr	r2, [sp, #36]	; 0x24
  402ee8:	601a      	str	r2, [r3, #0]
  402eea:	f7ff b86a 	b.w	401fc2 <_svfprintf_r+0x4e>
  402eee:	aa25      	add	r2, sp, #148	; 0x94
  402ef0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402ef2:	980c      	ldr	r0, [sp, #48]	; 0x30
  402ef4:	f002 f992 	bl	40521c <__ssprint_r>
  402ef8:	2800      	cmp	r0, #0
  402efa:	f47f a90d 	bne.w	402118 <_svfprintf_r+0x1a4>
  402efe:	46c8      	mov	r8, r9
  402f00:	e48d      	b.n	40281e <_svfprintf_r+0x8aa>
  402f02:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402f04:	4a27      	ldr	r2, [pc, #156]	; (402fa4 <_svfprintf_r+0x1030>)
  402f06:	f8c8 2000 	str.w	r2, [r8]
  402f0a:	3301      	adds	r3, #1
  402f0c:	3401      	adds	r4, #1
  402f0e:	2201      	movs	r2, #1
  402f10:	2b07      	cmp	r3, #7
  402f12:	9427      	str	r4, [sp, #156]	; 0x9c
  402f14:	9326      	str	r3, [sp, #152]	; 0x98
  402f16:	f8c8 2004 	str.w	r2, [r8, #4]
  402f1a:	dc72      	bgt.n	403002 <_svfprintf_r+0x108e>
  402f1c:	f108 0808 	add.w	r8, r8, #8
  402f20:	b929      	cbnz	r1, 402f2e <_svfprintf_r+0xfba>
  402f22:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  402f24:	b91b      	cbnz	r3, 402f2e <_svfprintf_r+0xfba>
  402f26:	9b07      	ldr	r3, [sp, #28]
  402f28:	07d8      	lsls	r0, r3, #31
  402f2a:	f57f aa03 	bpl.w	402334 <_svfprintf_r+0x3c0>
  402f2e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  402f30:	9819      	ldr	r0, [sp, #100]	; 0x64
  402f32:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  402f34:	f8c8 2000 	str.w	r2, [r8]
  402f38:	3301      	adds	r3, #1
  402f3a:	4602      	mov	r2, r0
  402f3c:	4422      	add	r2, r4
  402f3e:	2b07      	cmp	r3, #7
  402f40:	9227      	str	r2, [sp, #156]	; 0x9c
  402f42:	f8c8 0004 	str.w	r0, [r8, #4]
  402f46:	9326      	str	r3, [sp, #152]	; 0x98
  402f48:	f300 818d 	bgt.w	403266 <_svfprintf_r+0x12f2>
  402f4c:	f108 0808 	add.w	r8, r8, #8
  402f50:	2900      	cmp	r1, #0
  402f52:	f2c0 8165 	blt.w	403220 <_svfprintf_r+0x12ac>
  402f56:	9913      	ldr	r1, [sp, #76]	; 0x4c
  402f58:	f8c8 6000 	str.w	r6, [r8]
  402f5c:	3301      	adds	r3, #1
  402f5e:	188c      	adds	r4, r1, r2
  402f60:	2b07      	cmp	r3, #7
  402f62:	9427      	str	r4, [sp, #156]	; 0x9c
  402f64:	9326      	str	r3, [sp, #152]	; 0x98
  402f66:	f8c8 1004 	str.w	r1, [r8, #4]
  402f6a:	f77f a9e1 	ble.w	402330 <_svfprintf_r+0x3bc>
  402f6e:	e52c      	b.n	4029ca <_svfprintf_r+0xa56>
  402f70:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  402f72:	9909      	ldr	r1, [sp, #36]	; 0x24
  402f74:	6813      	ldr	r3, [r2, #0]
  402f76:	17cd      	asrs	r5, r1, #31
  402f78:	4608      	mov	r0, r1
  402f7a:	3204      	adds	r2, #4
  402f7c:	4629      	mov	r1, r5
  402f7e:	920f      	str	r2, [sp, #60]	; 0x3c
  402f80:	e9c3 0100 	strd	r0, r1, [r3]
  402f84:	f7ff b81d 	b.w	401fc2 <_svfprintf_r+0x4e>
  402f88:	aa25      	add	r2, sp, #148	; 0x94
  402f8a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  402f8c:	980c      	ldr	r0, [sp, #48]	; 0x30
  402f8e:	f002 f945 	bl	40521c <__ssprint_r>
  402f92:	2800      	cmp	r0, #0
  402f94:	f47f a8c0 	bne.w	402118 <_svfprintf_r+0x1a4>
  402f98:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  402f9a:	46c8      	mov	r8, r9
  402f9c:	e458      	b.n	402850 <_svfprintf_r+0x8dc>
  402f9e:	bf00      	nop
  402fa0:	00407200 	.word	0x00407200
  402fa4:	004071ec 	.word	0x004071ec
  402fa8:	2140      	movs	r1, #64	; 0x40
  402faa:	980c      	ldr	r0, [sp, #48]	; 0x30
  402fac:	f001 fa0a 	bl	4043c4 <_malloc_r>
  402fb0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  402fb2:	6010      	str	r0, [r2, #0]
  402fb4:	6110      	str	r0, [r2, #16]
  402fb6:	2800      	cmp	r0, #0
  402fb8:	f000 81f2 	beq.w	4033a0 <_svfprintf_r+0x142c>
  402fbc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  402fbe:	2340      	movs	r3, #64	; 0x40
  402fc0:	6153      	str	r3, [r2, #20]
  402fc2:	f7fe bfee 	b.w	401fa2 <_svfprintf_r+0x2e>
  402fc6:	a823      	add	r0, sp, #140	; 0x8c
  402fc8:	a920      	add	r1, sp, #128	; 0x80
  402fca:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  402fcc:	9004      	str	r0, [sp, #16]
  402fce:	9103      	str	r1, [sp, #12]
  402fd0:	a81f      	add	r0, sp, #124	; 0x7c
  402fd2:	2103      	movs	r1, #3
  402fd4:	9002      	str	r0, [sp, #8]
  402fd6:	9a08      	ldr	r2, [sp, #32]
  402fd8:	9401      	str	r4, [sp, #4]
  402fda:	463b      	mov	r3, r7
  402fdc:	9100      	str	r1, [sp, #0]
  402fde:	980c      	ldr	r0, [sp, #48]	; 0x30
  402fe0:	f000 fa9a 	bl	403518 <_dtoa_r>
  402fe4:	4625      	mov	r5, r4
  402fe6:	4606      	mov	r6, r0
  402fe8:	9b11      	ldr	r3, [sp, #68]	; 0x44
  402fea:	2b46      	cmp	r3, #70	; 0x46
  402fec:	eb06 0405 	add.w	r4, r6, r5
  402ff0:	f47f af29 	bne.w	402e46 <_svfprintf_r+0xed2>
  402ff4:	7833      	ldrb	r3, [r6, #0]
  402ff6:	2b30      	cmp	r3, #48	; 0x30
  402ff8:	f000 8178 	beq.w	4032ec <_svfprintf_r+0x1378>
  402ffc:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
  402ffe:	442c      	add	r4, r5
  403000:	e721      	b.n	402e46 <_svfprintf_r+0xed2>
  403002:	aa25      	add	r2, sp, #148	; 0x94
  403004:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403006:	980c      	ldr	r0, [sp, #48]	; 0x30
  403008:	f002 f908 	bl	40521c <__ssprint_r>
  40300c:	2800      	cmp	r0, #0
  40300e:	f47f a883 	bne.w	402118 <_svfprintf_r+0x1a4>
  403012:	991f      	ldr	r1, [sp, #124]	; 0x7c
  403014:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403016:	46c8      	mov	r8, r9
  403018:	e782      	b.n	402f20 <_svfprintf_r+0xfac>
  40301a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40301c:	2b00      	cmp	r3, #0
  40301e:	bf08      	it	eq
  403020:	2301      	moveq	r3, #1
  403022:	930a      	str	r3, [sp, #40]	; 0x28
  403024:	e6db      	b.n	402dde <_svfprintf_r+0xe6a>
  403026:	4630      	mov	r0, r6
  403028:	940a      	str	r4, [sp, #40]	; 0x28
  40302a:	f002 f889 	bl	405140 <strlen>
  40302e:	950f      	str	r5, [sp, #60]	; 0x3c
  403030:	900e      	str	r0, [sp, #56]	; 0x38
  403032:	f8cd b01c 	str.w	fp, [sp, #28]
  403036:	4603      	mov	r3, r0
  403038:	f7ff b9f9 	b.w	40242e <_svfprintf_r+0x4ba>
  40303c:	272d      	movs	r7, #45	; 0x2d
  40303e:	2300      	movs	r3, #0
  403040:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  403044:	930a      	str	r3, [sp, #40]	; 0x28
  403046:	f7ff b8ae 	b.w	4021a6 <_svfprintf_r+0x232>
  40304a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40304c:	9312      	str	r3, [sp, #72]	; 0x48
  40304e:	461a      	mov	r2, r3
  403050:	3303      	adds	r3, #3
  403052:	db04      	blt.n	40305e <_svfprintf_r+0x10ea>
  403054:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403056:	4619      	mov	r1, r3
  403058:	4291      	cmp	r1, r2
  40305a:	f6bf af17 	bge.w	402e8c <_svfprintf_r+0xf18>
  40305e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403060:	3b02      	subs	r3, #2
  403062:	9311      	str	r3, [sp, #68]	; 0x44
  403064:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  403068:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
  40306c:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40306e:	3b01      	subs	r3, #1
  403070:	2b00      	cmp	r3, #0
  403072:	931f      	str	r3, [sp, #124]	; 0x7c
  403074:	bfbd      	ittte	lt
  403076:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
  403078:	f1c3 0301 	rsblt	r3, r3, #1
  40307c:	222d      	movlt	r2, #45	; 0x2d
  40307e:	222b      	movge	r2, #43	; 0x2b
  403080:	2b09      	cmp	r3, #9
  403082:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
  403086:	f340 8116 	ble.w	4032b6 <_svfprintf_r+0x1342>
  40308a:	f10d 0493 	add.w	r4, sp, #147	; 0x93
  40308e:	4620      	mov	r0, r4
  403090:	4dab      	ldr	r5, [pc, #684]	; (403340 <_svfprintf_r+0x13cc>)
  403092:	e000      	b.n	403096 <_svfprintf_r+0x1122>
  403094:	4610      	mov	r0, r2
  403096:	fb85 1203 	smull	r1, r2, r5, r3
  40309a:	17d9      	asrs	r1, r3, #31
  40309c:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  4030a0:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  4030a4:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  4030a8:	3230      	adds	r2, #48	; 0x30
  4030aa:	2909      	cmp	r1, #9
  4030ac:	f800 2c01 	strb.w	r2, [r0, #-1]
  4030b0:	460b      	mov	r3, r1
  4030b2:	f100 32ff 	add.w	r2, r0, #4294967295
  4030b6:	dced      	bgt.n	403094 <_svfprintf_r+0x1120>
  4030b8:	3330      	adds	r3, #48	; 0x30
  4030ba:	3802      	subs	r0, #2
  4030bc:	b2d9      	uxtb	r1, r3
  4030be:	4284      	cmp	r4, r0
  4030c0:	f802 1c01 	strb.w	r1, [r2, #-1]
  4030c4:	f240 8165 	bls.w	403392 <_svfprintf_r+0x141e>
  4030c8:	f10d 0086 	add.w	r0, sp, #134	; 0x86
  4030cc:	4613      	mov	r3, r2
  4030ce:	e001      	b.n	4030d4 <_svfprintf_r+0x1160>
  4030d0:	f813 1b01 	ldrb.w	r1, [r3], #1
  4030d4:	f800 1b01 	strb.w	r1, [r0], #1
  4030d8:	42a3      	cmp	r3, r4
  4030da:	d1f9      	bne.n	4030d0 <_svfprintf_r+0x115c>
  4030dc:	3301      	adds	r3, #1
  4030de:	1a9b      	subs	r3, r3, r2
  4030e0:	f10d 0286 	add.w	r2, sp, #134	; 0x86
  4030e4:	4413      	add	r3, r2
  4030e6:	aa21      	add	r2, sp, #132	; 0x84
  4030e8:	1a9b      	subs	r3, r3, r2
  4030ea:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  4030ec:	931b      	str	r3, [sp, #108]	; 0x6c
  4030ee:	2a01      	cmp	r2, #1
  4030f0:	4413      	add	r3, r2
  4030f2:	930e      	str	r3, [sp, #56]	; 0x38
  4030f4:	f340 8119 	ble.w	40332a <_svfprintf_r+0x13b6>
  4030f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4030fa:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4030fc:	4413      	add	r3, r2
  4030fe:	930e      	str	r3, [sp, #56]	; 0x38
  403100:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  403104:	9308      	str	r3, [sp, #32]
  403106:	2300      	movs	r3, #0
  403108:	9312      	str	r3, [sp, #72]	; 0x48
  40310a:	e6cf      	b.n	402eac <_svfprintf_r+0xf38>
  40310c:	aa25      	add	r2, sp, #148	; 0x94
  40310e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403110:	980c      	ldr	r0, [sp, #48]	; 0x30
  403112:	f002 f883 	bl	40521c <__ssprint_r>
  403116:	2800      	cmp	r0, #0
  403118:	f47e affe 	bne.w	402118 <_svfprintf_r+0x1a4>
  40311c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40311e:	46c8      	mov	r8, r9
  403120:	e4d7      	b.n	402ad2 <_svfprintf_r+0xb5e>
  403122:	4623      	mov	r3, r4
  403124:	e6a2      	b.n	402e6c <_svfprintf_r+0xef8>
  403126:	aa25      	add	r2, sp, #148	; 0x94
  403128:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40312a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40312c:	f002 f876 	bl	40521c <__ssprint_r>
  403130:	2800      	cmp	r0, #0
  403132:	f47e aff1 	bne.w	402118 <_svfprintf_r+0x1a4>
  403136:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  403138:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40313a:	46c8      	mov	r8, r9
  40313c:	e5ae      	b.n	402c9c <_svfprintf_r+0xd28>
  40313e:	aa25      	add	r2, sp, #148	; 0x94
  403140:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403142:	980c      	ldr	r0, [sp, #48]	; 0x30
  403144:	f002 f86a 	bl	40521c <__ssprint_r>
  403148:	2800      	cmp	r0, #0
  40314a:	f47e afe5 	bne.w	402118 <_svfprintf_r+0x1a4>
  40314e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  403150:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  403152:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403154:	1a9a      	subs	r2, r3, r2
  403156:	46c8      	mov	r8, r9
  403158:	e5b8      	b.n	402ccc <_svfprintf_r+0xd58>
  40315a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40315c:	9612      	str	r6, [sp, #72]	; 0x48
  40315e:	2b06      	cmp	r3, #6
  403160:	bf28      	it	cs
  403162:	2306      	movcs	r3, #6
  403164:	960a      	str	r6, [sp, #40]	; 0x28
  403166:	4637      	mov	r7, r6
  403168:	9308      	str	r3, [sp, #32]
  40316a:	950f      	str	r5, [sp, #60]	; 0x3c
  40316c:	f8cd b01c 	str.w	fp, [sp, #28]
  403170:	930e      	str	r3, [sp, #56]	; 0x38
  403172:	4e74      	ldr	r6, [pc, #464]	; (403344 <_svfprintf_r+0x13d0>)
  403174:	f7ff b816 	b.w	4021a4 <_svfprintf_r+0x230>
  403178:	a823      	add	r0, sp, #140	; 0x8c
  40317a:	a920      	add	r1, sp, #128	; 0x80
  40317c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  40317e:	9004      	str	r0, [sp, #16]
  403180:	9103      	str	r1, [sp, #12]
  403182:	a81f      	add	r0, sp, #124	; 0x7c
  403184:	2103      	movs	r1, #3
  403186:	9002      	str	r0, [sp, #8]
  403188:	9a08      	ldr	r2, [sp, #32]
  40318a:	9501      	str	r5, [sp, #4]
  40318c:	463b      	mov	r3, r7
  40318e:	9100      	str	r1, [sp, #0]
  403190:	980c      	ldr	r0, [sp, #48]	; 0x30
  403192:	f000 f9c1 	bl	403518 <_dtoa_r>
  403196:	4606      	mov	r6, r0
  403198:	1944      	adds	r4, r0, r5
  40319a:	e72b      	b.n	402ff4 <_svfprintf_r+0x1080>
  40319c:	2306      	movs	r3, #6
  40319e:	930a      	str	r3, [sp, #40]	; 0x28
  4031a0:	e61d      	b.n	402dde <_svfprintf_r+0xe6a>
  4031a2:	272d      	movs	r7, #45	; 0x2d
  4031a4:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  4031a8:	f7ff bacd 	b.w	402746 <_svfprintf_r+0x7d2>
  4031ac:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4031ae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4031b0:	4413      	add	r3, r2
  4031b2:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4031b4:	930e      	str	r3, [sp, #56]	; 0x38
  4031b6:	2a00      	cmp	r2, #0
  4031b8:	f340 80b0 	ble.w	40331c <_svfprintf_r+0x13a8>
  4031bc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4031c0:	9308      	str	r3, [sp, #32]
  4031c2:	2367      	movs	r3, #103	; 0x67
  4031c4:	9311      	str	r3, [sp, #68]	; 0x44
  4031c6:	e671      	b.n	402eac <_svfprintf_r+0xf38>
  4031c8:	2b00      	cmp	r3, #0
  4031ca:	f340 80c3 	ble.w	403354 <_svfprintf_r+0x13e0>
  4031ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4031d0:	2a00      	cmp	r2, #0
  4031d2:	f040 8099 	bne.w	403308 <_svfprintf_r+0x1394>
  4031d6:	f01b 0f01 	tst.w	fp, #1
  4031da:	f040 8095 	bne.w	403308 <_svfprintf_r+0x1394>
  4031de:	9308      	str	r3, [sp, #32]
  4031e0:	930e      	str	r3, [sp, #56]	; 0x38
  4031e2:	e663      	b.n	402eac <_svfprintf_r+0xf38>
  4031e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4031e6:	9308      	str	r3, [sp, #32]
  4031e8:	930e      	str	r3, [sp, #56]	; 0x38
  4031ea:	900a      	str	r0, [sp, #40]	; 0x28
  4031ec:	950f      	str	r5, [sp, #60]	; 0x3c
  4031ee:	f8cd b01c 	str.w	fp, [sp, #28]
  4031f2:	9012      	str	r0, [sp, #72]	; 0x48
  4031f4:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4031f8:	f7fe bfd4 	b.w	4021a4 <_svfprintf_r+0x230>
  4031fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4031fe:	2b47      	cmp	r3, #71	; 0x47
  403200:	f47f ae20 	bne.w	402e44 <_svfprintf_r+0xed0>
  403204:	f01b 0f01 	tst.w	fp, #1
  403208:	f47f aeee 	bne.w	402fe8 <_svfprintf_r+0x1074>
  40320c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40320e:	1b9b      	subs	r3, r3, r6
  403210:	9313      	str	r3, [sp, #76]	; 0x4c
  403212:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403214:	2b47      	cmp	r3, #71	; 0x47
  403216:	f43f af18 	beq.w	40304a <_svfprintf_r+0x10d6>
  40321a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40321c:	9312      	str	r3, [sp, #72]	; 0x48
  40321e:	e721      	b.n	403064 <_svfprintf_r+0x10f0>
  403220:	424f      	negs	r7, r1
  403222:	3110      	adds	r1, #16
  403224:	4d48      	ldr	r5, [pc, #288]	; (403348 <_svfprintf_r+0x13d4>)
  403226:	da2f      	bge.n	403288 <_svfprintf_r+0x1314>
  403228:	2410      	movs	r4, #16
  40322a:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  40322e:	e004      	b.n	40323a <_svfprintf_r+0x12c6>
  403230:	f108 0808 	add.w	r8, r8, #8
  403234:	3f10      	subs	r7, #16
  403236:	2f10      	cmp	r7, #16
  403238:	dd26      	ble.n	403288 <_svfprintf_r+0x1314>
  40323a:	3301      	adds	r3, #1
  40323c:	3210      	adds	r2, #16
  40323e:	2b07      	cmp	r3, #7
  403240:	9227      	str	r2, [sp, #156]	; 0x9c
  403242:	9326      	str	r3, [sp, #152]	; 0x98
  403244:	f8c8 5000 	str.w	r5, [r8]
  403248:	f8c8 4004 	str.w	r4, [r8, #4]
  40324c:	ddf0      	ble.n	403230 <_svfprintf_r+0x12bc>
  40324e:	aa25      	add	r2, sp, #148	; 0x94
  403250:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403252:	4658      	mov	r0, fp
  403254:	f001 ffe2 	bl	40521c <__ssprint_r>
  403258:	2800      	cmp	r0, #0
  40325a:	f47e af5d 	bne.w	402118 <_svfprintf_r+0x1a4>
  40325e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  403260:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403262:	46c8      	mov	r8, r9
  403264:	e7e6      	b.n	403234 <_svfprintf_r+0x12c0>
  403266:	aa25      	add	r2, sp, #148	; 0x94
  403268:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40326a:	980c      	ldr	r0, [sp, #48]	; 0x30
  40326c:	f001 ffd6 	bl	40521c <__ssprint_r>
  403270:	2800      	cmp	r0, #0
  403272:	f47e af51 	bne.w	402118 <_svfprintf_r+0x1a4>
  403276:	991f      	ldr	r1, [sp, #124]	; 0x7c
  403278:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40327a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40327c:	46c8      	mov	r8, r9
  40327e:	e667      	b.n	402f50 <_svfprintf_r+0xfdc>
  403280:	2000      	movs	r0, #0
  403282:	900a      	str	r0, [sp, #40]	; 0x28
  403284:	f7fe bed0 	b.w	402028 <_svfprintf_r+0xb4>
  403288:	3301      	adds	r3, #1
  40328a:	443a      	add	r2, r7
  40328c:	2b07      	cmp	r3, #7
  40328e:	e888 00a0 	stmia.w	r8, {r5, r7}
  403292:	9227      	str	r2, [sp, #156]	; 0x9c
  403294:	9326      	str	r3, [sp, #152]	; 0x98
  403296:	f108 0808 	add.w	r8, r8, #8
  40329a:	f77f ae5c 	ble.w	402f56 <_svfprintf_r+0xfe2>
  40329e:	aa25      	add	r2, sp, #148	; 0x94
  4032a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4032a2:	980c      	ldr	r0, [sp, #48]	; 0x30
  4032a4:	f001 ffba 	bl	40521c <__ssprint_r>
  4032a8:	2800      	cmp	r0, #0
  4032aa:	f47e af35 	bne.w	402118 <_svfprintf_r+0x1a4>
  4032ae:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4032b0:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4032b2:	46c8      	mov	r8, r9
  4032b4:	e64f      	b.n	402f56 <_svfprintf_r+0xfe2>
  4032b6:	3330      	adds	r3, #48	; 0x30
  4032b8:	2230      	movs	r2, #48	; 0x30
  4032ba:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
  4032be:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
  4032c2:	ab22      	add	r3, sp, #136	; 0x88
  4032c4:	e70f      	b.n	4030e6 <_svfprintf_r+0x1172>
  4032c6:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4032c8:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4032ca:	4413      	add	r3, r2
  4032cc:	930e      	str	r3, [sp, #56]	; 0x38
  4032ce:	e775      	b.n	4031bc <_svfprintf_r+0x1248>
  4032d0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4032d2:	e5cb      	b.n	402e6c <_svfprintf_r+0xef8>
  4032d4:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4032d6:	4e1d      	ldr	r6, [pc, #116]	; (40334c <_svfprintf_r+0x13d8>)
  4032d8:	2b00      	cmp	r3, #0
  4032da:	bfb6      	itet	lt
  4032dc:	272d      	movlt	r7, #45	; 0x2d
  4032de:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
  4032e2:	f88d 7077 	strblt.w	r7, [sp, #119]	; 0x77
  4032e6:	4b1a      	ldr	r3, [pc, #104]	; (403350 <_svfprintf_r+0x13dc>)
  4032e8:	f7ff ba2f 	b.w	40274a <_svfprintf_r+0x7d6>
  4032ec:	9a16      	ldr	r2, [sp, #88]	; 0x58
  4032ee:	9808      	ldr	r0, [sp, #32]
  4032f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  4032f2:	4639      	mov	r1, r7
  4032f4:	f003 f826 	bl	406344 <__aeabi_dcmpeq>
  4032f8:	2800      	cmp	r0, #0
  4032fa:	f47f ae7f 	bne.w	402ffc <_svfprintf_r+0x1088>
  4032fe:	f1c5 0501 	rsb	r5, r5, #1
  403302:	951f      	str	r5, [sp, #124]	; 0x7c
  403304:	442c      	add	r4, r5
  403306:	e59e      	b.n	402e46 <_svfprintf_r+0xed2>
  403308:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40330a:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40330c:	4413      	add	r3, r2
  40330e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  403310:	441a      	add	r2, r3
  403312:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  403316:	920e      	str	r2, [sp, #56]	; 0x38
  403318:	9308      	str	r3, [sp, #32]
  40331a:	e5c7      	b.n	402eac <_svfprintf_r+0xf38>
  40331c:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40331e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  403320:	f1c3 0301 	rsb	r3, r3, #1
  403324:	441a      	add	r2, r3
  403326:	4613      	mov	r3, r2
  403328:	e7d0      	b.n	4032cc <_svfprintf_r+0x1358>
  40332a:	f01b 0301 	ands.w	r3, fp, #1
  40332e:	9312      	str	r3, [sp, #72]	; 0x48
  403330:	f47f aee2 	bne.w	4030f8 <_svfprintf_r+0x1184>
  403334:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403336:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  40333a:	9308      	str	r3, [sp, #32]
  40333c:	e5b6      	b.n	402eac <_svfprintf_r+0xf38>
  40333e:	bf00      	nop
  403340:	66666667 	.word	0x66666667
  403344:	004071e4 	.word	0x004071e4
  403348:	00407200 	.word	0x00407200
  40334c:	004071b8 	.word	0x004071b8
  403350:	004071b4 	.word	0x004071b4
  403354:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403356:	b913      	cbnz	r3, 40335e <_svfprintf_r+0x13ea>
  403358:	f01b 0f01 	tst.w	fp, #1
  40335c:	d002      	beq.n	403364 <_svfprintf_r+0x13f0>
  40335e:	9b19      	ldr	r3, [sp, #100]	; 0x64
  403360:	3301      	adds	r3, #1
  403362:	e7d4      	b.n	40330e <_svfprintf_r+0x139a>
  403364:	2301      	movs	r3, #1
  403366:	e73a      	b.n	4031de <_svfprintf_r+0x126a>
  403368:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  40336a:	f89a 3001 	ldrb.w	r3, [sl, #1]
  40336e:	6828      	ldr	r0, [r5, #0]
  403370:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
  403374:	900a      	str	r0, [sp, #40]	; 0x28
  403376:	4628      	mov	r0, r5
  403378:	3004      	adds	r0, #4
  40337a:	46a2      	mov	sl, r4
  40337c:	900f      	str	r0, [sp, #60]	; 0x3c
  40337e:	f7fe be51 	b.w	402024 <_svfprintf_r+0xb0>
  403382:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  403386:	f7ff b867 	b.w	402458 <_svfprintf_r+0x4e4>
  40338a:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40338e:	f7ff ba15 	b.w	4027bc <_svfprintf_r+0x848>
  403392:	f10d 0386 	add.w	r3, sp, #134	; 0x86
  403396:	e6a6      	b.n	4030e6 <_svfprintf_r+0x1172>
  403398:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  40339c:	f7ff b8eb 	b.w	402576 <_svfprintf_r+0x602>
  4033a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4033a2:	230c      	movs	r3, #12
  4033a4:	6013      	str	r3, [r2, #0]
  4033a6:	f04f 33ff 	mov.w	r3, #4294967295
  4033aa:	9309      	str	r3, [sp, #36]	; 0x24
  4033ac:	f7fe bebd 	b.w	40212a <_svfprintf_r+0x1b6>
  4033b0:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4033b4:	f7ff b99a 	b.w	4026ec <_svfprintf_r+0x778>
  4033b8:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4033bc:	f7ff b976 	b.w	4026ac <_svfprintf_r+0x738>
  4033c0:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4033c4:	f7ff b959 	b.w	40267a <_svfprintf_r+0x706>
  4033c8:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  4033cc:	f7ff b912 	b.w	4025f4 <_svfprintf_r+0x680>

004033d0 <register_fini>:
  4033d0:	4b02      	ldr	r3, [pc, #8]	; (4033dc <register_fini+0xc>)
  4033d2:	b113      	cbz	r3, 4033da <register_fini+0xa>
  4033d4:	4802      	ldr	r0, [pc, #8]	; (4033e0 <register_fini+0x10>)
  4033d6:	f000 b805 	b.w	4033e4 <atexit>
  4033da:	4770      	bx	lr
  4033dc:	00000000 	.word	0x00000000
  4033e0:	0040436d 	.word	0x0040436d

004033e4 <atexit>:
  4033e4:	2300      	movs	r3, #0
  4033e6:	4601      	mov	r1, r0
  4033e8:	461a      	mov	r2, r3
  4033ea:	4618      	mov	r0, r3
  4033ec:	f001 bf94 	b.w	405318 <__register_exitproc>

004033f0 <quorem>:
  4033f0:	6902      	ldr	r2, [r0, #16]
  4033f2:	690b      	ldr	r3, [r1, #16]
  4033f4:	4293      	cmp	r3, r2
  4033f6:	f300 808d 	bgt.w	403514 <quorem+0x124>
  4033fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4033fe:	f103 38ff 	add.w	r8, r3, #4294967295
  403402:	f101 0714 	add.w	r7, r1, #20
  403406:	f100 0b14 	add.w	fp, r0, #20
  40340a:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  40340e:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  403412:	ea4f 0488 	mov.w	r4, r8, lsl #2
  403416:	b083      	sub	sp, #12
  403418:	3201      	adds	r2, #1
  40341a:	fbb3 f9f2 	udiv	r9, r3, r2
  40341e:	eb0b 0304 	add.w	r3, fp, r4
  403422:	9400      	str	r4, [sp, #0]
  403424:	eb07 0a04 	add.w	sl, r7, r4
  403428:	9301      	str	r3, [sp, #4]
  40342a:	f1b9 0f00 	cmp.w	r9, #0
  40342e:	d039      	beq.n	4034a4 <quorem+0xb4>
  403430:	2500      	movs	r5, #0
  403432:	462e      	mov	r6, r5
  403434:	46bc      	mov	ip, r7
  403436:	46de      	mov	lr, fp
  403438:	f85c 4b04 	ldr.w	r4, [ip], #4
  40343c:	f8de 3000 	ldr.w	r3, [lr]
  403440:	b2a2      	uxth	r2, r4
  403442:	fb09 5502 	mla	r5, r9, r2, r5
  403446:	0c22      	lsrs	r2, r4, #16
  403448:	0c2c      	lsrs	r4, r5, #16
  40344a:	fb09 4202 	mla	r2, r9, r2, r4
  40344e:	b2ad      	uxth	r5, r5
  403450:	1b75      	subs	r5, r6, r5
  403452:	b296      	uxth	r6, r2
  403454:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  403458:	fa15 f383 	uxtah	r3, r5, r3
  40345c:	eb06 4623 	add.w	r6, r6, r3, asr #16
  403460:	b29b      	uxth	r3, r3
  403462:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  403466:	45e2      	cmp	sl, ip
  403468:	ea4f 4512 	mov.w	r5, r2, lsr #16
  40346c:	f84e 3b04 	str.w	r3, [lr], #4
  403470:	ea4f 4626 	mov.w	r6, r6, asr #16
  403474:	d2e0      	bcs.n	403438 <quorem+0x48>
  403476:	9b00      	ldr	r3, [sp, #0]
  403478:	f85b 3003 	ldr.w	r3, [fp, r3]
  40347c:	b993      	cbnz	r3, 4034a4 <quorem+0xb4>
  40347e:	9c01      	ldr	r4, [sp, #4]
  403480:	1f23      	subs	r3, r4, #4
  403482:	459b      	cmp	fp, r3
  403484:	d20c      	bcs.n	4034a0 <quorem+0xb0>
  403486:	f854 3c04 	ldr.w	r3, [r4, #-4]
  40348a:	b94b      	cbnz	r3, 4034a0 <quorem+0xb0>
  40348c:	f1a4 0308 	sub.w	r3, r4, #8
  403490:	e002      	b.n	403498 <quorem+0xa8>
  403492:	681a      	ldr	r2, [r3, #0]
  403494:	3b04      	subs	r3, #4
  403496:	b91a      	cbnz	r2, 4034a0 <quorem+0xb0>
  403498:	459b      	cmp	fp, r3
  40349a:	f108 38ff 	add.w	r8, r8, #4294967295
  40349e:	d3f8      	bcc.n	403492 <quorem+0xa2>
  4034a0:	f8c0 8010 	str.w	r8, [r0, #16]
  4034a4:	4604      	mov	r4, r0
  4034a6:	f001 fd37 	bl	404f18 <__mcmp>
  4034aa:	2800      	cmp	r0, #0
  4034ac:	db2e      	blt.n	40350c <quorem+0x11c>
  4034ae:	f109 0901 	add.w	r9, r9, #1
  4034b2:	465d      	mov	r5, fp
  4034b4:	2300      	movs	r3, #0
  4034b6:	f857 1b04 	ldr.w	r1, [r7], #4
  4034ba:	6828      	ldr	r0, [r5, #0]
  4034bc:	b28a      	uxth	r2, r1
  4034be:	1a9a      	subs	r2, r3, r2
  4034c0:	0c0b      	lsrs	r3, r1, #16
  4034c2:	fa12 f280 	uxtah	r2, r2, r0
  4034c6:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  4034ca:	eb03 4322 	add.w	r3, r3, r2, asr #16
  4034ce:	b292      	uxth	r2, r2
  4034d0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  4034d4:	45ba      	cmp	sl, r7
  4034d6:	f845 2b04 	str.w	r2, [r5], #4
  4034da:	ea4f 4323 	mov.w	r3, r3, asr #16
  4034de:	d2ea      	bcs.n	4034b6 <quorem+0xc6>
  4034e0:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  4034e4:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  4034e8:	b982      	cbnz	r2, 40350c <quorem+0x11c>
  4034ea:	1f1a      	subs	r2, r3, #4
  4034ec:	4593      	cmp	fp, r2
  4034ee:	d20b      	bcs.n	403508 <quorem+0x118>
  4034f0:	f853 2c04 	ldr.w	r2, [r3, #-4]
  4034f4:	b942      	cbnz	r2, 403508 <quorem+0x118>
  4034f6:	3b08      	subs	r3, #8
  4034f8:	e002      	b.n	403500 <quorem+0x110>
  4034fa:	681a      	ldr	r2, [r3, #0]
  4034fc:	3b04      	subs	r3, #4
  4034fe:	b91a      	cbnz	r2, 403508 <quorem+0x118>
  403500:	459b      	cmp	fp, r3
  403502:	f108 38ff 	add.w	r8, r8, #4294967295
  403506:	d3f8      	bcc.n	4034fa <quorem+0x10a>
  403508:	f8c4 8010 	str.w	r8, [r4, #16]
  40350c:	4648      	mov	r0, r9
  40350e:	b003      	add	sp, #12
  403510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403514:	2000      	movs	r0, #0
  403516:	4770      	bx	lr

00403518 <_dtoa_r>:
  403518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40351c:	6c01      	ldr	r1, [r0, #64]	; 0x40
  40351e:	b09b      	sub	sp, #108	; 0x6c
  403520:	4604      	mov	r4, r0
  403522:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  403524:	4692      	mov	sl, r2
  403526:	469b      	mov	fp, r3
  403528:	b141      	cbz	r1, 40353c <_dtoa_r+0x24>
  40352a:	6c42      	ldr	r2, [r0, #68]	; 0x44
  40352c:	604a      	str	r2, [r1, #4]
  40352e:	2301      	movs	r3, #1
  403530:	4093      	lsls	r3, r2
  403532:	608b      	str	r3, [r1, #8]
  403534:	f001 fb18 	bl	404b68 <_Bfree>
  403538:	2300      	movs	r3, #0
  40353a:	6423      	str	r3, [r4, #64]	; 0x40
  40353c:	f1bb 0f00 	cmp.w	fp, #0
  403540:	465d      	mov	r5, fp
  403542:	db35      	blt.n	4035b0 <_dtoa_r+0x98>
  403544:	2300      	movs	r3, #0
  403546:	6033      	str	r3, [r6, #0]
  403548:	4b9d      	ldr	r3, [pc, #628]	; (4037c0 <_dtoa_r+0x2a8>)
  40354a:	43ab      	bics	r3, r5
  40354c:	d015      	beq.n	40357a <_dtoa_r+0x62>
  40354e:	4650      	mov	r0, sl
  403550:	4659      	mov	r1, fp
  403552:	2200      	movs	r2, #0
  403554:	2300      	movs	r3, #0
  403556:	f002 fef5 	bl	406344 <__aeabi_dcmpeq>
  40355a:	4680      	mov	r8, r0
  40355c:	2800      	cmp	r0, #0
  40355e:	d02d      	beq.n	4035bc <_dtoa_r+0xa4>
  403560:	9a26      	ldr	r2, [sp, #152]	; 0x98
  403562:	2301      	movs	r3, #1
  403564:	6013      	str	r3, [r2, #0]
  403566:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  403568:	2b00      	cmp	r3, #0
  40356a:	f000 80bd 	beq.w	4036e8 <_dtoa_r+0x1d0>
  40356e:	4895      	ldr	r0, [pc, #596]	; (4037c4 <_dtoa_r+0x2ac>)
  403570:	6018      	str	r0, [r3, #0]
  403572:	3801      	subs	r0, #1
  403574:	b01b      	add	sp, #108	; 0x6c
  403576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40357a:	9a26      	ldr	r2, [sp, #152]	; 0x98
  40357c:	f242 730f 	movw	r3, #9999	; 0x270f
  403580:	6013      	str	r3, [r2, #0]
  403582:	f1ba 0f00 	cmp.w	sl, #0
  403586:	d10d      	bne.n	4035a4 <_dtoa_r+0x8c>
  403588:	f3c5 0513 	ubfx	r5, r5, #0, #20
  40358c:	b955      	cbnz	r5, 4035a4 <_dtoa_r+0x8c>
  40358e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  403590:	488d      	ldr	r0, [pc, #564]	; (4037c8 <_dtoa_r+0x2b0>)
  403592:	2b00      	cmp	r3, #0
  403594:	d0ee      	beq.n	403574 <_dtoa_r+0x5c>
  403596:	f100 0308 	add.w	r3, r0, #8
  40359a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  40359c:	6013      	str	r3, [r2, #0]
  40359e:	b01b      	add	sp, #108	; 0x6c
  4035a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4035a4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  4035a6:	4889      	ldr	r0, [pc, #548]	; (4037cc <_dtoa_r+0x2b4>)
  4035a8:	2b00      	cmp	r3, #0
  4035aa:	d0e3      	beq.n	403574 <_dtoa_r+0x5c>
  4035ac:	1cc3      	adds	r3, r0, #3
  4035ae:	e7f4      	b.n	40359a <_dtoa_r+0x82>
  4035b0:	2301      	movs	r3, #1
  4035b2:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  4035b6:	6033      	str	r3, [r6, #0]
  4035b8:	46ab      	mov	fp, r5
  4035ba:	e7c5      	b.n	403548 <_dtoa_r+0x30>
  4035bc:	aa18      	add	r2, sp, #96	; 0x60
  4035be:	ab19      	add	r3, sp, #100	; 0x64
  4035c0:	9201      	str	r2, [sp, #4]
  4035c2:	9300      	str	r3, [sp, #0]
  4035c4:	4652      	mov	r2, sl
  4035c6:	465b      	mov	r3, fp
  4035c8:	4620      	mov	r0, r4
  4035ca:	f001 fd45 	bl	405058 <__d2b>
  4035ce:	0d2b      	lsrs	r3, r5, #20
  4035d0:	4681      	mov	r9, r0
  4035d2:	d071      	beq.n	4036b8 <_dtoa_r+0x1a0>
  4035d4:	f3cb 0213 	ubfx	r2, fp, #0, #20
  4035d8:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  4035dc:	9f18      	ldr	r7, [sp, #96]	; 0x60
  4035de:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  4035e2:	4650      	mov	r0, sl
  4035e4:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  4035e8:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  4035ec:	2200      	movs	r2, #0
  4035ee:	4b78      	ldr	r3, [pc, #480]	; (4037d0 <_dtoa_r+0x2b8>)
  4035f0:	f002 fa8c 	bl	405b0c <__aeabi_dsub>
  4035f4:	a36c      	add	r3, pc, #432	; (adr r3, 4037a8 <_dtoa_r+0x290>)
  4035f6:	e9d3 2300 	ldrd	r2, r3, [r3]
  4035fa:	f002 fc3b 	bl	405e74 <__aeabi_dmul>
  4035fe:	a36c      	add	r3, pc, #432	; (adr r3, 4037b0 <_dtoa_r+0x298>)
  403600:	e9d3 2300 	ldrd	r2, r3, [r3]
  403604:	f002 fa84 	bl	405b10 <__adddf3>
  403608:	e9cd 0102 	strd	r0, r1, [sp, #8]
  40360c:	4630      	mov	r0, r6
  40360e:	f002 fbcb 	bl	405da8 <__aeabi_i2d>
  403612:	a369      	add	r3, pc, #420	; (adr r3, 4037b8 <_dtoa_r+0x2a0>)
  403614:	e9d3 2300 	ldrd	r2, r3, [r3]
  403618:	f002 fc2c 	bl	405e74 <__aeabi_dmul>
  40361c:	4602      	mov	r2, r0
  40361e:	460b      	mov	r3, r1
  403620:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  403624:	f002 fa74 	bl	405b10 <__adddf3>
  403628:	e9cd 0104 	strd	r0, r1, [sp, #16]
  40362c:	f002 fed2 	bl	4063d4 <__aeabi_d2iz>
  403630:	2200      	movs	r2, #0
  403632:	9002      	str	r0, [sp, #8]
  403634:	2300      	movs	r3, #0
  403636:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40363a:	f002 fe8d 	bl	406358 <__aeabi_dcmplt>
  40363e:	2800      	cmp	r0, #0
  403640:	f040 8173 	bne.w	40392a <_dtoa_r+0x412>
  403644:	9d02      	ldr	r5, [sp, #8]
  403646:	2d16      	cmp	r5, #22
  403648:	f200 815d 	bhi.w	403906 <_dtoa_r+0x3ee>
  40364c:	4b61      	ldr	r3, [pc, #388]	; (4037d4 <_dtoa_r+0x2bc>)
  40364e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  403652:	e9d3 0100 	ldrd	r0, r1, [r3]
  403656:	4652      	mov	r2, sl
  403658:	465b      	mov	r3, fp
  40365a:	f002 fe9b 	bl	406394 <__aeabi_dcmpgt>
  40365e:	2800      	cmp	r0, #0
  403660:	f000 81c5 	beq.w	4039ee <_dtoa_r+0x4d6>
  403664:	1e6b      	subs	r3, r5, #1
  403666:	9302      	str	r3, [sp, #8]
  403668:	2300      	movs	r3, #0
  40366a:	930e      	str	r3, [sp, #56]	; 0x38
  40366c:	1bbf      	subs	r7, r7, r6
  40366e:	1e7b      	subs	r3, r7, #1
  403670:	9306      	str	r3, [sp, #24]
  403672:	f100 8154 	bmi.w	40391e <_dtoa_r+0x406>
  403676:	2300      	movs	r3, #0
  403678:	9308      	str	r3, [sp, #32]
  40367a:	9b02      	ldr	r3, [sp, #8]
  40367c:	2b00      	cmp	r3, #0
  40367e:	f2c0 8145 	blt.w	40390c <_dtoa_r+0x3f4>
  403682:	9a06      	ldr	r2, [sp, #24]
  403684:	930d      	str	r3, [sp, #52]	; 0x34
  403686:	4611      	mov	r1, r2
  403688:	4419      	add	r1, r3
  40368a:	2300      	movs	r3, #0
  40368c:	9106      	str	r1, [sp, #24]
  40368e:	930c      	str	r3, [sp, #48]	; 0x30
  403690:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403692:	2b09      	cmp	r3, #9
  403694:	d82a      	bhi.n	4036ec <_dtoa_r+0x1d4>
  403696:	2b05      	cmp	r3, #5
  403698:	f340 865b 	ble.w	404352 <_dtoa_r+0xe3a>
  40369c:	3b04      	subs	r3, #4
  40369e:	9324      	str	r3, [sp, #144]	; 0x90
  4036a0:	2500      	movs	r5, #0
  4036a2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4036a4:	3b02      	subs	r3, #2
  4036a6:	2b03      	cmp	r3, #3
  4036a8:	f200 8642 	bhi.w	404330 <_dtoa_r+0xe18>
  4036ac:	e8df f013 	tbh	[pc, r3, lsl #1]
  4036b0:	02c903d4 	.word	0x02c903d4
  4036b4:	046103df 	.word	0x046103df
  4036b8:	9f18      	ldr	r7, [sp, #96]	; 0x60
  4036ba:	9e19      	ldr	r6, [sp, #100]	; 0x64
  4036bc:	443e      	add	r6, r7
  4036be:	f206 4332 	addw	r3, r6, #1074	; 0x432
  4036c2:	2b20      	cmp	r3, #32
  4036c4:	f340 818e 	ble.w	4039e4 <_dtoa_r+0x4cc>
  4036c8:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  4036cc:	f206 4012 	addw	r0, r6, #1042	; 0x412
  4036d0:	409d      	lsls	r5, r3
  4036d2:	fa2a f000 	lsr.w	r0, sl, r0
  4036d6:	4328      	orrs	r0, r5
  4036d8:	f002 fb56 	bl	405d88 <__aeabi_ui2d>
  4036dc:	2301      	movs	r3, #1
  4036de:	3e01      	subs	r6, #1
  4036e0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  4036e4:	9314      	str	r3, [sp, #80]	; 0x50
  4036e6:	e781      	b.n	4035ec <_dtoa_r+0xd4>
  4036e8:	483b      	ldr	r0, [pc, #236]	; (4037d8 <_dtoa_r+0x2c0>)
  4036ea:	e743      	b.n	403574 <_dtoa_r+0x5c>
  4036ec:	2100      	movs	r1, #0
  4036ee:	6461      	str	r1, [r4, #68]	; 0x44
  4036f0:	4620      	mov	r0, r4
  4036f2:	9125      	str	r1, [sp, #148]	; 0x94
  4036f4:	f001 fa12 	bl	404b1c <_Balloc>
  4036f8:	f04f 33ff 	mov.w	r3, #4294967295
  4036fc:	930a      	str	r3, [sp, #40]	; 0x28
  4036fe:	9a25      	ldr	r2, [sp, #148]	; 0x94
  403700:	930f      	str	r3, [sp, #60]	; 0x3c
  403702:	2301      	movs	r3, #1
  403704:	9004      	str	r0, [sp, #16]
  403706:	6420      	str	r0, [r4, #64]	; 0x40
  403708:	9224      	str	r2, [sp, #144]	; 0x90
  40370a:	930b      	str	r3, [sp, #44]	; 0x2c
  40370c:	9b19      	ldr	r3, [sp, #100]	; 0x64
  40370e:	2b00      	cmp	r3, #0
  403710:	f2c0 80d9 	blt.w	4038c6 <_dtoa_r+0x3ae>
  403714:	9a02      	ldr	r2, [sp, #8]
  403716:	2a0e      	cmp	r2, #14
  403718:	f300 80d5 	bgt.w	4038c6 <_dtoa_r+0x3ae>
  40371c:	4b2d      	ldr	r3, [pc, #180]	; (4037d4 <_dtoa_r+0x2bc>)
  40371e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  403722:	e9d3 2300 	ldrd	r2, r3, [r3]
  403726:	e9cd 2308 	strd	r2, r3, [sp, #32]
  40372a:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40372c:	2b00      	cmp	r3, #0
  40372e:	f2c0 83ba 	blt.w	403ea6 <_dtoa_r+0x98e>
  403732:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  403736:	4650      	mov	r0, sl
  403738:	462a      	mov	r2, r5
  40373a:	4633      	mov	r3, r6
  40373c:	4659      	mov	r1, fp
  40373e:	f002 fcc3 	bl	4060c8 <__aeabi_ddiv>
  403742:	f002 fe47 	bl	4063d4 <__aeabi_d2iz>
  403746:	4680      	mov	r8, r0
  403748:	f002 fb2e 	bl	405da8 <__aeabi_i2d>
  40374c:	462a      	mov	r2, r5
  40374e:	4633      	mov	r3, r6
  403750:	f002 fb90 	bl	405e74 <__aeabi_dmul>
  403754:	460b      	mov	r3, r1
  403756:	4602      	mov	r2, r0
  403758:	4659      	mov	r1, fp
  40375a:	4650      	mov	r0, sl
  40375c:	f002 f9d6 	bl	405b0c <__aeabi_dsub>
  403760:	9d04      	ldr	r5, [sp, #16]
  403762:	f108 0330 	add.w	r3, r8, #48	; 0x30
  403766:	702b      	strb	r3, [r5, #0]
  403768:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40376a:	2b01      	cmp	r3, #1
  40376c:	4606      	mov	r6, r0
  40376e:	460f      	mov	r7, r1
  403770:	f105 0501 	add.w	r5, r5, #1
  403774:	d068      	beq.n	403848 <_dtoa_r+0x330>
  403776:	2200      	movs	r2, #0
  403778:	4b18      	ldr	r3, [pc, #96]	; (4037dc <_dtoa_r+0x2c4>)
  40377a:	f002 fb7b 	bl	405e74 <__aeabi_dmul>
  40377e:	2200      	movs	r2, #0
  403780:	2300      	movs	r3, #0
  403782:	4606      	mov	r6, r0
  403784:	460f      	mov	r7, r1
  403786:	f002 fddd 	bl	406344 <__aeabi_dcmpeq>
  40378a:	2800      	cmp	r0, #0
  40378c:	f040 8088 	bne.w	4038a0 <_dtoa_r+0x388>
  403790:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  403794:	f04f 0a00 	mov.w	sl, #0
  403798:	f8df b040 	ldr.w	fp, [pc, #64]	; 4037dc <_dtoa_r+0x2c4>
  40379c:	940c      	str	r4, [sp, #48]	; 0x30
  40379e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  4037a2:	e028      	b.n	4037f6 <_dtoa_r+0x2de>
  4037a4:	f3af 8000 	nop.w
  4037a8:	636f4361 	.word	0x636f4361
  4037ac:	3fd287a7 	.word	0x3fd287a7
  4037b0:	8b60c8b3 	.word	0x8b60c8b3
  4037b4:	3fc68a28 	.word	0x3fc68a28
  4037b8:	509f79fb 	.word	0x509f79fb
  4037bc:	3fd34413 	.word	0x3fd34413
  4037c0:	7ff00000 	.word	0x7ff00000
  4037c4:	004071ed 	.word	0x004071ed
  4037c8:	00407210 	.word	0x00407210
  4037cc:	0040721c 	.word	0x0040721c
  4037d0:	3ff80000 	.word	0x3ff80000
  4037d4:	00407248 	.word	0x00407248
  4037d8:	004071ec 	.word	0x004071ec
  4037dc:	40240000 	.word	0x40240000
  4037e0:	f002 fb48 	bl	405e74 <__aeabi_dmul>
  4037e4:	2200      	movs	r2, #0
  4037e6:	2300      	movs	r3, #0
  4037e8:	4606      	mov	r6, r0
  4037ea:	460f      	mov	r7, r1
  4037ec:	f002 fdaa 	bl	406344 <__aeabi_dcmpeq>
  4037f0:	2800      	cmp	r0, #0
  4037f2:	f040 83c1 	bne.w	403f78 <_dtoa_r+0xa60>
  4037f6:	4642      	mov	r2, r8
  4037f8:	464b      	mov	r3, r9
  4037fa:	4630      	mov	r0, r6
  4037fc:	4639      	mov	r1, r7
  4037fe:	f002 fc63 	bl	4060c8 <__aeabi_ddiv>
  403802:	f002 fde7 	bl	4063d4 <__aeabi_d2iz>
  403806:	4604      	mov	r4, r0
  403808:	f002 face 	bl	405da8 <__aeabi_i2d>
  40380c:	4642      	mov	r2, r8
  40380e:	464b      	mov	r3, r9
  403810:	f002 fb30 	bl	405e74 <__aeabi_dmul>
  403814:	4602      	mov	r2, r0
  403816:	460b      	mov	r3, r1
  403818:	4630      	mov	r0, r6
  40381a:	4639      	mov	r1, r7
  40381c:	f002 f976 	bl	405b0c <__aeabi_dsub>
  403820:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  403824:	9e04      	ldr	r6, [sp, #16]
  403826:	f805 eb01 	strb.w	lr, [r5], #1
  40382a:	eba5 0e06 	sub.w	lr, r5, r6
  40382e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  403830:	45b6      	cmp	lr, r6
  403832:	e9cd 0106 	strd	r0, r1, [sp, #24]
  403836:	4652      	mov	r2, sl
  403838:	465b      	mov	r3, fp
  40383a:	d1d1      	bne.n	4037e0 <_dtoa_r+0x2c8>
  40383c:	46a0      	mov	r8, r4
  40383e:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  403842:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  403844:	4606      	mov	r6, r0
  403846:	460f      	mov	r7, r1
  403848:	4632      	mov	r2, r6
  40384a:	463b      	mov	r3, r7
  40384c:	4630      	mov	r0, r6
  40384e:	4639      	mov	r1, r7
  403850:	f002 f95e 	bl	405b10 <__adddf3>
  403854:	4606      	mov	r6, r0
  403856:	460f      	mov	r7, r1
  403858:	4602      	mov	r2, r0
  40385a:	460b      	mov	r3, r1
  40385c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  403860:	f002 fd7a 	bl	406358 <__aeabi_dcmplt>
  403864:	b948      	cbnz	r0, 40387a <_dtoa_r+0x362>
  403866:	4632      	mov	r2, r6
  403868:	463b      	mov	r3, r7
  40386a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  40386e:	f002 fd69 	bl	406344 <__aeabi_dcmpeq>
  403872:	b1a8      	cbz	r0, 4038a0 <_dtoa_r+0x388>
  403874:	f018 0f01 	tst.w	r8, #1
  403878:	d012      	beq.n	4038a0 <_dtoa_r+0x388>
  40387a:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  40387e:	9a04      	ldr	r2, [sp, #16]
  403880:	1e6b      	subs	r3, r5, #1
  403882:	e004      	b.n	40388e <_dtoa_r+0x376>
  403884:	429a      	cmp	r2, r3
  403886:	f000 8401 	beq.w	40408c <_dtoa_r+0xb74>
  40388a:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  40388e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  403892:	f103 0501 	add.w	r5, r3, #1
  403896:	d0f5      	beq.n	403884 <_dtoa_r+0x36c>
  403898:	f108 0801 	add.w	r8, r8, #1
  40389c:	f883 8000 	strb.w	r8, [r3]
  4038a0:	4649      	mov	r1, r9
  4038a2:	4620      	mov	r0, r4
  4038a4:	f001 f960 	bl	404b68 <_Bfree>
  4038a8:	2200      	movs	r2, #0
  4038aa:	9b02      	ldr	r3, [sp, #8]
  4038ac:	702a      	strb	r2, [r5, #0]
  4038ae:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4038b0:	3301      	adds	r3, #1
  4038b2:	6013      	str	r3, [r2, #0]
  4038b4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  4038b6:	2b00      	cmp	r3, #0
  4038b8:	f000 839e 	beq.w	403ff8 <_dtoa_r+0xae0>
  4038bc:	9804      	ldr	r0, [sp, #16]
  4038be:	601d      	str	r5, [r3, #0]
  4038c0:	b01b      	add	sp, #108	; 0x6c
  4038c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4038c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4038c8:	2a00      	cmp	r2, #0
  4038ca:	d03e      	beq.n	40394a <_dtoa_r+0x432>
  4038cc:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4038ce:	2a01      	cmp	r2, #1
  4038d0:	f340 8311 	ble.w	403ef6 <_dtoa_r+0x9de>
  4038d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4038d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4038d8:	1e5f      	subs	r7, r3, #1
  4038da:	42ba      	cmp	r2, r7
  4038dc:	f2c0 838f 	blt.w	403ffe <_dtoa_r+0xae6>
  4038e0:	1bd7      	subs	r7, r2, r7
  4038e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4038e4:	2b00      	cmp	r3, #0
  4038e6:	f2c0 848b 	blt.w	404200 <_dtoa_r+0xce8>
  4038ea:	9d08      	ldr	r5, [sp, #32]
  4038ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4038ee:	9a08      	ldr	r2, [sp, #32]
  4038f0:	441a      	add	r2, r3
  4038f2:	9208      	str	r2, [sp, #32]
  4038f4:	9a06      	ldr	r2, [sp, #24]
  4038f6:	2101      	movs	r1, #1
  4038f8:	441a      	add	r2, r3
  4038fa:	4620      	mov	r0, r4
  4038fc:	9206      	str	r2, [sp, #24]
  4038fe:	f001 f9cd 	bl	404c9c <__i2b>
  403902:	4606      	mov	r6, r0
  403904:	e024      	b.n	403950 <_dtoa_r+0x438>
  403906:	2301      	movs	r3, #1
  403908:	930e      	str	r3, [sp, #56]	; 0x38
  40390a:	e6af      	b.n	40366c <_dtoa_r+0x154>
  40390c:	9a08      	ldr	r2, [sp, #32]
  40390e:	9b02      	ldr	r3, [sp, #8]
  403910:	1ad2      	subs	r2, r2, r3
  403912:	425b      	negs	r3, r3
  403914:	930c      	str	r3, [sp, #48]	; 0x30
  403916:	2300      	movs	r3, #0
  403918:	9208      	str	r2, [sp, #32]
  40391a:	930d      	str	r3, [sp, #52]	; 0x34
  40391c:	e6b8      	b.n	403690 <_dtoa_r+0x178>
  40391e:	f1c7 0301 	rsb	r3, r7, #1
  403922:	9308      	str	r3, [sp, #32]
  403924:	2300      	movs	r3, #0
  403926:	9306      	str	r3, [sp, #24]
  403928:	e6a7      	b.n	40367a <_dtoa_r+0x162>
  40392a:	9d02      	ldr	r5, [sp, #8]
  40392c:	4628      	mov	r0, r5
  40392e:	f002 fa3b 	bl	405da8 <__aeabi_i2d>
  403932:	4602      	mov	r2, r0
  403934:	460b      	mov	r3, r1
  403936:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  40393a:	f002 fd03 	bl	406344 <__aeabi_dcmpeq>
  40393e:	2800      	cmp	r0, #0
  403940:	f47f ae80 	bne.w	403644 <_dtoa_r+0x12c>
  403944:	1e6b      	subs	r3, r5, #1
  403946:	9302      	str	r3, [sp, #8]
  403948:	e67c      	b.n	403644 <_dtoa_r+0x12c>
  40394a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  40394c:	9d08      	ldr	r5, [sp, #32]
  40394e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  403950:	2d00      	cmp	r5, #0
  403952:	dd0c      	ble.n	40396e <_dtoa_r+0x456>
  403954:	9906      	ldr	r1, [sp, #24]
  403956:	2900      	cmp	r1, #0
  403958:	460b      	mov	r3, r1
  40395a:	dd08      	ble.n	40396e <_dtoa_r+0x456>
  40395c:	42a9      	cmp	r1, r5
  40395e:	9a08      	ldr	r2, [sp, #32]
  403960:	bfa8      	it	ge
  403962:	462b      	movge	r3, r5
  403964:	1ad2      	subs	r2, r2, r3
  403966:	1aed      	subs	r5, r5, r3
  403968:	1acb      	subs	r3, r1, r3
  40396a:	9208      	str	r2, [sp, #32]
  40396c:	9306      	str	r3, [sp, #24]
  40396e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  403970:	b1d3      	cbz	r3, 4039a8 <_dtoa_r+0x490>
  403972:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  403974:	2b00      	cmp	r3, #0
  403976:	f000 82b7 	beq.w	403ee8 <_dtoa_r+0x9d0>
  40397a:	2f00      	cmp	r7, #0
  40397c:	dd10      	ble.n	4039a0 <_dtoa_r+0x488>
  40397e:	4631      	mov	r1, r6
  403980:	463a      	mov	r2, r7
  403982:	4620      	mov	r0, r4
  403984:	f001 fa26 	bl	404dd4 <__pow5mult>
  403988:	464a      	mov	r2, r9
  40398a:	4601      	mov	r1, r0
  40398c:	4606      	mov	r6, r0
  40398e:	4620      	mov	r0, r4
  403990:	f001 f98e 	bl	404cb0 <__multiply>
  403994:	4649      	mov	r1, r9
  403996:	4680      	mov	r8, r0
  403998:	4620      	mov	r0, r4
  40399a:	f001 f8e5 	bl	404b68 <_Bfree>
  40399e:	46c1      	mov	r9, r8
  4039a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4039a2:	1bda      	subs	r2, r3, r7
  4039a4:	f040 82a1 	bne.w	403eea <_dtoa_r+0x9d2>
  4039a8:	2101      	movs	r1, #1
  4039aa:	4620      	mov	r0, r4
  4039ac:	f001 f976 	bl	404c9c <__i2b>
  4039b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4039b2:	2b00      	cmp	r3, #0
  4039b4:	4680      	mov	r8, r0
  4039b6:	dd1c      	ble.n	4039f2 <_dtoa_r+0x4da>
  4039b8:	4601      	mov	r1, r0
  4039ba:	461a      	mov	r2, r3
  4039bc:	4620      	mov	r0, r4
  4039be:	f001 fa09 	bl	404dd4 <__pow5mult>
  4039c2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4039c4:	2b01      	cmp	r3, #1
  4039c6:	4680      	mov	r8, r0
  4039c8:	f340 8254 	ble.w	403e74 <_dtoa_r+0x95c>
  4039cc:	2300      	movs	r3, #0
  4039ce:	930c      	str	r3, [sp, #48]	; 0x30
  4039d0:	f8d8 3010 	ldr.w	r3, [r8, #16]
  4039d4:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  4039d8:	6918      	ldr	r0, [r3, #16]
  4039da:	f001 f90f 	bl	404bfc <__hi0bits>
  4039de:	f1c0 0020 	rsb	r0, r0, #32
  4039e2:	e010      	b.n	403a06 <_dtoa_r+0x4ee>
  4039e4:	f1c3 0520 	rsb	r5, r3, #32
  4039e8:	fa0a f005 	lsl.w	r0, sl, r5
  4039ec:	e674      	b.n	4036d8 <_dtoa_r+0x1c0>
  4039ee:	900e      	str	r0, [sp, #56]	; 0x38
  4039f0:	e63c      	b.n	40366c <_dtoa_r+0x154>
  4039f2:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4039f4:	2b01      	cmp	r3, #1
  4039f6:	f340 8287 	ble.w	403f08 <_dtoa_r+0x9f0>
  4039fa:	2300      	movs	r3, #0
  4039fc:	930c      	str	r3, [sp, #48]	; 0x30
  4039fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403a00:	2001      	movs	r0, #1
  403a02:	2b00      	cmp	r3, #0
  403a04:	d1e4      	bne.n	4039d0 <_dtoa_r+0x4b8>
  403a06:	9a06      	ldr	r2, [sp, #24]
  403a08:	4410      	add	r0, r2
  403a0a:	f010 001f 	ands.w	r0, r0, #31
  403a0e:	f000 80a1 	beq.w	403b54 <_dtoa_r+0x63c>
  403a12:	f1c0 0320 	rsb	r3, r0, #32
  403a16:	2b04      	cmp	r3, #4
  403a18:	f340 849e 	ble.w	404358 <_dtoa_r+0xe40>
  403a1c:	9b08      	ldr	r3, [sp, #32]
  403a1e:	f1c0 001c 	rsb	r0, r0, #28
  403a22:	4403      	add	r3, r0
  403a24:	9308      	str	r3, [sp, #32]
  403a26:	4613      	mov	r3, r2
  403a28:	4403      	add	r3, r0
  403a2a:	4405      	add	r5, r0
  403a2c:	9306      	str	r3, [sp, #24]
  403a2e:	9b08      	ldr	r3, [sp, #32]
  403a30:	2b00      	cmp	r3, #0
  403a32:	dd05      	ble.n	403a40 <_dtoa_r+0x528>
  403a34:	4649      	mov	r1, r9
  403a36:	461a      	mov	r2, r3
  403a38:	4620      	mov	r0, r4
  403a3a:	f001 fa1b 	bl	404e74 <__lshift>
  403a3e:	4681      	mov	r9, r0
  403a40:	9b06      	ldr	r3, [sp, #24]
  403a42:	2b00      	cmp	r3, #0
  403a44:	dd05      	ble.n	403a52 <_dtoa_r+0x53a>
  403a46:	4641      	mov	r1, r8
  403a48:	461a      	mov	r2, r3
  403a4a:	4620      	mov	r0, r4
  403a4c:	f001 fa12 	bl	404e74 <__lshift>
  403a50:	4680      	mov	r8, r0
  403a52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403a54:	2b00      	cmp	r3, #0
  403a56:	f040 8086 	bne.w	403b66 <_dtoa_r+0x64e>
  403a5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403a5c:	2b00      	cmp	r3, #0
  403a5e:	f340 8266 	ble.w	403f2e <_dtoa_r+0xa16>
  403a62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  403a64:	2b00      	cmp	r3, #0
  403a66:	f000 8098 	beq.w	403b9a <_dtoa_r+0x682>
  403a6a:	2d00      	cmp	r5, #0
  403a6c:	dd05      	ble.n	403a7a <_dtoa_r+0x562>
  403a6e:	4631      	mov	r1, r6
  403a70:	462a      	mov	r2, r5
  403a72:	4620      	mov	r0, r4
  403a74:	f001 f9fe 	bl	404e74 <__lshift>
  403a78:	4606      	mov	r6, r0
  403a7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  403a7c:	2b00      	cmp	r3, #0
  403a7e:	f040 8337 	bne.w	4040f0 <_dtoa_r+0xbd8>
  403a82:	9606      	str	r6, [sp, #24]
  403a84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403a86:	9a04      	ldr	r2, [sp, #16]
  403a88:	f8dd b018 	ldr.w	fp, [sp, #24]
  403a8c:	3b01      	subs	r3, #1
  403a8e:	18d3      	adds	r3, r2, r3
  403a90:	930b      	str	r3, [sp, #44]	; 0x2c
  403a92:	f00a 0301 	and.w	r3, sl, #1
  403a96:	930c      	str	r3, [sp, #48]	; 0x30
  403a98:	4617      	mov	r7, r2
  403a9a:	46c2      	mov	sl, r8
  403a9c:	4651      	mov	r1, sl
  403a9e:	4648      	mov	r0, r9
  403aa0:	f7ff fca6 	bl	4033f0 <quorem>
  403aa4:	4631      	mov	r1, r6
  403aa6:	4605      	mov	r5, r0
  403aa8:	4648      	mov	r0, r9
  403aaa:	f001 fa35 	bl	404f18 <__mcmp>
  403aae:	465a      	mov	r2, fp
  403ab0:	900a      	str	r0, [sp, #40]	; 0x28
  403ab2:	4651      	mov	r1, sl
  403ab4:	4620      	mov	r0, r4
  403ab6:	f001 fa4b 	bl	404f50 <__mdiff>
  403aba:	68c2      	ldr	r2, [r0, #12]
  403abc:	4680      	mov	r8, r0
  403abe:	f105 0330 	add.w	r3, r5, #48	; 0x30
  403ac2:	2a00      	cmp	r2, #0
  403ac4:	f040 822b 	bne.w	403f1e <_dtoa_r+0xa06>
  403ac8:	4601      	mov	r1, r0
  403aca:	4648      	mov	r0, r9
  403acc:	9308      	str	r3, [sp, #32]
  403ace:	f001 fa23 	bl	404f18 <__mcmp>
  403ad2:	4641      	mov	r1, r8
  403ad4:	9006      	str	r0, [sp, #24]
  403ad6:	4620      	mov	r0, r4
  403ad8:	f001 f846 	bl	404b68 <_Bfree>
  403adc:	9a06      	ldr	r2, [sp, #24]
  403ade:	9b08      	ldr	r3, [sp, #32]
  403ae0:	b932      	cbnz	r2, 403af0 <_dtoa_r+0x5d8>
  403ae2:	9924      	ldr	r1, [sp, #144]	; 0x90
  403ae4:	b921      	cbnz	r1, 403af0 <_dtoa_r+0x5d8>
  403ae6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  403ae8:	2a00      	cmp	r2, #0
  403aea:	f000 83ef 	beq.w	4042cc <_dtoa_r+0xdb4>
  403aee:	9a24      	ldr	r2, [sp, #144]	; 0x90
  403af0:	990a      	ldr	r1, [sp, #40]	; 0x28
  403af2:	2900      	cmp	r1, #0
  403af4:	f2c0 829f 	blt.w	404036 <_dtoa_r+0xb1e>
  403af8:	d105      	bne.n	403b06 <_dtoa_r+0x5ee>
  403afa:	9924      	ldr	r1, [sp, #144]	; 0x90
  403afc:	b919      	cbnz	r1, 403b06 <_dtoa_r+0x5ee>
  403afe:	990c      	ldr	r1, [sp, #48]	; 0x30
  403b00:	2900      	cmp	r1, #0
  403b02:	f000 8298 	beq.w	404036 <_dtoa_r+0xb1e>
  403b06:	2a00      	cmp	r2, #0
  403b08:	f300 8306 	bgt.w	404118 <_dtoa_r+0xc00>
  403b0c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  403b0e:	703b      	strb	r3, [r7, #0]
  403b10:	f107 0801 	add.w	r8, r7, #1
  403b14:	4297      	cmp	r7, r2
  403b16:	4645      	mov	r5, r8
  403b18:	f000 830c 	beq.w	404134 <_dtoa_r+0xc1c>
  403b1c:	4649      	mov	r1, r9
  403b1e:	2300      	movs	r3, #0
  403b20:	220a      	movs	r2, #10
  403b22:	4620      	mov	r0, r4
  403b24:	f001 f82a 	bl	404b7c <__multadd>
  403b28:	455e      	cmp	r6, fp
  403b2a:	4681      	mov	r9, r0
  403b2c:	4631      	mov	r1, r6
  403b2e:	f04f 0300 	mov.w	r3, #0
  403b32:	f04f 020a 	mov.w	r2, #10
  403b36:	4620      	mov	r0, r4
  403b38:	f000 81eb 	beq.w	403f12 <_dtoa_r+0x9fa>
  403b3c:	f001 f81e 	bl	404b7c <__multadd>
  403b40:	4659      	mov	r1, fp
  403b42:	4606      	mov	r6, r0
  403b44:	2300      	movs	r3, #0
  403b46:	220a      	movs	r2, #10
  403b48:	4620      	mov	r0, r4
  403b4a:	f001 f817 	bl	404b7c <__multadd>
  403b4e:	4647      	mov	r7, r8
  403b50:	4683      	mov	fp, r0
  403b52:	e7a3      	b.n	403a9c <_dtoa_r+0x584>
  403b54:	201c      	movs	r0, #28
  403b56:	9b08      	ldr	r3, [sp, #32]
  403b58:	4403      	add	r3, r0
  403b5a:	9308      	str	r3, [sp, #32]
  403b5c:	9b06      	ldr	r3, [sp, #24]
  403b5e:	4403      	add	r3, r0
  403b60:	4405      	add	r5, r0
  403b62:	9306      	str	r3, [sp, #24]
  403b64:	e763      	b.n	403a2e <_dtoa_r+0x516>
  403b66:	4641      	mov	r1, r8
  403b68:	4648      	mov	r0, r9
  403b6a:	f001 f9d5 	bl	404f18 <__mcmp>
  403b6e:	2800      	cmp	r0, #0
  403b70:	f6bf af73 	bge.w	403a5a <_dtoa_r+0x542>
  403b74:	9f02      	ldr	r7, [sp, #8]
  403b76:	4649      	mov	r1, r9
  403b78:	2300      	movs	r3, #0
  403b7a:	220a      	movs	r2, #10
  403b7c:	4620      	mov	r0, r4
  403b7e:	3f01      	subs	r7, #1
  403b80:	9702      	str	r7, [sp, #8]
  403b82:	f000 fffb 	bl	404b7c <__multadd>
  403b86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  403b88:	4681      	mov	r9, r0
  403b8a:	2b00      	cmp	r3, #0
  403b8c:	f040 83b6 	bne.w	4042fc <_dtoa_r+0xde4>
  403b90:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  403b92:	2b00      	cmp	r3, #0
  403b94:	f340 83bf 	ble.w	404316 <_dtoa_r+0xdfe>
  403b98:	930a      	str	r3, [sp, #40]	; 0x28
  403b9a:	f8dd b010 	ldr.w	fp, [sp, #16]
  403b9e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  403ba0:	465d      	mov	r5, fp
  403ba2:	e002      	b.n	403baa <_dtoa_r+0x692>
  403ba4:	f000 ffea 	bl	404b7c <__multadd>
  403ba8:	4681      	mov	r9, r0
  403baa:	4641      	mov	r1, r8
  403bac:	4648      	mov	r0, r9
  403bae:	f7ff fc1f 	bl	4033f0 <quorem>
  403bb2:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  403bb6:	f805 ab01 	strb.w	sl, [r5], #1
  403bba:	eba5 030b 	sub.w	r3, r5, fp
  403bbe:	42bb      	cmp	r3, r7
  403bc0:	f04f 020a 	mov.w	r2, #10
  403bc4:	f04f 0300 	mov.w	r3, #0
  403bc8:	4649      	mov	r1, r9
  403bca:	4620      	mov	r0, r4
  403bcc:	dbea      	blt.n	403ba4 <_dtoa_r+0x68c>
  403bce:	9b04      	ldr	r3, [sp, #16]
  403bd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  403bd2:	2a01      	cmp	r2, #1
  403bd4:	bfac      	ite	ge
  403bd6:	189b      	addge	r3, r3, r2
  403bd8:	3301      	addlt	r3, #1
  403bda:	461d      	mov	r5, r3
  403bdc:	f04f 0b00 	mov.w	fp, #0
  403be0:	4649      	mov	r1, r9
  403be2:	2201      	movs	r2, #1
  403be4:	4620      	mov	r0, r4
  403be6:	f001 f945 	bl	404e74 <__lshift>
  403bea:	4641      	mov	r1, r8
  403bec:	4681      	mov	r9, r0
  403bee:	f001 f993 	bl	404f18 <__mcmp>
  403bf2:	2800      	cmp	r0, #0
  403bf4:	f340 823d 	ble.w	404072 <_dtoa_r+0xb5a>
  403bf8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  403bfc:	9904      	ldr	r1, [sp, #16]
  403bfe:	1e6b      	subs	r3, r5, #1
  403c00:	e004      	b.n	403c0c <_dtoa_r+0x6f4>
  403c02:	428b      	cmp	r3, r1
  403c04:	f000 81ae 	beq.w	403f64 <_dtoa_r+0xa4c>
  403c08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  403c0c:	2a39      	cmp	r2, #57	; 0x39
  403c0e:	f103 0501 	add.w	r5, r3, #1
  403c12:	d0f6      	beq.n	403c02 <_dtoa_r+0x6ea>
  403c14:	3201      	adds	r2, #1
  403c16:	701a      	strb	r2, [r3, #0]
  403c18:	4641      	mov	r1, r8
  403c1a:	4620      	mov	r0, r4
  403c1c:	f000 ffa4 	bl	404b68 <_Bfree>
  403c20:	2e00      	cmp	r6, #0
  403c22:	f43f ae3d 	beq.w	4038a0 <_dtoa_r+0x388>
  403c26:	f1bb 0f00 	cmp.w	fp, #0
  403c2a:	d005      	beq.n	403c38 <_dtoa_r+0x720>
  403c2c:	45b3      	cmp	fp, r6
  403c2e:	d003      	beq.n	403c38 <_dtoa_r+0x720>
  403c30:	4659      	mov	r1, fp
  403c32:	4620      	mov	r0, r4
  403c34:	f000 ff98 	bl	404b68 <_Bfree>
  403c38:	4631      	mov	r1, r6
  403c3a:	4620      	mov	r0, r4
  403c3c:	f000 ff94 	bl	404b68 <_Bfree>
  403c40:	e62e      	b.n	4038a0 <_dtoa_r+0x388>
  403c42:	2300      	movs	r3, #0
  403c44:	930b      	str	r3, [sp, #44]	; 0x2c
  403c46:	9b02      	ldr	r3, [sp, #8]
  403c48:	9a25      	ldr	r2, [sp, #148]	; 0x94
  403c4a:	4413      	add	r3, r2
  403c4c:	930f      	str	r3, [sp, #60]	; 0x3c
  403c4e:	3301      	adds	r3, #1
  403c50:	2b01      	cmp	r3, #1
  403c52:	461f      	mov	r7, r3
  403c54:	461e      	mov	r6, r3
  403c56:	930a      	str	r3, [sp, #40]	; 0x28
  403c58:	bfb8      	it	lt
  403c5a:	2701      	movlt	r7, #1
  403c5c:	2100      	movs	r1, #0
  403c5e:	2f17      	cmp	r7, #23
  403c60:	6461      	str	r1, [r4, #68]	; 0x44
  403c62:	d90a      	bls.n	403c7a <_dtoa_r+0x762>
  403c64:	2201      	movs	r2, #1
  403c66:	2304      	movs	r3, #4
  403c68:	005b      	lsls	r3, r3, #1
  403c6a:	f103 0014 	add.w	r0, r3, #20
  403c6e:	4287      	cmp	r7, r0
  403c70:	4611      	mov	r1, r2
  403c72:	f102 0201 	add.w	r2, r2, #1
  403c76:	d2f7      	bcs.n	403c68 <_dtoa_r+0x750>
  403c78:	6461      	str	r1, [r4, #68]	; 0x44
  403c7a:	4620      	mov	r0, r4
  403c7c:	f000 ff4e 	bl	404b1c <_Balloc>
  403c80:	2e0e      	cmp	r6, #14
  403c82:	9004      	str	r0, [sp, #16]
  403c84:	6420      	str	r0, [r4, #64]	; 0x40
  403c86:	f63f ad41 	bhi.w	40370c <_dtoa_r+0x1f4>
  403c8a:	2d00      	cmp	r5, #0
  403c8c:	f43f ad3e 	beq.w	40370c <_dtoa_r+0x1f4>
  403c90:	9902      	ldr	r1, [sp, #8]
  403c92:	2900      	cmp	r1, #0
  403c94:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  403c98:	f340 8202 	ble.w	4040a0 <_dtoa_r+0xb88>
  403c9c:	4bb8      	ldr	r3, [pc, #736]	; (403f80 <_dtoa_r+0xa68>)
  403c9e:	f001 020f 	and.w	r2, r1, #15
  403ca2:	110d      	asrs	r5, r1, #4
  403ca4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  403ca8:	06e9      	lsls	r1, r5, #27
  403caa:	e9d3 6700 	ldrd	r6, r7, [r3]
  403cae:	f140 81ae 	bpl.w	40400e <_dtoa_r+0xaf6>
  403cb2:	4bb4      	ldr	r3, [pc, #720]	; (403f84 <_dtoa_r+0xa6c>)
  403cb4:	4650      	mov	r0, sl
  403cb6:	4659      	mov	r1, fp
  403cb8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  403cbc:	f002 fa04 	bl	4060c8 <__aeabi_ddiv>
  403cc0:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  403cc4:	f005 050f 	and.w	r5, r5, #15
  403cc8:	f04f 0a03 	mov.w	sl, #3
  403ccc:	b18d      	cbz	r5, 403cf2 <_dtoa_r+0x7da>
  403cce:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 403f84 <_dtoa_r+0xa6c>
  403cd2:	07ea      	lsls	r2, r5, #31
  403cd4:	d509      	bpl.n	403cea <_dtoa_r+0x7d2>
  403cd6:	4630      	mov	r0, r6
  403cd8:	4639      	mov	r1, r7
  403cda:	e9d8 2300 	ldrd	r2, r3, [r8]
  403cde:	f002 f8c9 	bl	405e74 <__aeabi_dmul>
  403ce2:	f10a 0a01 	add.w	sl, sl, #1
  403ce6:	4606      	mov	r6, r0
  403ce8:	460f      	mov	r7, r1
  403cea:	106d      	asrs	r5, r5, #1
  403cec:	f108 0808 	add.w	r8, r8, #8
  403cf0:	d1ef      	bne.n	403cd2 <_dtoa_r+0x7ba>
  403cf2:	463b      	mov	r3, r7
  403cf4:	4632      	mov	r2, r6
  403cf6:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  403cfa:	f002 f9e5 	bl	4060c8 <__aeabi_ddiv>
  403cfe:	4607      	mov	r7, r0
  403d00:	4688      	mov	r8, r1
  403d02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  403d04:	b143      	cbz	r3, 403d18 <_dtoa_r+0x800>
  403d06:	2200      	movs	r2, #0
  403d08:	4b9f      	ldr	r3, [pc, #636]	; (403f88 <_dtoa_r+0xa70>)
  403d0a:	4638      	mov	r0, r7
  403d0c:	4641      	mov	r1, r8
  403d0e:	f002 fb23 	bl	406358 <__aeabi_dcmplt>
  403d12:	2800      	cmp	r0, #0
  403d14:	f040 8286 	bne.w	404224 <_dtoa_r+0xd0c>
  403d18:	4650      	mov	r0, sl
  403d1a:	f002 f845 	bl	405da8 <__aeabi_i2d>
  403d1e:	463a      	mov	r2, r7
  403d20:	4643      	mov	r3, r8
  403d22:	f002 f8a7 	bl	405e74 <__aeabi_dmul>
  403d26:	4b99      	ldr	r3, [pc, #612]	; (403f8c <_dtoa_r+0xa74>)
  403d28:	2200      	movs	r2, #0
  403d2a:	f001 fef1 	bl	405b10 <__adddf3>
  403d2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403d30:	4605      	mov	r5, r0
  403d32:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  403d36:	2b00      	cmp	r3, #0
  403d38:	f000 813e 	beq.w	403fb8 <_dtoa_r+0xaa0>
  403d3c:	9b02      	ldr	r3, [sp, #8]
  403d3e:	9315      	str	r3, [sp, #84]	; 0x54
  403d40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403d42:	9312      	str	r3, [sp, #72]	; 0x48
  403d44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  403d46:	2b00      	cmp	r3, #0
  403d48:	f000 81fa 	beq.w	404140 <_dtoa_r+0xc28>
  403d4c:	9a12      	ldr	r2, [sp, #72]	; 0x48
  403d4e:	4b8c      	ldr	r3, [pc, #560]	; (403f80 <_dtoa_r+0xa68>)
  403d50:	498f      	ldr	r1, [pc, #572]	; (403f90 <_dtoa_r+0xa78>)
  403d52:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  403d56:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  403d5a:	2000      	movs	r0, #0
  403d5c:	f002 f9b4 	bl	4060c8 <__aeabi_ddiv>
  403d60:	462a      	mov	r2, r5
  403d62:	4633      	mov	r3, r6
  403d64:	f001 fed2 	bl	405b0c <__aeabi_dsub>
  403d68:	4682      	mov	sl, r0
  403d6a:	468b      	mov	fp, r1
  403d6c:	4638      	mov	r0, r7
  403d6e:	4641      	mov	r1, r8
  403d70:	f002 fb30 	bl	4063d4 <__aeabi_d2iz>
  403d74:	4605      	mov	r5, r0
  403d76:	f002 f817 	bl	405da8 <__aeabi_i2d>
  403d7a:	4602      	mov	r2, r0
  403d7c:	460b      	mov	r3, r1
  403d7e:	4638      	mov	r0, r7
  403d80:	4641      	mov	r1, r8
  403d82:	f001 fec3 	bl	405b0c <__aeabi_dsub>
  403d86:	3530      	adds	r5, #48	; 0x30
  403d88:	fa5f f885 	uxtb.w	r8, r5
  403d8c:	9d04      	ldr	r5, [sp, #16]
  403d8e:	4606      	mov	r6, r0
  403d90:	460f      	mov	r7, r1
  403d92:	f885 8000 	strb.w	r8, [r5]
  403d96:	4602      	mov	r2, r0
  403d98:	460b      	mov	r3, r1
  403d9a:	4650      	mov	r0, sl
  403d9c:	4659      	mov	r1, fp
  403d9e:	3501      	adds	r5, #1
  403da0:	f002 faf8 	bl	406394 <__aeabi_dcmpgt>
  403da4:	2800      	cmp	r0, #0
  403da6:	d154      	bne.n	403e52 <_dtoa_r+0x93a>
  403da8:	4632      	mov	r2, r6
  403daa:	463b      	mov	r3, r7
  403dac:	2000      	movs	r0, #0
  403dae:	4976      	ldr	r1, [pc, #472]	; (403f88 <_dtoa_r+0xa70>)
  403db0:	f001 feac 	bl	405b0c <__aeabi_dsub>
  403db4:	4602      	mov	r2, r0
  403db6:	460b      	mov	r3, r1
  403db8:	4650      	mov	r0, sl
  403dba:	4659      	mov	r1, fp
  403dbc:	f002 faea 	bl	406394 <__aeabi_dcmpgt>
  403dc0:	2800      	cmp	r0, #0
  403dc2:	f040 8270 	bne.w	4042a6 <_dtoa_r+0xd8e>
  403dc6:	9a12      	ldr	r2, [sp, #72]	; 0x48
  403dc8:	2a01      	cmp	r2, #1
  403dca:	f000 8111 	beq.w	403ff0 <_dtoa_r+0xad8>
  403dce:	9b12      	ldr	r3, [sp, #72]	; 0x48
  403dd0:	9a04      	ldr	r2, [sp, #16]
  403dd2:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  403dd6:	4413      	add	r3, r2
  403dd8:	4699      	mov	r9, r3
  403dda:	e00d      	b.n	403df8 <_dtoa_r+0x8e0>
  403ddc:	2000      	movs	r0, #0
  403dde:	496a      	ldr	r1, [pc, #424]	; (403f88 <_dtoa_r+0xa70>)
  403de0:	f001 fe94 	bl	405b0c <__aeabi_dsub>
  403de4:	4652      	mov	r2, sl
  403de6:	465b      	mov	r3, fp
  403de8:	f002 fab6 	bl	406358 <__aeabi_dcmplt>
  403dec:	2800      	cmp	r0, #0
  403dee:	f040 8258 	bne.w	4042a2 <_dtoa_r+0xd8a>
  403df2:	454d      	cmp	r5, r9
  403df4:	f000 80fa 	beq.w	403fec <_dtoa_r+0xad4>
  403df8:	4650      	mov	r0, sl
  403dfa:	4659      	mov	r1, fp
  403dfc:	2200      	movs	r2, #0
  403dfe:	4b65      	ldr	r3, [pc, #404]	; (403f94 <_dtoa_r+0xa7c>)
  403e00:	f002 f838 	bl	405e74 <__aeabi_dmul>
  403e04:	2200      	movs	r2, #0
  403e06:	4b63      	ldr	r3, [pc, #396]	; (403f94 <_dtoa_r+0xa7c>)
  403e08:	4682      	mov	sl, r0
  403e0a:	468b      	mov	fp, r1
  403e0c:	4630      	mov	r0, r6
  403e0e:	4639      	mov	r1, r7
  403e10:	f002 f830 	bl	405e74 <__aeabi_dmul>
  403e14:	460f      	mov	r7, r1
  403e16:	4606      	mov	r6, r0
  403e18:	f002 fadc 	bl	4063d4 <__aeabi_d2iz>
  403e1c:	4680      	mov	r8, r0
  403e1e:	f001 ffc3 	bl	405da8 <__aeabi_i2d>
  403e22:	4602      	mov	r2, r0
  403e24:	460b      	mov	r3, r1
  403e26:	4630      	mov	r0, r6
  403e28:	4639      	mov	r1, r7
  403e2a:	f001 fe6f 	bl	405b0c <__aeabi_dsub>
  403e2e:	f108 0830 	add.w	r8, r8, #48	; 0x30
  403e32:	fa5f f888 	uxtb.w	r8, r8
  403e36:	4652      	mov	r2, sl
  403e38:	465b      	mov	r3, fp
  403e3a:	f805 8b01 	strb.w	r8, [r5], #1
  403e3e:	4606      	mov	r6, r0
  403e40:	460f      	mov	r7, r1
  403e42:	f002 fa89 	bl	406358 <__aeabi_dcmplt>
  403e46:	4632      	mov	r2, r6
  403e48:	463b      	mov	r3, r7
  403e4a:	2800      	cmp	r0, #0
  403e4c:	d0c6      	beq.n	403ddc <_dtoa_r+0x8c4>
  403e4e:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  403e52:	9b15      	ldr	r3, [sp, #84]	; 0x54
  403e54:	9302      	str	r3, [sp, #8]
  403e56:	e523      	b.n	4038a0 <_dtoa_r+0x388>
  403e58:	2300      	movs	r3, #0
  403e5a:	930b      	str	r3, [sp, #44]	; 0x2c
  403e5c:	9b25      	ldr	r3, [sp, #148]	; 0x94
  403e5e:	2b00      	cmp	r3, #0
  403e60:	f340 80dc 	ble.w	40401c <_dtoa_r+0xb04>
  403e64:	461f      	mov	r7, r3
  403e66:	461e      	mov	r6, r3
  403e68:	930f      	str	r3, [sp, #60]	; 0x3c
  403e6a:	930a      	str	r3, [sp, #40]	; 0x28
  403e6c:	e6f6      	b.n	403c5c <_dtoa_r+0x744>
  403e6e:	2301      	movs	r3, #1
  403e70:	930b      	str	r3, [sp, #44]	; 0x2c
  403e72:	e7f3      	b.n	403e5c <_dtoa_r+0x944>
  403e74:	f1ba 0f00 	cmp.w	sl, #0
  403e78:	f47f ada8 	bne.w	4039cc <_dtoa_r+0x4b4>
  403e7c:	f3cb 0313 	ubfx	r3, fp, #0, #20
  403e80:	2b00      	cmp	r3, #0
  403e82:	f47f adba 	bne.w	4039fa <_dtoa_r+0x4e2>
  403e86:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  403e8a:	0d3f      	lsrs	r7, r7, #20
  403e8c:	053f      	lsls	r7, r7, #20
  403e8e:	2f00      	cmp	r7, #0
  403e90:	f000 820d 	beq.w	4042ae <_dtoa_r+0xd96>
  403e94:	9b08      	ldr	r3, [sp, #32]
  403e96:	3301      	adds	r3, #1
  403e98:	9308      	str	r3, [sp, #32]
  403e9a:	9b06      	ldr	r3, [sp, #24]
  403e9c:	3301      	adds	r3, #1
  403e9e:	9306      	str	r3, [sp, #24]
  403ea0:	2301      	movs	r3, #1
  403ea2:	930c      	str	r3, [sp, #48]	; 0x30
  403ea4:	e5ab      	b.n	4039fe <_dtoa_r+0x4e6>
  403ea6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403ea8:	2b00      	cmp	r3, #0
  403eaa:	f73f ac42 	bgt.w	403732 <_dtoa_r+0x21a>
  403eae:	f040 8221 	bne.w	4042f4 <_dtoa_r+0xddc>
  403eb2:	2200      	movs	r2, #0
  403eb4:	4b38      	ldr	r3, [pc, #224]	; (403f98 <_dtoa_r+0xa80>)
  403eb6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  403eba:	f001 ffdb 	bl	405e74 <__aeabi_dmul>
  403ebe:	4652      	mov	r2, sl
  403ec0:	465b      	mov	r3, fp
  403ec2:	f002 fa5d 	bl	406380 <__aeabi_dcmpge>
  403ec6:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  403eca:	4646      	mov	r6, r8
  403ecc:	2800      	cmp	r0, #0
  403ece:	d041      	beq.n	403f54 <_dtoa_r+0xa3c>
  403ed0:	9b25      	ldr	r3, [sp, #148]	; 0x94
  403ed2:	9d04      	ldr	r5, [sp, #16]
  403ed4:	43db      	mvns	r3, r3
  403ed6:	9302      	str	r3, [sp, #8]
  403ed8:	4641      	mov	r1, r8
  403eda:	4620      	mov	r0, r4
  403edc:	f000 fe44 	bl	404b68 <_Bfree>
  403ee0:	2e00      	cmp	r6, #0
  403ee2:	f43f acdd 	beq.w	4038a0 <_dtoa_r+0x388>
  403ee6:	e6a7      	b.n	403c38 <_dtoa_r+0x720>
  403ee8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  403eea:	4649      	mov	r1, r9
  403eec:	4620      	mov	r0, r4
  403eee:	f000 ff71 	bl	404dd4 <__pow5mult>
  403ef2:	4681      	mov	r9, r0
  403ef4:	e558      	b.n	4039a8 <_dtoa_r+0x490>
  403ef6:	9a14      	ldr	r2, [sp, #80]	; 0x50
  403ef8:	2a00      	cmp	r2, #0
  403efa:	f000 8187 	beq.w	40420c <_dtoa_r+0xcf4>
  403efe:	f203 4333 	addw	r3, r3, #1075	; 0x433
  403f02:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  403f04:	9d08      	ldr	r5, [sp, #32]
  403f06:	e4f2      	b.n	4038ee <_dtoa_r+0x3d6>
  403f08:	f1ba 0f00 	cmp.w	sl, #0
  403f0c:	f47f ad75 	bne.w	4039fa <_dtoa_r+0x4e2>
  403f10:	e7b4      	b.n	403e7c <_dtoa_r+0x964>
  403f12:	f000 fe33 	bl	404b7c <__multadd>
  403f16:	4647      	mov	r7, r8
  403f18:	4606      	mov	r6, r0
  403f1a:	4683      	mov	fp, r0
  403f1c:	e5be      	b.n	403a9c <_dtoa_r+0x584>
  403f1e:	4601      	mov	r1, r0
  403f20:	4620      	mov	r0, r4
  403f22:	9306      	str	r3, [sp, #24]
  403f24:	f000 fe20 	bl	404b68 <_Bfree>
  403f28:	2201      	movs	r2, #1
  403f2a:	9b06      	ldr	r3, [sp, #24]
  403f2c:	e5e0      	b.n	403af0 <_dtoa_r+0x5d8>
  403f2e:	9b24      	ldr	r3, [sp, #144]	; 0x90
  403f30:	2b02      	cmp	r3, #2
  403f32:	f77f ad96 	ble.w	403a62 <_dtoa_r+0x54a>
  403f36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  403f38:	2b00      	cmp	r3, #0
  403f3a:	d1c9      	bne.n	403ed0 <_dtoa_r+0x9b8>
  403f3c:	4641      	mov	r1, r8
  403f3e:	2205      	movs	r2, #5
  403f40:	4620      	mov	r0, r4
  403f42:	f000 fe1b 	bl	404b7c <__multadd>
  403f46:	4601      	mov	r1, r0
  403f48:	4680      	mov	r8, r0
  403f4a:	4648      	mov	r0, r9
  403f4c:	f000 ffe4 	bl	404f18 <__mcmp>
  403f50:	2800      	cmp	r0, #0
  403f52:	ddbd      	ble.n	403ed0 <_dtoa_r+0x9b8>
  403f54:	9a02      	ldr	r2, [sp, #8]
  403f56:	9904      	ldr	r1, [sp, #16]
  403f58:	2331      	movs	r3, #49	; 0x31
  403f5a:	3201      	adds	r2, #1
  403f5c:	9202      	str	r2, [sp, #8]
  403f5e:	700b      	strb	r3, [r1, #0]
  403f60:	1c4d      	adds	r5, r1, #1
  403f62:	e7b9      	b.n	403ed8 <_dtoa_r+0x9c0>
  403f64:	9a02      	ldr	r2, [sp, #8]
  403f66:	3201      	adds	r2, #1
  403f68:	9202      	str	r2, [sp, #8]
  403f6a:	9a04      	ldr	r2, [sp, #16]
  403f6c:	2331      	movs	r3, #49	; 0x31
  403f6e:	7013      	strb	r3, [r2, #0]
  403f70:	e652      	b.n	403c18 <_dtoa_r+0x700>
  403f72:	2301      	movs	r3, #1
  403f74:	930b      	str	r3, [sp, #44]	; 0x2c
  403f76:	e666      	b.n	403c46 <_dtoa_r+0x72e>
  403f78:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  403f7c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  403f7e:	e48f      	b.n	4038a0 <_dtoa_r+0x388>
  403f80:	00407248 	.word	0x00407248
  403f84:	00407220 	.word	0x00407220
  403f88:	3ff00000 	.word	0x3ff00000
  403f8c:	401c0000 	.word	0x401c0000
  403f90:	3fe00000 	.word	0x3fe00000
  403f94:	40240000 	.word	0x40240000
  403f98:	40140000 	.word	0x40140000
  403f9c:	4650      	mov	r0, sl
  403f9e:	f001 ff03 	bl	405da8 <__aeabi_i2d>
  403fa2:	463a      	mov	r2, r7
  403fa4:	4643      	mov	r3, r8
  403fa6:	f001 ff65 	bl	405e74 <__aeabi_dmul>
  403faa:	2200      	movs	r2, #0
  403fac:	4bc1      	ldr	r3, [pc, #772]	; (4042b4 <_dtoa_r+0xd9c>)
  403fae:	f001 fdaf 	bl	405b10 <__adddf3>
  403fb2:	4605      	mov	r5, r0
  403fb4:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  403fb8:	4641      	mov	r1, r8
  403fba:	2200      	movs	r2, #0
  403fbc:	4bbe      	ldr	r3, [pc, #760]	; (4042b8 <_dtoa_r+0xda0>)
  403fbe:	4638      	mov	r0, r7
  403fc0:	f001 fda4 	bl	405b0c <__aeabi_dsub>
  403fc4:	462a      	mov	r2, r5
  403fc6:	4633      	mov	r3, r6
  403fc8:	4682      	mov	sl, r0
  403fca:	468b      	mov	fp, r1
  403fcc:	f002 f9e2 	bl	406394 <__aeabi_dcmpgt>
  403fd0:	4680      	mov	r8, r0
  403fd2:	2800      	cmp	r0, #0
  403fd4:	f040 8110 	bne.w	4041f8 <_dtoa_r+0xce0>
  403fd8:	462a      	mov	r2, r5
  403fda:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  403fde:	4650      	mov	r0, sl
  403fe0:	4659      	mov	r1, fp
  403fe2:	f002 f9b9 	bl	406358 <__aeabi_dcmplt>
  403fe6:	b118      	cbz	r0, 403ff0 <_dtoa_r+0xad8>
  403fe8:	4646      	mov	r6, r8
  403fea:	e771      	b.n	403ed0 <_dtoa_r+0x9b8>
  403fec:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  403ff0:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  403ff4:	f7ff bb8a 	b.w	40370c <_dtoa_r+0x1f4>
  403ff8:	9804      	ldr	r0, [sp, #16]
  403ffa:	f7ff babb 	b.w	403574 <_dtoa_r+0x5c>
  403ffe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  404000:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  404002:	970c      	str	r7, [sp, #48]	; 0x30
  404004:	1afb      	subs	r3, r7, r3
  404006:	441a      	add	r2, r3
  404008:	920d      	str	r2, [sp, #52]	; 0x34
  40400a:	2700      	movs	r7, #0
  40400c:	e469      	b.n	4038e2 <_dtoa_r+0x3ca>
  40400e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  404012:	f04f 0a02 	mov.w	sl, #2
  404016:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  40401a:	e657      	b.n	403ccc <_dtoa_r+0x7b4>
  40401c:	2100      	movs	r1, #0
  40401e:	2301      	movs	r3, #1
  404020:	6461      	str	r1, [r4, #68]	; 0x44
  404022:	4620      	mov	r0, r4
  404024:	9325      	str	r3, [sp, #148]	; 0x94
  404026:	f000 fd79 	bl	404b1c <_Balloc>
  40402a:	9b25      	ldr	r3, [sp, #148]	; 0x94
  40402c:	9004      	str	r0, [sp, #16]
  40402e:	6420      	str	r0, [r4, #64]	; 0x40
  404030:	930a      	str	r3, [sp, #40]	; 0x28
  404032:	930f      	str	r3, [sp, #60]	; 0x3c
  404034:	e629      	b.n	403c8a <_dtoa_r+0x772>
  404036:	2a00      	cmp	r2, #0
  404038:	46d0      	mov	r8, sl
  40403a:	f8cd b018 	str.w	fp, [sp, #24]
  40403e:	469a      	mov	sl, r3
  404040:	dd11      	ble.n	404066 <_dtoa_r+0xb4e>
  404042:	4649      	mov	r1, r9
  404044:	2201      	movs	r2, #1
  404046:	4620      	mov	r0, r4
  404048:	f000 ff14 	bl	404e74 <__lshift>
  40404c:	4641      	mov	r1, r8
  40404e:	4681      	mov	r9, r0
  404050:	f000 ff62 	bl	404f18 <__mcmp>
  404054:	2800      	cmp	r0, #0
  404056:	f340 8146 	ble.w	4042e6 <_dtoa_r+0xdce>
  40405a:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  40405e:	f000 8106 	beq.w	40426e <_dtoa_r+0xd56>
  404062:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  404066:	46b3      	mov	fp, r6
  404068:	f887 a000 	strb.w	sl, [r7]
  40406c:	1c7d      	adds	r5, r7, #1
  40406e:	9e06      	ldr	r6, [sp, #24]
  404070:	e5d2      	b.n	403c18 <_dtoa_r+0x700>
  404072:	d104      	bne.n	40407e <_dtoa_r+0xb66>
  404074:	f01a 0f01 	tst.w	sl, #1
  404078:	d001      	beq.n	40407e <_dtoa_r+0xb66>
  40407a:	e5bd      	b.n	403bf8 <_dtoa_r+0x6e0>
  40407c:	4615      	mov	r5, r2
  40407e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  404082:	2b30      	cmp	r3, #48	; 0x30
  404084:	f105 32ff 	add.w	r2, r5, #4294967295
  404088:	d0f8      	beq.n	40407c <_dtoa_r+0xb64>
  40408a:	e5c5      	b.n	403c18 <_dtoa_r+0x700>
  40408c:	9904      	ldr	r1, [sp, #16]
  40408e:	2230      	movs	r2, #48	; 0x30
  404090:	700a      	strb	r2, [r1, #0]
  404092:	9a02      	ldr	r2, [sp, #8]
  404094:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  404098:	3201      	adds	r2, #1
  40409a:	9202      	str	r2, [sp, #8]
  40409c:	f7ff bbfc 	b.w	403898 <_dtoa_r+0x380>
  4040a0:	f000 80bb 	beq.w	40421a <_dtoa_r+0xd02>
  4040a4:	9b02      	ldr	r3, [sp, #8]
  4040a6:	425d      	negs	r5, r3
  4040a8:	4b84      	ldr	r3, [pc, #528]	; (4042bc <_dtoa_r+0xda4>)
  4040aa:	f005 020f 	and.w	r2, r5, #15
  4040ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  4040b2:	e9d3 2300 	ldrd	r2, r3, [r3]
  4040b6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  4040ba:	f001 fedb 	bl	405e74 <__aeabi_dmul>
  4040be:	112d      	asrs	r5, r5, #4
  4040c0:	4607      	mov	r7, r0
  4040c2:	4688      	mov	r8, r1
  4040c4:	f000 812c 	beq.w	404320 <_dtoa_r+0xe08>
  4040c8:	4e7d      	ldr	r6, [pc, #500]	; (4042c0 <_dtoa_r+0xda8>)
  4040ca:	f04f 0a02 	mov.w	sl, #2
  4040ce:	07eb      	lsls	r3, r5, #31
  4040d0:	d509      	bpl.n	4040e6 <_dtoa_r+0xbce>
  4040d2:	4638      	mov	r0, r7
  4040d4:	4641      	mov	r1, r8
  4040d6:	e9d6 2300 	ldrd	r2, r3, [r6]
  4040da:	f001 fecb 	bl	405e74 <__aeabi_dmul>
  4040de:	f10a 0a01 	add.w	sl, sl, #1
  4040e2:	4607      	mov	r7, r0
  4040e4:	4688      	mov	r8, r1
  4040e6:	106d      	asrs	r5, r5, #1
  4040e8:	f106 0608 	add.w	r6, r6, #8
  4040ec:	d1ef      	bne.n	4040ce <_dtoa_r+0xbb6>
  4040ee:	e608      	b.n	403d02 <_dtoa_r+0x7ea>
  4040f0:	6871      	ldr	r1, [r6, #4]
  4040f2:	4620      	mov	r0, r4
  4040f4:	f000 fd12 	bl	404b1c <_Balloc>
  4040f8:	6933      	ldr	r3, [r6, #16]
  4040fa:	3302      	adds	r3, #2
  4040fc:	009a      	lsls	r2, r3, #2
  4040fe:	4605      	mov	r5, r0
  404100:	f106 010c 	add.w	r1, r6, #12
  404104:	300c      	adds	r0, #12
  404106:	f000 fc63 	bl	4049d0 <memcpy>
  40410a:	4629      	mov	r1, r5
  40410c:	2201      	movs	r2, #1
  40410e:	4620      	mov	r0, r4
  404110:	f000 feb0 	bl	404e74 <__lshift>
  404114:	9006      	str	r0, [sp, #24]
  404116:	e4b5      	b.n	403a84 <_dtoa_r+0x56c>
  404118:	2b39      	cmp	r3, #57	; 0x39
  40411a:	f8cd b018 	str.w	fp, [sp, #24]
  40411e:	46d0      	mov	r8, sl
  404120:	f000 80a5 	beq.w	40426e <_dtoa_r+0xd56>
  404124:	f103 0a01 	add.w	sl, r3, #1
  404128:	46b3      	mov	fp, r6
  40412a:	f887 a000 	strb.w	sl, [r7]
  40412e:	1c7d      	adds	r5, r7, #1
  404130:	9e06      	ldr	r6, [sp, #24]
  404132:	e571      	b.n	403c18 <_dtoa_r+0x700>
  404134:	465a      	mov	r2, fp
  404136:	46d0      	mov	r8, sl
  404138:	46b3      	mov	fp, r6
  40413a:	469a      	mov	sl, r3
  40413c:	4616      	mov	r6, r2
  40413e:	e54f      	b.n	403be0 <_dtoa_r+0x6c8>
  404140:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404142:	495e      	ldr	r1, [pc, #376]	; (4042bc <_dtoa_r+0xda4>)
  404144:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  404148:	462a      	mov	r2, r5
  40414a:	4633      	mov	r3, r6
  40414c:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  404150:	f001 fe90 	bl	405e74 <__aeabi_dmul>
  404154:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  404158:	4638      	mov	r0, r7
  40415a:	4641      	mov	r1, r8
  40415c:	f002 f93a 	bl	4063d4 <__aeabi_d2iz>
  404160:	4605      	mov	r5, r0
  404162:	f001 fe21 	bl	405da8 <__aeabi_i2d>
  404166:	460b      	mov	r3, r1
  404168:	4602      	mov	r2, r0
  40416a:	4641      	mov	r1, r8
  40416c:	4638      	mov	r0, r7
  40416e:	f001 fccd 	bl	405b0c <__aeabi_dsub>
  404172:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404174:	460f      	mov	r7, r1
  404176:	9904      	ldr	r1, [sp, #16]
  404178:	3530      	adds	r5, #48	; 0x30
  40417a:	2b01      	cmp	r3, #1
  40417c:	700d      	strb	r5, [r1, #0]
  40417e:	4606      	mov	r6, r0
  404180:	f101 0501 	add.w	r5, r1, #1
  404184:	d026      	beq.n	4041d4 <_dtoa_r+0xcbc>
  404186:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404188:	9a04      	ldr	r2, [sp, #16]
  40418a:	f8df b13c 	ldr.w	fp, [pc, #316]	; 4042c8 <_dtoa_r+0xdb0>
  40418e:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  404192:	4413      	add	r3, r2
  404194:	f04f 0a00 	mov.w	sl, #0
  404198:	4699      	mov	r9, r3
  40419a:	4652      	mov	r2, sl
  40419c:	465b      	mov	r3, fp
  40419e:	4630      	mov	r0, r6
  4041a0:	4639      	mov	r1, r7
  4041a2:	f001 fe67 	bl	405e74 <__aeabi_dmul>
  4041a6:	460f      	mov	r7, r1
  4041a8:	4606      	mov	r6, r0
  4041aa:	f002 f913 	bl	4063d4 <__aeabi_d2iz>
  4041ae:	4680      	mov	r8, r0
  4041b0:	f001 fdfa 	bl	405da8 <__aeabi_i2d>
  4041b4:	f108 0830 	add.w	r8, r8, #48	; 0x30
  4041b8:	4602      	mov	r2, r0
  4041ba:	460b      	mov	r3, r1
  4041bc:	4630      	mov	r0, r6
  4041be:	4639      	mov	r1, r7
  4041c0:	f001 fca4 	bl	405b0c <__aeabi_dsub>
  4041c4:	f805 8b01 	strb.w	r8, [r5], #1
  4041c8:	454d      	cmp	r5, r9
  4041ca:	4606      	mov	r6, r0
  4041cc:	460f      	mov	r7, r1
  4041ce:	d1e4      	bne.n	40419a <_dtoa_r+0xc82>
  4041d0:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  4041d4:	4b3b      	ldr	r3, [pc, #236]	; (4042c4 <_dtoa_r+0xdac>)
  4041d6:	2200      	movs	r2, #0
  4041d8:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  4041dc:	f001 fc98 	bl	405b10 <__adddf3>
  4041e0:	4632      	mov	r2, r6
  4041e2:	463b      	mov	r3, r7
  4041e4:	f002 f8b8 	bl	406358 <__aeabi_dcmplt>
  4041e8:	2800      	cmp	r0, #0
  4041ea:	d046      	beq.n	40427a <_dtoa_r+0xd62>
  4041ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4041ee:	9302      	str	r3, [sp, #8]
  4041f0:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  4041f4:	f7ff bb43 	b.w	40387e <_dtoa_r+0x366>
  4041f8:	f04f 0800 	mov.w	r8, #0
  4041fc:	4646      	mov	r6, r8
  4041fe:	e6a9      	b.n	403f54 <_dtoa_r+0xa3c>
  404200:	9b08      	ldr	r3, [sp, #32]
  404202:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  404204:	1a9d      	subs	r5, r3, r2
  404206:	2300      	movs	r3, #0
  404208:	f7ff bb71 	b.w	4038ee <_dtoa_r+0x3d6>
  40420c:	9b18      	ldr	r3, [sp, #96]	; 0x60
  40420e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  404210:	9d08      	ldr	r5, [sp, #32]
  404212:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  404216:	f7ff bb6a 	b.w	4038ee <_dtoa_r+0x3d6>
  40421a:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  40421e:	f04f 0a02 	mov.w	sl, #2
  404222:	e56e      	b.n	403d02 <_dtoa_r+0x7ea>
  404224:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404226:	2b00      	cmp	r3, #0
  404228:	f43f aeb8 	beq.w	403f9c <_dtoa_r+0xa84>
  40422c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40422e:	2b00      	cmp	r3, #0
  404230:	f77f aede 	ble.w	403ff0 <_dtoa_r+0xad8>
  404234:	2200      	movs	r2, #0
  404236:	4b24      	ldr	r3, [pc, #144]	; (4042c8 <_dtoa_r+0xdb0>)
  404238:	4638      	mov	r0, r7
  40423a:	4641      	mov	r1, r8
  40423c:	f001 fe1a 	bl	405e74 <__aeabi_dmul>
  404240:	4607      	mov	r7, r0
  404242:	4688      	mov	r8, r1
  404244:	f10a 0001 	add.w	r0, sl, #1
  404248:	f001 fdae 	bl	405da8 <__aeabi_i2d>
  40424c:	463a      	mov	r2, r7
  40424e:	4643      	mov	r3, r8
  404250:	f001 fe10 	bl	405e74 <__aeabi_dmul>
  404254:	2200      	movs	r2, #0
  404256:	4b17      	ldr	r3, [pc, #92]	; (4042b4 <_dtoa_r+0xd9c>)
  404258:	f001 fc5a 	bl	405b10 <__adddf3>
  40425c:	9a02      	ldr	r2, [sp, #8]
  40425e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  404260:	9312      	str	r3, [sp, #72]	; 0x48
  404262:	3a01      	subs	r2, #1
  404264:	4605      	mov	r5, r0
  404266:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  40426a:	9215      	str	r2, [sp, #84]	; 0x54
  40426c:	e56a      	b.n	403d44 <_dtoa_r+0x82c>
  40426e:	2239      	movs	r2, #57	; 0x39
  404270:	46b3      	mov	fp, r6
  404272:	703a      	strb	r2, [r7, #0]
  404274:	9e06      	ldr	r6, [sp, #24]
  404276:	1c7d      	adds	r5, r7, #1
  404278:	e4c0      	b.n	403bfc <_dtoa_r+0x6e4>
  40427a:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  40427e:	2000      	movs	r0, #0
  404280:	4910      	ldr	r1, [pc, #64]	; (4042c4 <_dtoa_r+0xdac>)
  404282:	f001 fc43 	bl	405b0c <__aeabi_dsub>
  404286:	4632      	mov	r2, r6
  404288:	463b      	mov	r3, r7
  40428a:	f002 f883 	bl	406394 <__aeabi_dcmpgt>
  40428e:	b908      	cbnz	r0, 404294 <_dtoa_r+0xd7c>
  404290:	e6ae      	b.n	403ff0 <_dtoa_r+0xad8>
  404292:	4615      	mov	r5, r2
  404294:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  404298:	2b30      	cmp	r3, #48	; 0x30
  40429a:	f105 32ff 	add.w	r2, r5, #4294967295
  40429e:	d0f8      	beq.n	404292 <_dtoa_r+0xd7a>
  4042a0:	e5d7      	b.n	403e52 <_dtoa_r+0x93a>
  4042a2:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  4042a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4042a8:	9302      	str	r3, [sp, #8]
  4042aa:	f7ff bae8 	b.w	40387e <_dtoa_r+0x366>
  4042ae:	970c      	str	r7, [sp, #48]	; 0x30
  4042b0:	f7ff bba5 	b.w	4039fe <_dtoa_r+0x4e6>
  4042b4:	401c0000 	.word	0x401c0000
  4042b8:	40140000 	.word	0x40140000
  4042bc:	00407248 	.word	0x00407248
  4042c0:	00407220 	.word	0x00407220
  4042c4:	3fe00000 	.word	0x3fe00000
  4042c8:	40240000 	.word	0x40240000
  4042cc:	2b39      	cmp	r3, #57	; 0x39
  4042ce:	f8cd b018 	str.w	fp, [sp, #24]
  4042d2:	46d0      	mov	r8, sl
  4042d4:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  4042d8:	469a      	mov	sl, r3
  4042da:	d0c8      	beq.n	40426e <_dtoa_r+0xd56>
  4042dc:	f1bb 0f00 	cmp.w	fp, #0
  4042e0:	f73f aebf 	bgt.w	404062 <_dtoa_r+0xb4a>
  4042e4:	e6bf      	b.n	404066 <_dtoa_r+0xb4e>
  4042e6:	f47f aebe 	bne.w	404066 <_dtoa_r+0xb4e>
  4042ea:	f01a 0f01 	tst.w	sl, #1
  4042ee:	f43f aeba 	beq.w	404066 <_dtoa_r+0xb4e>
  4042f2:	e6b2      	b.n	40405a <_dtoa_r+0xb42>
  4042f4:	f04f 0800 	mov.w	r8, #0
  4042f8:	4646      	mov	r6, r8
  4042fa:	e5e9      	b.n	403ed0 <_dtoa_r+0x9b8>
  4042fc:	4631      	mov	r1, r6
  4042fe:	2300      	movs	r3, #0
  404300:	220a      	movs	r2, #10
  404302:	4620      	mov	r0, r4
  404304:	f000 fc3a 	bl	404b7c <__multadd>
  404308:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40430a:	2b00      	cmp	r3, #0
  40430c:	4606      	mov	r6, r0
  40430e:	dd0a      	ble.n	404326 <_dtoa_r+0xe0e>
  404310:	930a      	str	r3, [sp, #40]	; 0x28
  404312:	f7ff bbaa 	b.w	403a6a <_dtoa_r+0x552>
  404316:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404318:	2b02      	cmp	r3, #2
  40431a:	dc23      	bgt.n	404364 <_dtoa_r+0xe4c>
  40431c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40431e:	e43b      	b.n	403b98 <_dtoa_r+0x680>
  404320:	f04f 0a02 	mov.w	sl, #2
  404324:	e4ed      	b.n	403d02 <_dtoa_r+0x7ea>
  404326:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404328:	2b02      	cmp	r3, #2
  40432a:	dc1b      	bgt.n	404364 <_dtoa_r+0xe4c>
  40432c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40432e:	e7ef      	b.n	404310 <_dtoa_r+0xdf8>
  404330:	2500      	movs	r5, #0
  404332:	6465      	str	r5, [r4, #68]	; 0x44
  404334:	4629      	mov	r1, r5
  404336:	4620      	mov	r0, r4
  404338:	f000 fbf0 	bl	404b1c <_Balloc>
  40433c:	f04f 33ff 	mov.w	r3, #4294967295
  404340:	930a      	str	r3, [sp, #40]	; 0x28
  404342:	930f      	str	r3, [sp, #60]	; 0x3c
  404344:	2301      	movs	r3, #1
  404346:	9004      	str	r0, [sp, #16]
  404348:	9525      	str	r5, [sp, #148]	; 0x94
  40434a:	6420      	str	r0, [r4, #64]	; 0x40
  40434c:	930b      	str	r3, [sp, #44]	; 0x2c
  40434e:	f7ff b9dd 	b.w	40370c <_dtoa_r+0x1f4>
  404352:	2501      	movs	r5, #1
  404354:	f7ff b9a5 	b.w	4036a2 <_dtoa_r+0x18a>
  404358:	f43f ab69 	beq.w	403a2e <_dtoa_r+0x516>
  40435c:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  404360:	f7ff bbf9 	b.w	403b56 <_dtoa_r+0x63e>
  404364:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  404366:	930a      	str	r3, [sp, #40]	; 0x28
  404368:	e5e5      	b.n	403f36 <_dtoa_r+0xa1e>
  40436a:	bf00      	nop

0040436c <__libc_fini_array>:
  40436c:	b538      	push	{r3, r4, r5, lr}
  40436e:	4c0a      	ldr	r4, [pc, #40]	; (404398 <__libc_fini_array+0x2c>)
  404370:	4d0a      	ldr	r5, [pc, #40]	; (40439c <__libc_fini_array+0x30>)
  404372:	1b64      	subs	r4, r4, r5
  404374:	10a4      	asrs	r4, r4, #2
  404376:	d00a      	beq.n	40438e <__libc_fini_array+0x22>
  404378:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  40437c:	3b01      	subs	r3, #1
  40437e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  404382:	3c01      	subs	r4, #1
  404384:	f855 3904 	ldr.w	r3, [r5], #-4
  404388:	4798      	blx	r3
  40438a:	2c00      	cmp	r4, #0
  40438c:	d1f9      	bne.n	404382 <__libc_fini_array+0x16>
  40438e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  404392:	f003 b857 	b.w	407444 <_fini>
  404396:	bf00      	nop
  404398:	00407454 	.word	0x00407454
  40439c:	00407450 	.word	0x00407450

004043a0 <_localeconv_r>:
  4043a0:	4a04      	ldr	r2, [pc, #16]	; (4043b4 <_localeconv_r+0x14>)
  4043a2:	4b05      	ldr	r3, [pc, #20]	; (4043b8 <_localeconv_r+0x18>)
  4043a4:	6812      	ldr	r2, [r2, #0]
  4043a6:	6b50      	ldr	r0, [r2, #52]	; 0x34
  4043a8:	2800      	cmp	r0, #0
  4043aa:	bf08      	it	eq
  4043ac:	4618      	moveq	r0, r3
  4043ae:	30f0      	adds	r0, #240	; 0xf0
  4043b0:	4770      	bx	lr
  4043b2:	bf00      	nop
  4043b4:	20400020 	.word	0x20400020
  4043b8:	20400864 	.word	0x20400864

004043bc <__retarget_lock_acquire_recursive>:
  4043bc:	4770      	bx	lr
  4043be:	bf00      	nop

004043c0 <__retarget_lock_release_recursive>:
  4043c0:	4770      	bx	lr
  4043c2:	bf00      	nop

004043c4 <_malloc_r>:
  4043c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4043c8:	f101 060b 	add.w	r6, r1, #11
  4043cc:	2e16      	cmp	r6, #22
  4043ce:	b083      	sub	sp, #12
  4043d0:	4605      	mov	r5, r0
  4043d2:	f240 809e 	bls.w	404512 <_malloc_r+0x14e>
  4043d6:	f036 0607 	bics.w	r6, r6, #7
  4043da:	f100 80bd 	bmi.w	404558 <_malloc_r+0x194>
  4043de:	42b1      	cmp	r1, r6
  4043e0:	f200 80ba 	bhi.w	404558 <_malloc_r+0x194>
  4043e4:	f000 fb8e 	bl	404b04 <__malloc_lock>
  4043e8:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  4043ec:	f0c0 8293 	bcc.w	404916 <_malloc_r+0x552>
  4043f0:	0a73      	lsrs	r3, r6, #9
  4043f2:	f000 80b8 	beq.w	404566 <_malloc_r+0x1a2>
  4043f6:	2b04      	cmp	r3, #4
  4043f8:	f200 8179 	bhi.w	4046ee <_malloc_r+0x32a>
  4043fc:	09b3      	lsrs	r3, r6, #6
  4043fe:	f103 0039 	add.w	r0, r3, #57	; 0x39
  404402:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  404406:	00c3      	lsls	r3, r0, #3
  404408:	4fbf      	ldr	r7, [pc, #764]	; (404708 <_malloc_r+0x344>)
  40440a:	443b      	add	r3, r7
  40440c:	f1a3 0108 	sub.w	r1, r3, #8
  404410:	685c      	ldr	r4, [r3, #4]
  404412:	42a1      	cmp	r1, r4
  404414:	d106      	bne.n	404424 <_malloc_r+0x60>
  404416:	e00c      	b.n	404432 <_malloc_r+0x6e>
  404418:	2a00      	cmp	r2, #0
  40441a:	f280 80aa 	bge.w	404572 <_malloc_r+0x1ae>
  40441e:	68e4      	ldr	r4, [r4, #12]
  404420:	42a1      	cmp	r1, r4
  404422:	d006      	beq.n	404432 <_malloc_r+0x6e>
  404424:	6863      	ldr	r3, [r4, #4]
  404426:	f023 0303 	bic.w	r3, r3, #3
  40442a:	1b9a      	subs	r2, r3, r6
  40442c:	2a0f      	cmp	r2, #15
  40442e:	ddf3      	ble.n	404418 <_malloc_r+0x54>
  404430:	4670      	mov	r0, lr
  404432:	693c      	ldr	r4, [r7, #16]
  404434:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 40471c <_malloc_r+0x358>
  404438:	4574      	cmp	r4, lr
  40443a:	f000 81ab 	beq.w	404794 <_malloc_r+0x3d0>
  40443e:	6863      	ldr	r3, [r4, #4]
  404440:	f023 0303 	bic.w	r3, r3, #3
  404444:	1b9a      	subs	r2, r3, r6
  404446:	2a0f      	cmp	r2, #15
  404448:	f300 8190 	bgt.w	40476c <_malloc_r+0x3a8>
  40444c:	2a00      	cmp	r2, #0
  40444e:	f8c7 e014 	str.w	lr, [r7, #20]
  404452:	f8c7 e010 	str.w	lr, [r7, #16]
  404456:	f280 809d 	bge.w	404594 <_malloc_r+0x1d0>
  40445a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40445e:	f080 8161 	bcs.w	404724 <_malloc_r+0x360>
  404462:	08db      	lsrs	r3, r3, #3
  404464:	f103 0c01 	add.w	ip, r3, #1
  404468:	1099      	asrs	r1, r3, #2
  40446a:	687a      	ldr	r2, [r7, #4]
  40446c:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  404470:	f8c4 8008 	str.w	r8, [r4, #8]
  404474:	2301      	movs	r3, #1
  404476:	408b      	lsls	r3, r1
  404478:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  40447c:	4313      	orrs	r3, r2
  40447e:	3908      	subs	r1, #8
  404480:	60e1      	str	r1, [r4, #12]
  404482:	607b      	str	r3, [r7, #4]
  404484:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  404488:	f8c8 400c 	str.w	r4, [r8, #12]
  40448c:	1082      	asrs	r2, r0, #2
  40448e:	2401      	movs	r4, #1
  404490:	4094      	lsls	r4, r2
  404492:	429c      	cmp	r4, r3
  404494:	f200 808b 	bhi.w	4045ae <_malloc_r+0x1ea>
  404498:	421c      	tst	r4, r3
  40449a:	d106      	bne.n	4044aa <_malloc_r+0xe6>
  40449c:	f020 0003 	bic.w	r0, r0, #3
  4044a0:	0064      	lsls	r4, r4, #1
  4044a2:	421c      	tst	r4, r3
  4044a4:	f100 0004 	add.w	r0, r0, #4
  4044a8:	d0fa      	beq.n	4044a0 <_malloc_r+0xdc>
  4044aa:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  4044ae:	46cc      	mov	ip, r9
  4044b0:	4680      	mov	r8, r0
  4044b2:	f8dc 300c 	ldr.w	r3, [ip, #12]
  4044b6:	459c      	cmp	ip, r3
  4044b8:	d107      	bne.n	4044ca <_malloc_r+0x106>
  4044ba:	e16d      	b.n	404798 <_malloc_r+0x3d4>
  4044bc:	2a00      	cmp	r2, #0
  4044be:	f280 817b 	bge.w	4047b8 <_malloc_r+0x3f4>
  4044c2:	68db      	ldr	r3, [r3, #12]
  4044c4:	459c      	cmp	ip, r3
  4044c6:	f000 8167 	beq.w	404798 <_malloc_r+0x3d4>
  4044ca:	6859      	ldr	r1, [r3, #4]
  4044cc:	f021 0103 	bic.w	r1, r1, #3
  4044d0:	1b8a      	subs	r2, r1, r6
  4044d2:	2a0f      	cmp	r2, #15
  4044d4:	ddf2      	ble.n	4044bc <_malloc_r+0xf8>
  4044d6:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  4044da:	f8d3 8008 	ldr.w	r8, [r3, #8]
  4044de:	9300      	str	r3, [sp, #0]
  4044e0:	199c      	adds	r4, r3, r6
  4044e2:	4628      	mov	r0, r5
  4044e4:	f046 0601 	orr.w	r6, r6, #1
  4044e8:	f042 0501 	orr.w	r5, r2, #1
  4044ec:	605e      	str	r6, [r3, #4]
  4044ee:	f8c8 c00c 	str.w	ip, [r8, #12]
  4044f2:	f8cc 8008 	str.w	r8, [ip, #8]
  4044f6:	617c      	str	r4, [r7, #20]
  4044f8:	613c      	str	r4, [r7, #16]
  4044fa:	f8c4 e00c 	str.w	lr, [r4, #12]
  4044fe:	f8c4 e008 	str.w	lr, [r4, #8]
  404502:	6065      	str	r5, [r4, #4]
  404504:	505a      	str	r2, [r3, r1]
  404506:	f000 fb03 	bl	404b10 <__malloc_unlock>
  40450a:	9b00      	ldr	r3, [sp, #0]
  40450c:	f103 0408 	add.w	r4, r3, #8
  404510:	e01e      	b.n	404550 <_malloc_r+0x18c>
  404512:	2910      	cmp	r1, #16
  404514:	d820      	bhi.n	404558 <_malloc_r+0x194>
  404516:	f000 faf5 	bl	404b04 <__malloc_lock>
  40451a:	2610      	movs	r6, #16
  40451c:	2318      	movs	r3, #24
  40451e:	2002      	movs	r0, #2
  404520:	4f79      	ldr	r7, [pc, #484]	; (404708 <_malloc_r+0x344>)
  404522:	443b      	add	r3, r7
  404524:	f1a3 0208 	sub.w	r2, r3, #8
  404528:	685c      	ldr	r4, [r3, #4]
  40452a:	4294      	cmp	r4, r2
  40452c:	f000 813d 	beq.w	4047aa <_malloc_r+0x3e6>
  404530:	6863      	ldr	r3, [r4, #4]
  404532:	68e1      	ldr	r1, [r4, #12]
  404534:	68a6      	ldr	r6, [r4, #8]
  404536:	f023 0303 	bic.w	r3, r3, #3
  40453a:	4423      	add	r3, r4
  40453c:	4628      	mov	r0, r5
  40453e:	685a      	ldr	r2, [r3, #4]
  404540:	60f1      	str	r1, [r6, #12]
  404542:	f042 0201 	orr.w	r2, r2, #1
  404546:	608e      	str	r6, [r1, #8]
  404548:	605a      	str	r2, [r3, #4]
  40454a:	f000 fae1 	bl	404b10 <__malloc_unlock>
  40454e:	3408      	adds	r4, #8
  404550:	4620      	mov	r0, r4
  404552:	b003      	add	sp, #12
  404554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404558:	2400      	movs	r4, #0
  40455a:	230c      	movs	r3, #12
  40455c:	4620      	mov	r0, r4
  40455e:	602b      	str	r3, [r5, #0]
  404560:	b003      	add	sp, #12
  404562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404566:	2040      	movs	r0, #64	; 0x40
  404568:	f44f 7300 	mov.w	r3, #512	; 0x200
  40456c:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  404570:	e74a      	b.n	404408 <_malloc_r+0x44>
  404572:	4423      	add	r3, r4
  404574:	68e1      	ldr	r1, [r4, #12]
  404576:	685a      	ldr	r2, [r3, #4]
  404578:	68a6      	ldr	r6, [r4, #8]
  40457a:	f042 0201 	orr.w	r2, r2, #1
  40457e:	60f1      	str	r1, [r6, #12]
  404580:	4628      	mov	r0, r5
  404582:	608e      	str	r6, [r1, #8]
  404584:	605a      	str	r2, [r3, #4]
  404586:	f000 fac3 	bl	404b10 <__malloc_unlock>
  40458a:	3408      	adds	r4, #8
  40458c:	4620      	mov	r0, r4
  40458e:	b003      	add	sp, #12
  404590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404594:	4423      	add	r3, r4
  404596:	4628      	mov	r0, r5
  404598:	685a      	ldr	r2, [r3, #4]
  40459a:	f042 0201 	orr.w	r2, r2, #1
  40459e:	605a      	str	r2, [r3, #4]
  4045a0:	f000 fab6 	bl	404b10 <__malloc_unlock>
  4045a4:	3408      	adds	r4, #8
  4045a6:	4620      	mov	r0, r4
  4045a8:	b003      	add	sp, #12
  4045aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4045ae:	68bc      	ldr	r4, [r7, #8]
  4045b0:	6863      	ldr	r3, [r4, #4]
  4045b2:	f023 0803 	bic.w	r8, r3, #3
  4045b6:	45b0      	cmp	r8, r6
  4045b8:	d304      	bcc.n	4045c4 <_malloc_r+0x200>
  4045ba:	eba8 0306 	sub.w	r3, r8, r6
  4045be:	2b0f      	cmp	r3, #15
  4045c0:	f300 8085 	bgt.w	4046ce <_malloc_r+0x30a>
  4045c4:	f8df 9158 	ldr.w	r9, [pc, #344]	; 404720 <_malloc_r+0x35c>
  4045c8:	4b50      	ldr	r3, [pc, #320]	; (40470c <_malloc_r+0x348>)
  4045ca:	f8d9 2000 	ldr.w	r2, [r9]
  4045ce:	681b      	ldr	r3, [r3, #0]
  4045d0:	3201      	adds	r2, #1
  4045d2:	4433      	add	r3, r6
  4045d4:	eb04 0a08 	add.w	sl, r4, r8
  4045d8:	f000 8155 	beq.w	404886 <_malloc_r+0x4c2>
  4045dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  4045e0:	330f      	adds	r3, #15
  4045e2:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  4045e6:	f02b 0b0f 	bic.w	fp, fp, #15
  4045ea:	4659      	mov	r1, fp
  4045ec:	4628      	mov	r0, r5
  4045ee:	f000 fd8f 	bl	405110 <_sbrk_r>
  4045f2:	1c41      	adds	r1, r0, #1
  4045f4:	4602      	mov	r2, r0
  4045f6:	f000 80fc 	beq.w	4047f2 <_malloc_r+0x42e>
  4045fa:	4582      	cmp	sl, r0
  4045fc:	f200 80f7 	bhi.w	4047ee <_malloc_r+0x42a>
  404600:	4b43      	ldr	r3, [pc, #268]	; (404710 <_malloc_r+0x34c>)
  404602:	6819      	ldr	r1, [r3, #0]
  404604:	4459      	add	r1, fp
  404606:	6019      	str	r1, [r3, #0]
  404608:	f000 814d 	beq.w	4048a6 <_malloc_r+0x4e2>
  40460c:	f8d9 0000 	ldr.w	r0, [r9]
  404610:	3001      	adds	r0, #1
  404612:	bf1b      	ittet	ne
  404614:	eba2 0a0a 	subne.w	sl, r2, sl
  404618:	4451      	addne	r1, sl
  40461a:	f8c9 2000 	streq.w	r2, [r9]
  40461e:	6019      	strne	r1, [r3, #0]
  404620:	f012 0107 	ands.w	r1, r2, #7
  404624:	f000 8115 	beq.w	404852 <_malloc_r+0x48e>
  404628:	f1c1 0008 	rsb	r0, r1, #8
  40462c:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  404630:	4402      	add	r2, r0
  404632:	3108      	adds	r1, #8
  404634:	eb02 090b 	add.w	r9, r2, fp
  404638:	f3c9 090b 	ubfx	r9, r9, #0, #12
  40463c:	eba1 0909 	sub.w	r9, r1, r9
  404640:	4649      	mov	r1, r9
  404642:	4628      	mov	r0, r5
  404644:	9301      	str	r3, [sp, #4]
  404646:	9200      	str	r2, [sp, #0]
  404648:	f000 fd62 	bl	405110 <_sbrk_r>
  40464c:	1c43      	adds	r3, r0, #1
  40464e:	e89d 000c 	ldmia.w	sp, {r2, r3}
  404652:	f000 8143 	beq.w	4048dc <_malloc_r+0x518>
  404656:	1a80      	subs	r0, r0, r2
  404658:	4448      	add	r0, r9
  40465a:	f040 0001 	orr.w	r0, r0, #1
  40465e:	6819      	ldr	r1, [r3, #0]
  404660:	60ba      	str	r2, [r7, #8]
  404662:	4449      	add	r1, r9
  404664:	42bc      	cmp	r4, r7
  404666:	6050      	str	r0, [r2, #4]
  404668:	6019      	str	r1, [r3, #0]
  40466a:	d017      	beq.n	40469c <_malloc_r+0x2d8>
  40466c:	f1b8 0f0f 	cmp.w	r8, #15
  404670:	f240 80fb 	bls.w	40486a <_malloc_r+0x4a6>
  404674:	6860      	ldr	r0, [r4, #4]
  404676:	f1a8 020c 	sub.w	r2, r8, #12
  40467a:	f022 0207 	bic.w	r2, r2, #7
  40467e:	eb04 0e02 	add.w	lr, r4, r2
  404682:	f000 0001 	and.w	r0, r0, #1
  404686:	f04f 0c05 	mov.w	ip, #5
  40468a:	4310      	orrs	r0, r2
  40468c:	2a0f      	cmp	r2, #15
  40468e:	6060      	str	r0, [r4, #4]
  404690:	f8ce c004 	str.w	ip, [lr, #4]
  404694:	f8ce c008 	str.w	ip, [lr, #8]
  404698:	f200 8117 	bhi.w	4048ca <_malloc_r+0x506>
  40469c:	4b1d      	ldr	r3, [pc, #116]	; (404714 <_malloc_r+0x350>)
  40469e:	68bc      	ldr	r4, [r7, #8]
  4046a0:	681a      	ldr	r2, [r3, #0]
  4046a2:	4291      	cmp	r1, r2
  4046a4:	bf88      	it	hi
  4046a6:	6019      	strhi	r1, [r3, #0]
  4046a8:	4b1b      	ldr	r3, [pc, #108]	; (404718 <_malloc_r+0x354>)
  4046aa:	681a      	ldr	r2, [r3, #0]
  4046ac:	4291      	cmp	r1, r2
  4046ae:	6862      	ldr	r2, [r4, #4]
  4046b0:	bf88      	it	hi
  4046b2:	6019      	strhi	r1, [r3, #0]
  4046b4:	f022 0203 	bic.w	r2, r2, #3
  4046b8:	4296      	cmp	r6, r2
  4046ba:	eba2 0306 	sub.w	r3, r2, r6
  4046be:	d801      	bhi.n	4046c4 <_malloc_r+0x300>
  4046c0:	2b0f      	cmp	r3, #15
  4046c2:	dc04      	bgt.n	4046ce <_malloc_r+0x30a>
  4046c4:	4628      	mov	r0, r5
  4046c6:	f000 fa23 	bl	404b10 <__malloc_unlock>
  4046ca:	2400      	movs	r4, #0
  4046cc:	e740      	b.n	404550 <_malloc_r+0x18c>
  4046ce:	19a2      	adds	r2, r4, r6
  4046d0:	f043 0301 	orr.w	r3, r3, #1
  4046d4:	f046 0601 	orr.w	r6, r6, #1
  4046d8:	6066      	str	r6, [r4, #4]
  4046da:	4628      	mov	r0, r5
  4046dc:	60ba      	str	r2, [r7, #8]
  4046de:	6053      	str	r3, [r2, #4]
  4046e0:	f000 fa16 	bl	404b10 <__malloc_unlock>
  4046e4:	3408      	adds	r4, #8
  4046e6:	4620      	mov	r0, r4
  4046e8:	b003      	add	sp, #12
  4046ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4046ee:	2b14      	cmp	r3, #20
  4046f0:	d971      	bls.n	4047d6 <_malloc_r+0x412>
  4046f2:	2b54      	cmp	r3, #84	; 0x54
  4046f4:	f200 80a3 	bhi.w	40483e <_malloc_r+0x47a>
  4046f8:	0b33      	lsrs	r3, r6, #12
  4046fa:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  4046fe:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  404702:	00c3      	lsls	r3, r0, #3
  404704:	e680      	b.n	404408 <_malloc_r+0x44>
  404706:	bf00      	nop
  404708:	20400454 	.word	0x20400454
  40470c:	20400ca8 	.word	0x20400ca8
  404710:	20400c78 	.word	0x20400c78
  404714:	20400ca0 	.word	0x20400ca0
  404718:	20400ca4 	.word	0x20400ca4
  40471c:	2040045c 	.word	0x2040045c
  404720:	2040085c 	.word	0x2040085c
  404724:	0a5a      	lsrs	r2, r3, #9
  404726:	2a04      	cmp	r2, #4
  404728:	d95b      	bls.n	4047e2 <_malloc_r+0x41e>
  40472a:	2a14      	cmp	r2, #20
  40472c:	f200 80ae 	bhi.w	40488c <_malloc_r+0x4c8>
  404730:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  404734:	00c9      	lsls	r1, r1, #3
  404736:	325b      	adds	r2, #91	; 0x5b
  404738:	eb07 0c01 	add.w	ip, r7, r1
  40473c:	5879      	ldr	r1, [r7, r1]
  40473e:	f1ac 0c08 	sub.w	ip, ip, #8
  404742:	458c      	cmp	ip, r1
  404744:	f000 8088 	beq.w	404858 <_malloc_r+0x494>
  404748:	684a      	ldr	r2, [r1, #4]
  40474a:	f022 0203 	bic.w	r2, r2, #3
  40474e:	4293      	cmp	r3, r2
  404750:	d273      	bcs.n	40483a <_malloc_r+0x476>
  404752:	6889      	ldr	r1, [r1, #8]
  404754:	458c      	cmp	ip, r1
  404756:	d1f7      	bne.n	404748 <_malloc_r+0x384>
  404758:	f8dc 200c 	ldr.w	r2, [ip, #12]
  40475c:	687b      	ldr	r3, [r7, #4]
  40475e:	60e2      	str	r2, [r4, #12]
  404760:	f8c4 c008 	str.w	ip, [r4, #8]
  404764:	6094      	str	r4, [r2, #8]
  404766:	f8cc 400c 	str.w	r4, [ip, #12]
  40476a:	e68f      	b.n	40448c <_malloc_r+0xc8>
  40476c:	19a1      	adds	r1, r4, r6
  40476e:	f046 0c01 	orr.w	ip, r6, #1
  404772:	f042 0601 	orr.w	r6, r2, #1
  404776:	f8c4 c004 	str.w	ip, [r4, #4]
  40477a:	4628      	mov	r0, r5
  40477c:	6179      	str	r1, [r7, #20]
  40477e:	6139      	str	r1, [r7, #16]
  404780:	f8c1 e00c 	str.w	lr, [r1, #12]
  404784:	f8c1 e008 	str.w	lr, [r1, #8]
  404788:	604e      	str	r6, [r1, #4]
  40478a:	50e2      	str	r2, [r4, r3]
  40478c:	f000 f9c0 	bl	404b10 <__malloc_unlock>
  404790:	3408      	adds	r4, #8
  404792:	e6dd      	b.n	404550 <_malloc_r+0x18c>
  404794:	687b      	ldr	r3, [r7, #4]
  404796:	e679      	b.n	40448c <_malloc_r+0xc8>
  404798:	f108 0801 	add.w	r8, r8, #1
  40479c:	f018 0f03 	tst.w	r8, #3
  4047a0:	f10c 0c08 	add.w	ip, ip, #8
  4047a4:	f47f ae85 	bne.w	4044b2 <_malloc_r+0xee>
  4047a8:	e02d      	b.n	404806 <_malloc_r+0x442>
  4047aa:	68dc      	ldr	r4, [r3, #12]
  4047ac:	42a3      	cmp	r3, r4
  4047ae:	bf08      	it	eq
  4047b0:	3002      	addeq	r0, #2
  4047b2:	f43f ae3e 	beq.w	404432 <_malloc_r+0x6e>
  4047b6:	e6bb      	b.n	404530 <_malloc_r+0x16c>
  4047b8:	4419      	add	r1, r3
  4047ba:	461c      	mov	r4, r3
  4047bc:	684a      	ldr	r2, [r1, #4]
  4047be:	68db      	ldr	r3, [r3, #12]
  4047c0:	f854 6f08 	ldr.w	r6, [r4, #8]!
  4047c4:	f042 0201 	orr.w	r2, r2, #1
  4047c8:	604a      	str	r2, [r1, #4]
  4047ca:	4628      	mov	r0, r5
  4047cc:	60f3      	str	r3, [r6, #12]
  4047ce:	609e      	str	r6, [r3, #8]
  4047d0:	f000 f99e 	bl	404b10 <__malloc_unlock>
  4047d4:	e6bc      	b.n	404550 <_malloc_r+0x18c>
  4047d6:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  4047da:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  4047de:	00c3      	lsls	r3, r0, #3
  4047e0:	e612      	b.n	404408 <_malloc_r+0x44>
  4047e2:	099a      	lsrs	r2, r3, #6
  4047e4:	f102 0139 	add.w	r1, r2, #57	; 0x39
  4047e8:	00c9      	lsls	r1, r1, #3
  4047ea:	3238      	adds	r2, #56	; 0x38
  4047ec:	e7a4      	b.n	404738 <_malloc_r+0x374>
  4047ee:	42bc      	cmp	r4, r7
  4047f0:	d054      	beq.n	40489c <_malloc_r+0x4d8>
  4047f2:	68bc      	ldr	r4, [r7, #8]
  4047f4:	6862      	ldr	r2, [r4, #4]
  4047f6:	f022 0203 	bic.w	r2, r2, #3
  4047fa:	e75d      	b.n	4046b8 <_malloc_r+0x2f4>
  4047fc:	f859 3908 	ldr.w	r3, [r9], #-8
  404800:	4599      	cmp	r9, r3
  404802:	f040 8086 	bne.w	404912 <_malloc_r+0x54e>
  404806:	f010 0f03 	tst.w	r0, #3
  40480a:	f100 30ff 	add.w	r0, r0, #4294967295
  40480e:	d1f5      	bne.n	4047fc <_malloc_r+0x438>
  404810:	687b      	ldr	r3, [r7, #4]
  404812:	ea23 0304 	bic.w	r3, r3, r4
  404816:	607b      	str	r3, [r7, #4]
  404818:	0064      	lsls	r4, r4, #1
  40481a:	429c      	cmp	r4, r3
  40481c:	f63f aec7 	bhi.w	4045ae <_malloc_r+0x1ea>
  404820:	2c00      	cmp	r4, #0
  404822:	f43f aec4 	beq.w	4045ae <_malloc_r+0x1ea>
  404826:	421c      	tst	r4, r3
  404828:	4640      	mov	r0, r8
  40482a:	f47f ae3e 	bne.w	4044aa <_malloc_r+0xe6>
  40482e:	0064      	lsls	r4, r4, #1
  404830:	421c      	tst	r4, r3
  404832:	f100 0004 	add.w	r0, r0, #4
  404836:	d0fa      	beq.n	40482e <_malloc_r+0x46a>
  404838:	e637      	b.n	4044aa <_malloc_r+0xe6>
  40483a:	468c      	mov	ip, r1
  40483c:	e78c      	b.n	404758 <_malloc_r+0x394>
  40483e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  404842:	d815      	bhi.n	404870 <_malloc_r+0x4ac>
  404844:	0bf3      	lsrs	r3, r6, #15
  404846:	f103 0078 	add.w	r0, r3, #120	; 0x78
  40484a:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  40484e:	00c3      	lsls	r3, r0, #3
  404850:	e5da      	b.n	404408 <_malloc_r+0x44>
  404852:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  404856:	e6ed      	b.n	404634 <_malloc_r+0x270>
  404858:	687b      	ldr	r3, [r7, #4]
  40485a:	1092      	asrs	r2, r2, #2
  40485c:	2101      	movs	r1, #1
  40485e:	fa01 f202 	lsl.w	r2, r1, r2
  404862:	4313      	orrs	r3, r2
  404864:	607b      	str	r3, [r7, #4]
  404866:	4662      	mov	r2, ip
  404868:	e779      	b.n	40475e <_malloc_r+0x39a>
  40486a:	2301      	movs	r3, #1
  40486c:	6053      	str	r3, [r2, #4]
  40486e:	e729      	b.n	4046c4 <_malloc_r+0x300>
  404870:	f240 5254 	movw	r2, #1364	; 0x554
  404874:	4293      	cmp	r3, r2
  404876:	d822      	bhi.n	4048be <_malloc_r+0x4fa>
  404878:	0cb3      	lsrs	r3, r6, #18
  40487a:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  40487e:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  404882:	00c3      	lsls	r3, r0, #3
  404884:	e5c0      	b.n	404408 <_malloc_r+0x44>
  404886:	f103 0b10 	add.w	fp, r3, #16
  40488a:	e6ae      	b.n	4045ea <_malloc_r+0x226>
  40488c:	2a54      	cmp	r2, #84	; 0x54
  40488e:	d829      	bhi.n	4048e4 <_malloc_r+0x520>
  404890:	0b1a      	lsrs	r2, r3, #12
  404892:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  404896:	00c9      	lsls	r1, r1, #3
  404898:	326e      	adds	r2, #110	; 0x6e
  40489a:	e74d      	b.n	404738 <_malloc_r+0x374>
  40489c:	4b20      	ldr	r3, [pc, #128]	; (404920 <_malloc_r+0x55c>)
  40489e:	6819      	ldr	r1, [r3, #0]
  4048a0:	4459      	add	r1, fp
  4048a2:	6019      	str	r1, [r3, #0]
  4048a4:	e6b2      	b.n	40460c <_malloc_r+0x248>
  4048a6:	f3ca 000b 	ubfx	r0, sl, #0, #12
  4048aa:	2800      	cmp	r0, #0
  4048ac:	f47f aeae 	bne.w	40460c <_malloc_r+0x248>
  4048b0:	eb08 030b 	add.w	r3, r8, fp
  4048b4:	68ba      	ldr	r2, [r7, #8]
  4048b6:	f043 0301 	orr.w	r3, r3, #1
  4048ba:	6053      	str	r3, [r2, #4]
  4048bc:	e6ee      	b.n	40469c <_malloc_r+0x2d8>
  4048be:	207f      	movs	r0, #127	; 0x7f
  4048c0:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  4048c4:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  4048c8:	e59e      	b.n	404408 <_malloc_r+0x44>
  4048ca:	f104 0108 	add.w	r1, r4, #8
  4048ce:	4628      	mov	r0, r5
  4048d0:	9300      	str	r3, [sp, #0]
  4048d2:	f000 fe03 	bl	4054dc <_free_r>
  4048d6:	9b00      	ldr	r3, [sp, #0]
  4048d8:	6819      	ldr	r1, [r3, #0]
  4048da:	e6df      	b.n	40469c <_malloc_r+0x2d8>
  4048dc:	2001      	movs	r0, #1
  4048de:	f04f 0900 	mov.w	r9, #0
  4048e2:	e6bc      	b.n	40465e <_malloc_r+0x29a>
  4048e4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  4048e8:	d805      	bhi.n	4048f6 <_malloc_r+0x532>
  4048ea:	0bda      	lsrs	r2, r3, #15
  4048ec:	f102 0178 	add.w	r1, r2, #120	; 0x78
  4048f0:	00c9      	lsls	r1, r1, #3
  4048f2:	3277      	adds	r2, #119	; 0x77
  4048f4:	e720      	b.n	404738 <_malloc_r+0x374>
  4048f6:	f240 5154 	movw	r1, #1364	; 0x554
  4048fa:	428a      	cmp	r2, r1
  4048fc:	d805      	bhi.n	40490a <_malloc_r+0x546>
  4048fe:	0c9a      	lsrs	r2, r3, #18
  404900:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  404904:	00c9      	lsls	r1, r1, #3
  404906:	327c      	adds	r2, #124	; 0x7c
  404908:	e716      	b.n	404738 <_malloc_r+0x374>
  40490a:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  40490e:	227e      	movs	r2, #126	; 0x7e
  404910:	e712      	b.n	404738 <_malloc_r+0x374>
  404912:	687b      	ldr	r3, [r7, #4]
  404914:	e780      	b.n	404818 <_malloc_r+0x454>
  404916:	08f0      	lsrs	r0, r6, #3
  404918:	f106 0308 	add.w	r3, r6, #8
  40491c:	e600      	b.n	404520 <_malloc_r+0x15c>
  40491e:	bf00      	nop
  404920:	20400c78 	.word	0x20400c78
	...

00404930 <memchr>:
  404930:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  404934:	2a10      	cmp	r2, #16
  404936:	db2b      	blt.n	404990 <memchr+0x60>
  404938:	f010 0f07 	tst.w	r0, #7
  40493c:	d008      	beq.n	404950 <memchr+0x20>
  40493e:	f810 3b01 	ldrb.w	r3, [r0], #1
  404942:	3a01      	subs	r2, #1
  404944:	428b      	cmp	r3, r1
  404946:	d02d      	beq.n	4049a4 <memchr+0x74>
  404948:	f010 0f07 	tst.w	r0, #7
  40494c:	b342      	cbz	r2, 4049a0 <memchr+0x70>
  40494e:	d1f6      	bne.n	40493e <memchr+0xe>
  404950:	b4f0      	push	{r4, r5, r6, r7}
  404952:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  404956:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40495a:	f022 0407 	bic.w	r4, r2, #7
  40495e:	f07f 0700 	mvns.w	r7, #0
  404962:	2300      	movs	r3, #0
  404964:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  404968:	3c08      	subs	r4, #8
  40496a:	ea85 0501 	eor.w	r5, r5, r1
  40496e:	ea86 0601 	eor.w	r6, r6, r1
  404972:	fa85 f547 	uadd8	r5, r5, r7
  404976:	faa3 f587 	sel	r5, r3, r7
  40497a:	fa86 f647 	uadd8	r6, r6, r7
  40497e:	faa5 f687 	sel	r6, r5, r7
  404982:	b98e      	cbnz	r6, 4049a8 <memchr+0x78>
  404984:	d1ee      	bne.n	404964 <memchr+0x34>
  404986:	bcf0      	pop	{r4, r5, r6, r7}
  404988:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40498c:	f002 0207 	and.w	r2, r2, #7
  404990:	b132      	cbz	r2, 4049a0 <memchr+0x70>
  404992:	f810 3b01 	ldrb.w	r3, [r0], #1
  404996:	3a01      	subs	r2, #1
  404998:	ea83 0301 	eor.w	r3, r3, r1
  40499c:	b113      	cbz	r3, 4049a4 <memchr+0x74>
  40499e:	d1f8      	bne.n	404992 <memchr+0x62>
  4049a0:	2000      	movs	r0, #0
  4049a2:	4770      	bx	lr
  4049a4:	3801      	subs	r0, #1
  4049a6:	4770      	bx	lr
  4049a8:	2d00      	cmp	r5, #0
  4049aa:	bf06      	itte	eq
  4049ac:	4635      	moveq	r5, r6
  4049ae:	3803      	subeq	r0, #3
  4049b0:	3807      	subne	r0, #7
  4049b2:	f015 0f01 	tst.w	r5, #1
  4049b6:	d107      	bne.n	4049c8 <memchr+0x98>
  4049b8:	3001      	adds	r0, #1
  4049ba:	f415 7f80 	tst.w	r5, #256	; 0x100
  4049be:	bf02      	ittt	eq
  4049c0:	3001      	addeq	r0, #1
  4049c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  4049c6:	3001      	addeq	r0, #1
  4049c8:	bcf0      	pop	{r4, r5, r6, r7}
  4049ca:	3801      	subs	r0, #1
  4049cc:	4770      	bx	lr
  4049ce:	bf00      	nop

004049d0 <memcpy>:
  4049d0:	4684      	mov	ip, r0
  4049d2:	ea41 0300 	orr.w	r3, r1, r0
  4049d6:	f013 0303 	ands.w	r3, r3, #3
  4049da:	d16d      	bne.n	404ab8 <memcpy+0xe8>
  4049dc:	3a40      	subs	r2, #64	; 0x40
  4049de:	d341      	bcc.n	404a64 <memcpy+0x94>
  4049e0:	f851 3b04 	ldr.w	r3, [r1], #4
  4049e4:	f840 3b04 	str.w	r3, [r0], #4
  4049e8:	f851 3b04 	ldr.w	r3, [r1], #4
  4049ec:	f840 3b04 	str.w	r3, [r0], #4
  4049f0:	f851 3b04 	ldr.w	r3, [r1], #4
  4049f4:	f840 3b04 	str.w	r3, [r0], #4
  4049f8:	f851 3b04 	ldr.w	r3, [r1], #4
  4049fc:	f840 3b04 	str.w	r3, [r0], #4
  404a00:	f851 3b04 	ldr.w	r3, [r1], #4
  404a04:	f840 3b04 	str.w	r3, [r0], #4
  404a08:	f851 3b04 	ldr.w	r3, [r1], #4
  404a0c:	f840 3b04 	str.w	r3, [r0], #4
  404a10:	f851 3b04 	ldr.w	r3, [r1], #4
  404a14:	f840 3b04 	str.w	r3, [r0], #4
  404a18:	f851 3b04 	ldr.w	r3, [r1], #4
  404a1c:	f840 3b04 	str.w	r3, [r0], #4
  404a20:	f851 3b04 	ldr.w	r3, [r1], #4
  404a24:	f840 3b04 	str.w	r3, [r0], #4
  404a28:	f851 3b04 	ldr.w	r3, [r1], #4
  404a2c:	f840 3b04 	str.w	r3, [r0], #4
  404a30:	f851 3b04 	ldr.w	r3, [r1], #4
  404a34:	f840 3b04 	str.w	r3, [r0], #4
  404a38:	f851 3b04 	ldr.w	r3, [r1], #4
  404a3c:	f840 3b04 	str.w	r3, [r0], #4
  404a40:	f851 3b04 	ldr.w	r3, [r1], #4
  404a44:	f840 3b04 	str.w	r3, [r0], #4
  404a48:	f851 3b04 	ldr.w	r3, [r1], #4
  404a4c:	f840 3b04 	str.w	r3, [r0], #4
  404a50:	f851 3b04 	ldr.w	r3, [r1], #4
  404a54:	f840 3b04 	str.w	r3, [r0], #4
  404a58:	f851 3b04 	ldr.w	r3, [r1], #4
  404a5c:	f840 3b04 	str.w	r3, [r0], #4
  404a60:	3a40      	subs	r2, #64	; 0x40
  404a62:	d2bd      	bcs.n	4049e0 <memcpy+0x10>
  404a64:	3230      	adds	r2, #48	; 0x30
  404a66:	d311      	bcc.n	404a8c <memcpy+0xbc>
  404a68:	f851 3b04 	ldr.w	r3, [r1], #4
  404a6c:	f840 3b04 	str.w	r3, [r0], #4
  404a70:	f851 3b04 	ldr.w	r3, [r1], #4
  404a74:	f840 3b04 	str.w	r3, [r0], #4
  404a78:	f851 3b04 	ldr.w	r3, [r1], #4
  404a7c:	f840 3b04 	str.w	r3, [r0], #4
  404a80:	f851 3b04 	ldr.w	r3, [r1], #4
  404a84:	f840 3b04 	str.w	r3, [r0], #4
  404a88:	3a10      	subs	r2, #16
  404a8a:	d2ed      	bcs.n	404a68 <memcpy+0x98>
  404a8c:	320c      	adds	r2, #12
  404a8e:	d305      	bcc.n	404a9c <memcpy+0xcc>
  404a90:	f851 3b04 	ldr.w	r3, [r1], #4
  404a94:	f840 3b04 	str.w	r3, [r0], #4
  404a98:	3a04      	subs	r2, #4
  404a9a:	d2f9      	bcs.n	404a90 <memcpy+0xc0>
  404a9c:	3204      	adds	r2, #4
  404a9e:	d008      	beq.n	404ab2 <memcpy+0xe2>
  404aa0:	07d2      	lsls	r2, r2, #31
  404aa2:	bf1c      	itt	ne
  404aa4:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404aa8:	f800 3b01 	strbne.w	r3, [r0], #1
  404aac:	d301      	bcc.n	404ab2 <memcpy+0xe2>
  404aae:	880b      	ldrh	r3, [r1, #0]
  404ab0:	8003      	strh	r3, [r0, #0]
  404ab2:	4660      	mov	r0, ip
  404ab4:	4770      	bx	lr
  404ab6:	bf00      	nop
  404ab8:	2a08      	cmp	r2, #8
  404aba:	d313      	bcc.n	404ae4 <memcpy+0x114>
  404abc:	078b      	lsls	r3, r1, #30
  404abe:	d08d      	beq.n	4049dc <memcpy+0xc>
  404ac0:	f010 0303 	ands.w	r3, r0, #3
  404ac4:	d08a      	beq.n	4049dc <memcpy+0xc>
  404ac6:	f1c3 0304 	rsb	r3, r3, #4
  404aca:	1ad2      	subs	r2, r2, r3
  404acc:	07db      	lsls	r3, r3, #31
  404ace:	bf1c      	itt	ne
  404ad0:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404ad4:	f800 3b01 	strbne.w	r3, [r0], #1
  404ad8:	d380      	bcc.n	4049dc <memcpy+0xc>
  404ada:	f831 3b02 	ldrh.w	r3, [r1], #2
  404ade:	f820 3b02 	strh.w	r3, [r0], #2
  404ae2:	e77b      	b.n	4049dc <memcpy+0xc>
  404ae4:	3a04      	subs	r2, #4
  404ae6:	d3d9      	bcc.n	404a9c <memcpy+0xcc>
  404ae8:	3a01      	subs	r2, #1
  404aea:	f811 3b01 	ldrb.w	r3, [r1], #1
  404aee:	f800 3b01 	strb.w	r3, [r0], #1
  404af2:	d2f9      	bcs.n	404ae8 <memcpy+0x118>
  404af4:	780b      	ldrb	r3, [r1, #0]
  404af6:	7003      	strb	r3, [r0, #0]
  404af8:	784b      	ldrb	r3, [r1, #1]
  404afa:	7043      	strb	r3, [r0, #1]
  404afc:	788b      	ldrb	r3, [r1, #2]
  404afe:	7083      	strb	r3, [r0, #2]
  404b00:	4660      	mov	r0, ip
  404b02:	4770      	bx	lr

00404b04 <__malloc_lock>:
  404b04:	4801      	ldr	r0, [pc, #4]	; (404b0c <__malloc_lock+0x8>)
  404b06:	f7ff bc59 	b.w	4043bc <__retarget_lock_acquire_recursive>
  404b0a:	bf00      	nop
  404b0c:	20400cbc 	.word	0x20400cbc

00404b10 <__malloc_unlock>:
  404b10:	4801      	ldr	r0, [pc, #4]	; (404b18 <__malloc_unlock+0x8>)
  404b12:	f7ff bc55 	b.w	4043c0 <__retarget_lock_release_recursive>
  404b16:	bf00      	nop
  404b18:	20400cbc 	.word	0x20400cbc

00404b1c <_Balloc>:
  404b1c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  404b1e:	b570      	push	{r4, r5, r6, lr}
  404b20:	4605      	mov	r5, r0
  404b22:	460c      	mov	r4, r1
  404b24:	b14b      	cbz	r3, 404b3a <_Balloc+0x1e>
  404b26:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  404b2a:	b180      	cbz	r0, 404b4e <_Balloc+0x32>
  404b2c:	6802      	ldr	r2, [r0, #0]
  404b2e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  404b32:	2300      	movs	r3, #0
  404b34:	6103      	str	r3, [r0, #16]
  404b36:	60c3      	str	r3, [r0, #12]
  404b38:	bd70      	pop	{r4, r5, r6, pc}
  404b3a:	2221      	movs	r2, #33	; 0x21
  404b3c:	2104      	movs	r1, #4
  404b3e:	f000 fc4d 	bl	4053dc <_calloc_r>
  404b42:	64e8      	str	r0, [r5, #76]	; 0x4c
  404b44:	4603      	mov	r3, r0
  404b46:	2800      	cmp	r0, #0
  404b48:	d1ed      	bne.n	404b26 <_Balloc+0xa>
  404b4a:	2000      	movs	r0, #0
  404b4c:	bd70      	pop	{r4, r5, r6, pc}
  404b4e:	2101      	movs	r1, #1
  404b50:	fa01 f604 	lsl.w	r6, r1, r4
  404b54:	1d72      	adds	r2, r6, #5
  404b56:	4628      	mov	r0, r5
  404b58:	0092      	lsls	r2, r2, #2
  404b5a:	f000 fc3f 	bl	4053dc <_calloc_r>
  404b5e:	2800      	cmp	r0, #0
  404b60:	d0f3      	beq.n	404b4a <_Balloc+0x2e>
  404b62:	6044      	str	r4, [r0, #4]
  404b64:	6086      	str	r6, [r0, #8]
  404b66:	e7e4      	b.n	404b32 <_Balloc+0x16>

00404b68 <_Bfree>:
  404b68:	b131      	cbz	r1, 404b78 <_Bfree+0x10>
  404b6a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  404b6c:	684a      	ldr	r2, [r1, #4]
  404b6e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  404b72:	6008      	str	r0, [r1, #0]
  404b74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  404b78:	4770      	bx	lr
  404b7a:	bf00      	nop

00404b7c <__multadd>:
  404b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
  404b7e:	690c      	ldr	r4, [r1, #16]
  404b80:	b083      	sub	sp, #12
  404b82:	460d      	mov	r5, r1
  404b84:	4606      	mov	r6, r0
  404b86:	f101 0e14 	add.w	lr, r1, #20
  404b8a:	2700      	movs	r7, #0
  404b8c:	f8de 0000 	ldr.w	r0, [lr]
  404b90:	b281      	uxth	r1, r0
  404b92:	fb02 3301 	mla	r3, r2, r1, r3
  404b96:	0c01      	lsrs	r1, r0, #16
  404b98:	0c18      	lsrs	r0, r3, #16
  404b9a:	fb02 0101 	mla	r1, r2, r1, r0
  404b9e:	b29b      	uxth	r3, r3
  404ba0:	3701      	adds	r7, #1
  404ba2:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  404ba6:	42bc      	cmp	r4, r7
  404ba8:	f84e 3b04 	str.w	r3, [lr], #4
  404bac:	ea4f 4311 	mov.w	r3, r1, lsr #16
  404bb0:	dcec      	bgt.n	404b8c <__multadd+0x10>
  404bb2:	b13b      	cbz	r3, 404bc4 <__multadd+0x48>
  404bb4:	68aa      	ldr	r2, [r5, #8]
  404bb6:	4294      	cmp	r4, r2
  404bb8:	da07      	bge.n	404bca <__multadd+0x4e>
  404bba:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  404bbe:	3401      	adds	r4, #1
  404bc0:	6153      	str	r3, [r2, #20]
  404bc2:	612c      	str	r4, [r5, #16]
  404bc4:	4628      	mov	r0, r5
  404bc6:	b003      	add	sp, #12
  404bc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404bca:	6869      	ldr	r1, [r5, #4]
  404bcc:	9301      	str	r3, [sp, #4]
  404bce:	3101      	adds	r1, #1
  404bd0:	4630      	mov	r0, r6
  404bd2:	f7ff ffa3 	bl	404b1c <_Balloc>
  404bd6:	692a      	ldr	r2, [r5, #16]
  404bd8:	3202      	adds	r2, #2
  404bda:	f105 010c 	add.w	r1, r5, #12
  404bde:	4607      	mov	r7, r0
  404be0:	0092      	lsls	r2, r2, #2
  404be2:	300c      	adds	r0, #12
  404be4:	f7ff fef4 	bl	4049d0 <memcpy>
  404be8:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  404bea:	6869      	ldr	r1, [r5, #4]
  404bec:	9b01      	ldr	r3, [sp, #4]
  404bee:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  404bf2:	6028      	str	r0, [r5, #0]
  404bf4:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  404bf8:	463d      	mov	r5, r7
  404bfa:	e7de      	b.n	404bba <__multadd+0x3e>

00404bfc <__hi0bits>:
  404bfc:	0c02      	lsrs	r2, r0, #16
  404bfe:	0412      	lsls	r2, r2, #16
  404c00:	4603      	mov	r3, r0
  404c02:	b9b2      	cbnz	r2, 404c32 <__hi0bits+0x36>
  404c04:	0403      	lsls	r3, r0, #16
  404c06:	2010      	movs	r0, #16
  404c08:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  404c0c:	bf04      	itt	eq
  404c0e:	021b      	lsleq	r3, r3, #8
  404c10:	3008      	addeq	r0, #8
  404c12:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  404c16:	bf04      	itt	eq
  404c18:	011b      	lsleq	r3, r3, #4
  404c1a:	3004      	addeq	r0, #4
  404c1c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  404c20:	bf04      	itt	eq
  404c22:	009b      	lsleq	r3, r3, #2
  404c24:	3002      	addeq	r0, #2
  404c26:	2b00      	cmp	r3, #0
  404c28:	db02      	blt.n	404c30 <__hi0bits+0x34>
  404c2a:	005b      	lsls	r3, r3, #1
  404c2c:	d403      	bmi.n	404c36 <__hi0bits+0x3a>
  404c2e:	2020      	movs	r0, #32
  404c30:	4770      	bx	lr
  404c32:	2000      	movs	r0, #0
  404c34:	e7e8      	b.n	404c08 <__hi0bits+0xc>
  404c36:	3001      	adds	r0, #1
  404c38:	4770      	bx	lr
  404c3a:	bf00      	nop

00404c3c <__lo0bits>:
  404c3c:	6803      	ldr	r3, [r0, #0]
  404c3e:	f013 0207 	ands.w	r2, r3, #7
  404c42:	4601      	mov	r1, r0
  404c44:	d007      	beq.n	404c56 <__lo0bits+0x1a>
  404c46:	07da      	lsls	r2, r3, #31
  404c48:	d421      	bmi.n	404c8e <__lo0bits+0x52>
  404c4a:	0798      	lsls	r0, r3, #30
  404c4c:	d421      	bmi.n	404c92 <__lo0bits+0x56>
  404c4e:	089b      	lsrs	r3, r3, #2
  404c50:	600b      	str	r3, [r1, #0]
  404c52:	2002      	movs	r0, #2
  404c54:	4770      	bx	lr
  404c56:	b298      	uxth	r0, r3
  404c58:	b198      	cbz	r0, 404c82 <__lo0bits+0x46>
  404c5a:	4610      	mov	r0, r2
  404c5c:	f013 0fff 	tst.w	r3, #255	; 0xff
  404c60:	bf04      	itt	eq
  404c62:	0a1b      	lsreq	r3, r3, #8
  404c64:	3008      	addeq	r0, #8
  404c66:	071a      	lsls	r2, r3, #28
  404c68:	bf04      	itt	eq
  404c6a:	091b      	lsreq	r3, r3, #4
  404c6c:	3004      	addeq	r0, #4
  404c6e:	079a      	lsls	r2, r3, #30
  404c70:	bf04      	itt	eq
  404c72:	089b      	lsreq	r3, r3, #2
  404c74:	3002      	addeq	r0, #2
  404c76:	07da      	lsls	r2, r3, #31
  404c78:	d407      	bmi.n	404c8a <__lo0bits+0x4e>
  404c7a:	085b      	lsrs	r3, r3, #1
  404c7c:	d104      	bne.n	404c88 <__lo0bits+0x4c>
  404c7e:	2020      	movs	r0, #32
  404c80:	4770      	bx	lr
  404c82:	0c1b      	lsrs	r3, r3, #16
  404c84:	2010      	movs	r0, #16
  404c86:	e7e9      	b.n	404c5c <__lo0bits+0x20>
  404c88:	3001      	adds	r0, #1
  404c8a:	600b      	str	r3, [r1, #0]
  404c8c:	4770      	bx	lr
  404c8e:	2000      	movs	r0, #0
  404c90:	4770      	bx	lr
  404c92:	085b      	lsrs	r3, r3, #1
  404c94:	600b      	str	r3, [r1, #0]
  404c96:	2001      	movs	r0, #1
  404c98:	4770      	bx	lr
  404c9a:	bf00      	nop

00404c9c <__i2b>:
  404c9c:	b510      	push	{r4, lr}
  404c9e:	460c      	mov	r4, r1
  404ca0:	2101      	movs	r1, #1
  404ca2:	f7ff ff3b 	bl	404b1c <_Balloc>
  404ca6:	2201      	movs	r2, #1
  404ca8:	6144      	str	r4, [r0, #20]
  404caa:	6102      	str	r2, [r0, #16]
  404cac:	bd10      	pop	{r4, pc}
  404cae:	bf00      	nop

00404cb0 <__multiply>:
  404cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404cb4:	690c      	ldr	r4, [r1, #16]
  404cb6:	6915      	ldr	r5, [r2, #16]
  404cb8:	42ac      	cmp	r4, r5
  404cba:	b083      	sub	sp, #12
  404cbc:	468b      	mov	fp, r1
  404cbe:	4616      	mov	r6, r2
  404cc0:	da04      	bge.n	404ccc <__multiply+0x1c>
  404cc2:	4622      	mov	r2, r4
  404cc4:	46b3      	mov	fp, r6
  404cc6:	462c      	mov	r4, r5
  404cc8:	460e      	mov	r6, r1
  404cca:	4615      	mov	r5, r2
  404ccc:	f8db 3008 	ldr.w	r3, [fp, #8]
  404cd0:	f8db 1004 	ldr.w	r1, [fp, #4]
  404cd4:	eb04 0805 	add.w	r8, r4, r5
  404cd8:	4598      	cmp	r8, r3
  404cda:	bfc8      	it	gt
  404cdc:	3101      	addgt	r1, #1
  404cde:	f7ff ff1d 	bl	404b1c <_Balloc>
  404ce2:	f100 0914 	add.w	r9, r0, #20
  404ce6:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  404cea:	45d1      	cmp	r9, sl
  404cec:	9000      	str	r0, [sp, #0]
  404cee:	d205      	bcs.n	404cfc <__multiply+0x4c>
  404cf0:	464b      	mov	r3, r9
  404cf2:	2100      	movs	r1, #0
  404cf4:	f843 1b04 	str.w	r1, [r3], #4
  404cf8:	459a      	cmp	sl, r3
  404cfa:	d8fb      	bhi.n	404cf4 <__multiply+0x44>
  404cfc:	f106 0c14 	add.w	ip, r6, #20
  404d00:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  404d04:	f10b 0b14 	add.w	fp, fp, #20
  404d08:	459c      	cmp	ip, r3
  404d0a:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  404d0e:	d24c      	bcs.n	404daa <__multiply+0xfa>
  404d10:	f8cd a004 	str.w	sl, [sp, #4]
  404d14:	469a      	mov	sl, r3
  404d16:	f8dc 5000 	ldr.w	r5, [ip]
  404d1a:	b2af      	uxth	r7, r5
  404d1c:	b1ef      	cbz	r7, 404d5a <__multiply+0xaa>
  404d1e:	2100      	movs	r1, #0
  404d20:	464d      	mov	r5, r9
  404d22:	465e      	mov	r6, fp
  404d24:	460c      	mov	r4, r1
  404d26:	f856 2b04 	ldr.w	r2, [r6], #4
  404d2a:	6828      	ldr	r0, [r5, #0]
  404d2c:	b293      	uxth	r3, r2
  404d2e:	b281      	uxth	r1, r0
  404d30:	fb07 1303 	mla	r3, r7, r3, r1
  404d34:	0c12      	lsrs	r2, r2, #16
  404d36:	0c01      	lsrs	r1, r0, #16
  404d38:	4423      	add	r3, r4
  404d3a:	fb07 1102 	mla	r1, r7, r2, r1
  404d3e:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  404d42:	b29b      	uxth	r3, r3
  404d44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  404d48:	45b6      	cmp	lr, r6
  404d4a:	f845 3b04 	str.w	r3, [r5], #4
  404d4e:	ea4f 4411 	mov.w	r4, r1, lsr #16
  404d52:	d8e8      	bhi.n	404d26 <__multiply+0x76>
  404d54:	602c      	str	r4, [r5, #0]
  404d56:	f8dc 5000 	ldr.w	r5, [ip]
  404d5a:	0c2d      	lsrs	r5, r5, #16
  404d5c:	d01d      	beq.n	404d9a <__multiply+0xea>
  404d5e:	f8d9 3000 	ldr.w	r3, [r9]
  404d62:	4648      	mov	r0, r9
  404d64:	461c      	mov	r4, r3
  404d66:	4659      	mov	r1, fp
  404d68:	2200      	movs	r2, #0
  404d6a:	880e      	ldrh	r6, [r1, #0]
  404d6c:	0c24      	lsrs	r4, r4, #16
  404d6e:	fb05 4406 	mla	r4, r5, r6, r4
  404d72:	4422      	add	r2, r4
  404d74:	b29b      	uxth	r3, r3
  404d76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  404d7a:	f840 3b04 	str.w	r3, [r0], #4
  404d7e:	f851 3b04 	ldr.w	r3, [r1], #4
  404d82:	6804      	ldr	r4, [r0, #0]
  404d84:	0c1b      	lsrs	r3, r3, #16
  404d86:	b2a6      	uxth	r6, r4
  404d88:	fb05 6303 	mla	r3, r5, r3, r6
  404d8c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  404d90:	458e      	cmp	lr, r1
  404d92:	ea4f 4213 	mov.w	r2, r3, lsr #16
  404d96:	d8e8      	bhi.n	404d6a <__multiply+0xba>
  404d98:	6003      	str	r3, [r0, #0]
  404d9a:	f10c 0c04 	add.w	ip, ip, #4
  404d9e:	45e2      	cmp	sl, ip
  404da0:	f109 0904 	add.w	r9, r9, #4
  404da4:	d8b7      	bhi.n	404d16 <__multiply+0x66>
  404da6:	f8dd a004 	ldr.w	sl, [sp, #4]
  404daa:	f1b8 0f00 	cmp.w	r8, #0
  404dae:	dd0b      	ble.n	404dc8 <__multiply+0x118>
  404db0:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  404db4:	f1aa 0a04 	sub.w	sl, sl, #4
  404db8:	b11b      	cbz	r3, 404dc2 <__multiply+0x112>
  404dba:	e005      	b.n	404dc8 <__multiply+0x118>
  404dbc:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  404dc0:	b913      	cbnz	r3, 404dc8 <__multiply+0x118>
  404dc2:	f1b8 0801 	subs.w	r8, r8, #1
  404dc6:	d1f9      	bne.n	404dbc <__multiply+0x10c>
  404dc8:	9800      	ldr	r0, [sp, #0]
  404dca:	f8c0 8010 	str.w	r8, [r0, #16]
  404dce:	b003      	add	sp, #12
  404dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00404dd4 <__pow5mult>:
  404dd4:	f012 0303 	ands.w	r3, r2, #3
  404dd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404ddc:	4614      	mov	r4, r2
  404dde:	4607      	mov	r7, r0
  404de0:	d12e      	bne.n	404e40 <__pow5mult+0x6c>
  404de2:	460d      	mov	r5, r1
  404de4:	10a4      	asrs	r4, r4, #2
  404de6:	d01c      	beq.n	404e22 <__pow5mult+0x4e>
  404de8:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  404dea:	b396      	cbz	r6, 404e52 <__pow5mult+0x7e>
  404dec:	07e3      	lsls	r3, r4, #31
  404dee:	f04f 0800 	mov.w	r8, #0
  404df2:	d406      	bmi.n	404e02 <__pow5mult+0x2e>
  404df4:	1064      	asrs	r4, r4, #1
  404df6:	d014      	beq.n	404e22 <__pow5mult+0x4e>
  404df8:	6830      	ldr	r0, [r6, #0]
  404dfa:	b1a8      	cbz	r0, 404e28 <__pow5mult+0x54>
  404dfc:	4606      	mov	r6, r0
  404dfe:	07e3      	lsls	r3, r4, #31
  404e00:	d5f8      	bpl.n	404df4 <__pow5mult+0x20>
  404e02:	4632      	mov	r2, r6
  404e04:	4629      	mov	r1, r5
  404e06:	4638      	mov	r0, r7
  404e08:	f7ff ff52 	bl	404cb0 <__multiply>
  404e0c:	b1b5      	cbz	r5, 404e3c <__pow5mult+0x68>
  404e0e:	686a      	ldr	r2, [r5, #4]
  404e10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  404e12:	1064      	asrs	r4, r4, #1
  404e14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  404e18:	6029      	str	r1, [r5, #0]
  404e1a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  404e1e:	4605      	mov	r5, r0
  404e20:	d1ea      	bne.n	404df8 <__pow5mult+0x24>
  404e22:	4628      	mov	r0, r5
  404e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  404e28:	4632      	mov	r2, r6
  404e2a:	4631      	mov	r1, r6
  404e2c:	4638      	mov	r0, r7
  404e2e:	f7ff ff3f 	bl	404cb0 <__multiply>
  404e32:	6030      	str	r0, [r6, #0]
  404e34:	f8c0 8000 	str.w	r8, [r0]
  404e38:	4606      	mov	r6, r0
  404e3a:	e7e0      	b.n	404dfe <__pow5mult+0x2a>
  404e3c:	4605      	mov	r5, r0
  404e3e:	e7d9      	b.n	404df4 <__pow5mult+0x20>
  404e40:	1e5a      	subs	r2, r3, #1
  404e42:	4d0b      	ldr	r5, [pc, #44]	; (404e70 <__pow5mult+0x9c>)
  404e44:	2300      	movs	r3, #0
  404e46:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  404e4a:	f7ff fe97 	bl	404b7c <__multadd>
  404e4e:	4605      	mov	r5, r0
  404e50:	e7c8      	b.n	404de4 <__pow5mult+0x10>
  404e52:	2101      	movs	r1, #1
  404e54:	4638      	mov	r0, r7
  404e56:	f7ff fe61 	bl	404b1c <_Balloc>
  404e5a:	f240 2171 	movw	r1, #625	; 0x271
  404e5e:	2201      	movs	r2, #1
  404e60:	2300      	movs	r3, #0
  404e62:	6141      	str	r1, [r0, #20]
  404e64:	6102      	str	r2, [r0, #16]
  404e66:	4606      	mov	r6, r0
  404e68:	64b8      	str	r0, [r7, #72]	; 0x48
  404e6a:	6003      	str	r3, [r0, #0]
  404e6c:	e7be      	b.n	404dec <__pow5mult+0x18>
  404e6e:	bf00      	nop
  404e70:	00407310 	.word	0x00407310

00404e74 <__lshift>:
  404e74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  404e78:	4691      	mov	r9, r2
  404e7a:	690a      	ldr	r2, [r1, #16]
  404e7c:	688b      	ldr	r3, [r1, #8]
  404e7e:	ea4f 1469 	mov.w	r4, r9, asr #5
  404e82:	eb04 0802 	add.w	r8, r4, r2
  404e86:	f108 0501 	add.w	r5, r8, #1
  404e8a:	429d      	cmp	r5, r3
  404e8c:	460e      	mov	r6, r1
  404e8e:	4607      	mov	r7, r0
  404e90:	6849      	ldr	r1, [r1, #4]
  404e92:	dd04      	ble.n	404e9e <__lshift+0x2a>
  404e94:	005b      	lsls	r3, r3, #1
  404e96:	429d      	cmp	r5, r3
  404e98:	f101 0101 	add.w	r1, r1, #1
  404e9c:	dcfa      	bgt.n	404e94 <__lshift+0x20>
  404e9e:	4638      	mov	r0, r7
  404ea0:	f7ff fe3c 	bl	404b1c <_Balloc>
  404ea4:	2c00      	cmp	r4, #0
  404ea6:	f100 0314 	add.w	r3, r0, #20
  404eaa:	dd06      	ble.n	404eba <__lshift+0x46>
  404eac:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  404eb0:	2100      	movs	r1, #0
  404eb2:	f843 1b04 	str.w	r1, [r3], #4
  404eb6:	429a      	cmp	r2, r3
  404eb8:	d1fb      	bne.n	404eb2 <__lshift+0x3e>
  404eba:	6934      	ldr	r4, [r6, #16]
  404ebc:	f106 0114 	add.w	r1, r6, #20
  404ec0:	f019 091f 	ands.w	r9, r9, #31
  404ec4:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  404ec8:	d01d      	beq.n	404f06 <__lshift+0x92>
  404eca:	f1c9 0c20 	rsb	ip, r9, #32
  404ece:	2200      	movs	r2, #0
  404ed0:	680c      	ldr	r4, [r1, #0]
  404ed2:	fa04 f409 	lsl.w	r4, r4, r9
  404ed6:	4314      	orrs	r4, r2
  404ed8:	f843 4b04 	str.w	r4, [r3], #4
  404edc:	f851 2b04 	ldr.w	r2, [r1], #4
  404ee0:	458e      	cmp	lr, r1
  404ee2:	fa22 f20c 	lsr.w	r2, r2, ip
  404ee6:	d8f3      	bhi.n	404ed0 <__lshift+0x5c>
  404ee8:	601a      	str	r2, [r3, #0]
  404eea:	b10a      	cbz	r2, 404ef0 <__lshift+0x7c>
  404eec:	f108 0502 	add.w	r5, r8, #2
  404ef0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  404ef2:	6872      	ldr	r2, [r6, #4]
  404ef4:	3d01      	subs	r5, #1
  404ef6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  404efa:	6105      	str	r5, [r0, #16]
  404efc:	6031      	str	r1, [r6, #0]
  404efe:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  404f02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404f06:	3b04      	subs	r3, #4
  404f08:	f851 2b04 	ldr.w	r2, [r1], #4
  404f0c:	f843 2f04 	str.w	r2, [r3, #4]!
  404f10:	458e      	cmp	lr, r1
  404f12:	d8f9      	bhi.n	404f08 <__lshift+0x94>
  404f14:	e7ec      	b.n	404ef0 <__lshift+0x7c>
  404f16:	bf00      	nop

00404f18 <__mcmp>:
  404f18:	b430      	push	{r4, r5}
  404f1a:	690b      	ldr	r3, [r1, #16]
  404f1c:	4605      	mov	r5, r0
  404f1e:	6900      	ldr	r0, [r0, #16]
  404f20:	1ac0      	subs	r0, r0, r3
  404f22:	d10f      	bne.n	404f44 <__mcmp+0x2c>
  404f24:	009b      	lsls	r3, r3, #2
  404f26:	3514      	adds	r5, #20
  404f28:	3114      	adds	r1, #20
  404f2a:	4419      	add	r1, r3
  404f2c:	442b      	add	r3, r5
  404f2e:	e001      	b.n	404f34 <__mcmp+0x1c>
  404f30:	429d      	cmp	r5, r3
  404f32:	d207      	bcs.n	404f44 <__mcmp+0x2c>
  404f34:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  404f38:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  404f3c:	4294      	cmp	r4, r2
  404f3e:	d0f7      	beq.n	404f30 <__mcmp+0x18>
  404f40:	d302      	bcc.n	404f48 <__mcmp+0x30>
  404f42:	2001      	movs	r0, #1
  404f44:	bc30      	pop	{r4, r5}
  404f46:	4770      	bx	lr
  404f48:	f04f 30ff 	mov.w	r0, #4294967295
  404f4c:	e7fa      	b.n	404f44 <__mcmp+0x2c>
  404f4e:	bf00      	nop

00404f50 <__mdiff>:
  404f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404f54:	690f      	ldr	r7, [r1, #16]
  404f56:	460e      	mov	r6, r1
  404f58:	6911      	ldr	r1, [r2, #16]
  404f5a:	1a7f      	subs	r7, r7, r1
  404f5c:	2f00      	cmp	r7, #0
  404f5e:	4690      	mov	r8, r2
  404f60:	d117      	bne.n	404f92 <__mdiff+0x42>
  404f62:	0089      	lsls	r1, r1, #2
  404f64:	f106 0514 	add.w	r5, r6, #20
  404f68:	f102 0e14 	add.w	lr, r2, #20
  404f6c:	186b      	adds	r3, r5, r1
  404f6e:	4471      	add	r1, lr
  404f70:	e001      	b.n	404f76 <__mdiff+0x26>
  404f72:	429d      	cmp	r5, r3
  404f74:	d25c      	bcs.n	405030 <__mdiff+0xe0>
  404f76:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  404f7a:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  404f7e:	42a2      	cmp	r2, r4
  404f80:	d0f7      	beq.n	404f72 <__mdiff+0x22>
  404f82:	d25e      	bcs.n	405042 <__mdiff+0xf2>
  404f84:	4633      	mov	r3, r6
  404f86:	462c      	mov	r4, r5
  404f88:	4646      	mov	r6, r8
  404f8a:	4675      	mov	r5, lr
  404f8c:	4698      	mov	r8, r3
  404f8e:	2701      	movs	r7, #1
  404f90:	e005      	b.n	404f9e <__mdiff+0x4e>
  404f92:	db58      	blt.n	405046 <__mdiff+0xf6>
  404f94:	f106 0514 	add.w	r5, r6, #20
  404f98:	f108 0414 	add.w	r4, r8, #20
  404f9c:	2700      	movs	r7, #0
  404f9e:	6871      	ldr	r1, [r6, #4]
  404fa0:	f7ff fdbc 	bl	404b1c <_Balloc>
  404fa4:	f8d8 3010 	ldr.w	r3, [r8, #16]
  404fa8:	6936      	ldr	r6, [r6, #16]
  404faa:	60c7      	str	r7, [r0, #12]
  404fac:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  404fb0:	46a6      	mov	lr, r4
  404fb2:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  404fb6:	f100 0414 	add.w	r4, r0, #20
  404fba:	2300      	movs	r3, #0
  404fbc:	f85e 1b04 	ldr.w	r1, [lr], #4
  404fc0:	f855 8b04 	ldr.w	r8, [r5], #4
  404fc4:	b28a      	uxth	r2, r1
  404fc6:	fa13 f388 	uxtah	r3, r3, r8
  404fca:	0c09      	lsrs	r1, r1, #16
  404fcc:	1a9a      	subs	r2, r3, r2
  404fce:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  404fd2:	eb03 4322 	add.w	r3, r3, r2, asr #16
  404fd6:	b292      	uxth	r2, r2
  404fd8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  404fdc:	45f4      	cmp	ip, lr
  404fde:	f844 2b04 	str.w	r2, [r4], #4
  404fe2:	ea4f 4323 	mov.w	r3, r3, asr #16
  404fe6:	d8e9      	bhi.n	404fbc <__mdiff+0x6c>
  404fe8:	42af      	cmp	r7, r5
  404fea:	d917      	bls.n	40501c <__mdiff+0xcc>
  404fec:	46a4      	mov	ip, r4
  404fee:	46ae      	mov	lr, r5
  404ff0:	f85e 2b04 	ldr.w	r2, [lr], #4
  404ff4:	fa13 f382 	uxtah	r3, r3, r2
  404ff8:	1419      	asrs	r1, r3, #16
  404ffa:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  404ffe:	b29b      	uxth	r3, r3
  405000:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  405004:	4577      	cmp	r7, lr
  405006:	f84c 2b04 	str.w	r2, [ip], #4
  40500a:	ea4f 4321 	mov.w	r3, r1, asr #16
  40500e:	d8ef      	bhi.n	404ff0 <__mdiff+0xa0>
  405010:	43ed      	mvns	r5, r5
  405012:	442f      	add	r7, r5
  405014:	f027 0703 	bic.w	r7, r7, #3
  405018:	3704      	adds	r7, #4
  40501a:	443c      	add	r4, r7
  40501c:	3c04      	subs	r4, #4
  40501e:	b922      	cbnz	r2, 40502a <__mdiff+0xda>
  405020:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  405024:	3e01      	subs	r6, #1
  405026:	2b00      	cmp	r3, #0
  405028:	d0fa      	beq.n	405020 <__mdiff+0xd0>
  40502a:	6106      	str	r6, [r0, #16]
  40502c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405030:	2100      	movs	r1, #0
  405032:	f7ff fd73 	bl	404b1c <_Balloc>
  405036:	2201      	movs	r2, #1
  405038:	2300      	movs	r3, #0
  40503a:	6102      	str	r2, [r0, #16]
  40503c:	6143      	str	r3, [r0, #20]
  40503e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405042:	4674      	mov	r4, lr
  405044:	e7ab      	b.n	404f9e <__mdiff+0x4e>
  405046:	4633      	mov	r3, r6
  405048:	f106 0414 	add.w	r4, r6, #20
  40504c:	f102 0514 	add.w	r5, r2, #20
  405050:	4616      	mov	r6, r2
  405052:	2701      	movs	r7, #1
  405054:	4698      	mov	r8, r3
  405056:	e7a2      	b.n	404f9e <__mdiff+0x4e>

00405058 <__d2b>:
  405058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40505c:	b082      	sub	sp, #8
  40505e:	2101      	movs	r1, #1
  405060:	461c      	mov	r4, r3
  405062:	f3c3 570a 	ubfx	r7, r3, #20, #11
  405066:	4615      	mov	r5, r2
  405068:	9e08      	ldr	r6, [sp, #32]
  40506a:	f7ff fd57 	bl	404b1c <_Balloc>
  40506e:	f3c4 0413 	ubfx	r4, r4, #0, #20
  405072:	4680      	mov	r8, r0
  405074:	b10f      	cbz	r7, 40507a <__d2b+0x22>
  405076:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  40507a:	9401      	str	r4, [sp, #4]
  40507c:	b31d      	cbz	r5, 4050c6 <__d2b+0x6e>
  40507e:	a802      	add	r0, sp, #8
  405080:	f840 5d08 	str.w	r5, [r0, #-8]!
  405084:	f7ff fdda 	bl	404c3c <__lo0bits>
  405088:	2800      	cmp	r0, #0
  40508a:	d134      	bne.n	4050f6 <__d2b+0x9e>
  40508c:	e89d 000c 	ldmia.w	sp, {r2, r3}
  405090:	f8c8 2014 	str.w	r2, [r8, #20]
  405094:	2b00      	cmp	r3, #0
  405096:	bf0c      	ite	eq
  405098:	2101      	moveq	r1, #1
  40509a:	2102      	movne	r1, #2
  40509c:	f8c8 3018 	str.w	r3, [r8, #24]
  4050a0:	f8c8 1010 	str.w	r1, [r8, #16]
  4050a4:	b9df      	cbnz	r7, 4050de <__d2b+0x86>
  4050a6:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  4050aa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  4050ae:	6030      	str	r0, [r6, #0]
  4050b0:	6918      	ldr	r0, [r3, #16]
  4050b2:	f7ff fda3 	bl	404bfc <__hi0bits>
  4050b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4050b8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  4050bc:	6018      	str	r0, [r3, #0]
  4050be:	4640      	mov	r0, r8
  4050c0:	b002      	add	sp, #8
  4050c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4050c6:	a801      	add	r0, sp, #4
  4050c8:	f7ff fdb8 	bl	404c3c <__lo0bits>
  4050cc:	9b01      	ldr	r3, [sp, #4]
  4050ce:	f8c8 3014 	str.w	r3, [r8, #20]
  4050d2:	2101      	movs	r1, #1
  4050d4:	3020      	adds	r0, #32
  4050d6:	f8c8 1010 	str.w	r1, [r8, #16]
  4050da:	2f00      	cmp	r7, #0
  4050dc:	d0e3      	beq.n	4050a6 <__d2b+0x4e>
  4050de:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4050e0:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  4050e4:	4407      	add	r7, r0
  4050e6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  4050ea:	6037      	str	r7, [r6, #0]
  4050ec:	6018      	str	r0, [r3, #0]
  4050ee:	4640      	mov	r0, r8
  4050f0:	b002      	add	sp, #8
  4050f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4050f6:	e89d 000a 	ldmia.w	sp, {r1, r3}
  4050fa:	f1c0 0220 	rsb	r2, r0, #32
  4050fe:	fa03 f202 	lsl.w	r2, r3, r2
  405102:	430a      	orrs	r2, r1
  405104:	40c3      	lsrs	r3, r0
  405106:	9301      	str	r3, [sp, #4]
  405108:	f8c8 2014 	str.w	r2, [r8, #20]
  40510c:	e7c2      	b.n	405094 <__d2b+0x3c>
  40510e:	bf00      	nop

00405110 <_sbrk_r>:
  405110:	b538      	push	{r3, r4, r5, lr}
  405112:	4c07      	ldr	r4, [pc, #28]	; (405130 <_sbrk_r+0x20>)
  405114:	2300      	movs	r3, #0
  405116:	4605      	mov	r5, r0
  405118:	4608      	mov	r0, r1
  40511a:	6023      	str	r3, [r4, #0]
  40511c:	f7fc fb84 	bl	401828 <_sbrk>
  405120:	1c43      	adds	r3, r0, #1
  405122:	d000      	beq.n	405126 <_sbrk_r+0x16>
  405124:	bd38      	pop	{r3, r4, r5, pc}
  405126:	6823      	ldr	r3, [r4, #0]
  405128:	2b00      	cmp	r3, #0
  40512a:	d0fb      	beq.n	405124 <_sbrk_r+0x14>
  40512c:	602b      	str	r3, [r5, #0]
  40512e:	bd38      	pop	{r3, r4, r5, pc}
  405130:	20400cd0 	.word	0x20400cd0
	...

00405140 <strlen>:
  405140:	f890 f000 	pld	[r0]
  405144:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  405148:	f020 0107 	bic.w	r1, r0, #7
  40514c:	f06f 0c00 	mvn.w	ip, #0
  405150:	f010 0407 	ands.w	r4, r0, #7
  405154:	f891 f020 	pld	[r1, #32]
  405158:	f040 8049 	bne.w	4051ee <strlen+0xae>
  40515c:	f04f 0400 	mov.w	r4, #0
  405160:	f06f 0007 	mvn.w	r0, #7
  405164:	e9d1 2300 	ldrd	r2, r3, [r1]
  405168:	f891 f040 	pld	[r1, #64]	; 0x40
  40516c:	f100 0008 	add.w	r0, r0, #8
  405170:	fa82 f24c 	uadd8	r2, r2, ip
  405174:	faa4 f28c 	sel	r2, r4, ip
  405178:	fa83 f34c 	uadd8	r3, r3, ip
  40517c:	faa2 f38c 	sel	r3, r2, ip
  405180:	bb4b      	cbnz	r3, 4051d6 <strlen+0x96>
  405182:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  405186:	fa82 f24c 	uadd8	r2, r2, ip
  40518a:	f100 0008 	add.w	r0, r0, #8
  40518e:	faa4 f28c 	sel	r2, r4, ip
  405192:	fa83 f34c 	uadd8	r3, r3, ip
  405196:	faa2 f38c 	sel	r3, r2, ip
  40519a:	b9e3      	cbnz	r3, 4051d6 <strlen+0x96>
  40519c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4051a0:	fa82 f24c 	uadd8	r2, r2, ip
  4051a4:	f100 0008 	add.w	r0, r0, #8
  4051a8:	faa4 f28c 	sel	r2, r4, ip
  4051ac:	fa83 f34c 	uadd8	r3, r3, ip
  4051b0:	faa2 f38c 	sel	r3, r2, ip
  4051b4:	b97b      	cbnz	r3, 4051d6 <strlen+0x96>
  4051b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4051ba:	f101 0120 	add.w	r1, r1, #32
  4051be:	fa82 f24c 	uadd8	r2, r2, ip
  4051c2:	f100 0008 	add.w	r0, r0, #8
  4051c6:	faa4 f28c 	sel	r2, r4, ip
  4051ca:	fa83 f34c 	uadd8	r3, r3, ip
  4051ce:	faa2 f38c 	sel	r3, r2, ip
  4051d2:	2b00      	cmp	r3, #0
  4051d4:	d0c6      	beq.n	405164 <strlen+0x24>
  4051d6:	2a00      	cmp	r2, #0
  4051d8:	bf04      	itt	eq
  4051da:	3004      	addeq	r0, #4
  4051dc:	461a      	moveq	r2, r3
  4051de:	ba12      	rev	r2, r2
  4051e0:	fab2 f282 	clz	r2, r2
  4051e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  4051e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  4051ec:	4770      	bx	lr
  4051ee:	e9d1 2300 	ldrd	r2, r3, [r1]
  4051f2:	f004 0503 	and.w	r5, r4, #3
  4051f6:	f1c4 0000 	rsb	r0, r4, #0
  4051fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  4051fe:	f014 0f04 	tst.w	r4, #4
  405202:	f891 f040 	pld	[r1, #64]	; 0x40
  405206:	fa0c f505 	lsl.w	r5, ip, r5
  40520a:	ea62 0205 	orn	r2, r2, r5
  40520e:	bf1c      	itt	ne
  405210:	ea63 0305 	ornne	r3, r3, r5
  405214:	4662      	movne	r2, ip
  405216:	f04f 0400 	mov.w	r4, #0
  40521a:	e7a9      	b.n	405170 <strlen+0x30>

0040521c <__ssprint_r>:
  40521c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405220:	6893      	ldr	r3, [r2, #8]
  405222:	b083      	sub	sp, #12
  405224:	4690      	mov	r8, r2
  405226:	2b00      	cmp	r3, #0
  405228:	d070      	beq.n	40530c <__ssprint_r+0xf0>
  40522a:	4682      	mov	sl, r0
  40522c:	460c      	mov	r4, r1
  40522e:	6817      	ldr	r7, [r2, #0]
  405230:	688d      	ldr	r5, [r1, #8]
  405232:	6808      	ldr	r0, [r1, #0]
  405234:	e042      	b.n	4052bc <__ssprint_r+0xa0>
  405236:	89a3      	ldrh	r3, [r4, #12]
  405238:	f413 6f90 	tst.w	r3, #1152	; 0x480
  40523c:	d02e      	beq.n	40529c <__ssprint_r+0x80>
  40523e:	6965      	ldr	r5, [r4, #20]
  405240:	6921      	ldr	r1, [r4, #16]
  405242:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  405246:	eba0 0b01 	sub.w	fp, r0, r1
  40524a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
  40524e:	f10b 0001 	add.w	r0, fp, #1
  405252:	106d      	asrs	r5, r5, #1
  405254:	4430      	add	r0, r6
  405256:	42a8      	cmp	r0, r5
  405258:	462a      	mov	r2, r5
  40525a:	bf84      	itt	hi
  40525c:	4605      	movhi	r5, r0
  40525e:	462a      	movhi	r2, r5
  405260:	055b      	lsls	r3, r3, #21
  405262:	d538      	bpl.n	4052d6 <__ssprint_r+0xba>
  405264:	4611      	mov	r1, r2
  405266:	4650      	mov	r0, sl
  405268:	f7ff f8ac 	bl	4043c4 <_malloc_r>
  40526c:	2800      	cmp	r0, #0
  40526e:	d03c      	beq.n	4052ea <__ssprint_r+0xce>
  405270:	465a      	mov	r2, fp
  405272:	6921      	ldr	r1, [r4, #16]
  405274:	9001      	str	r0, [sp, #4]
  405276:	f7ff fbab 	bl	4049d0 <memcpy>
  40527a:	89a2      	ldrh	r2, [r4, #12]
  40527c:	9b01      	ldr	r3, [sp, #4]
  40527e:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  405282:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  405286:	81a2      	strh	r2, [r4, #12]
  405288:	eba5 020b 	sub.w	r2, r5, fp
  40528c:	eb03 000b 	add.w	r0, r3, fp
  405290:	6165      	str	r5, [r4, #20]
  405292:	6123      	str	r3, [r4, #16]
  405294:	6020      	str	r0, [r4, #0]
  405296:	60a2      	str	r2, [r4, #8]
  405298:	4635      	mov	r5, r6
  40529a:	46b3      	mov	fp, r6
  40529c:	465a      	mov	r2, fp
  40529e:	4649      	mov	r1, r9
  4052a0:	f000 fa18 	bl	4056d4 <memmove>
  4052a4:	f8d8 3008 	ldr.w	r3, [r8, #8]
  4052a8:	68a2      	ldr	r2, [r4, #8]
  4052aa:	6820      	ldr	r0, [r4, #0]
  4052ac:	1b55      	subs	r5, r2, r5
  4052ae:	4458      	add	r0, fp
  4052b0:	1b9e      	subs	r6, r3, r6
  4052b2:	60a5      	str	r5, [r4, #8]
  4052b4:	6020      	str	r0, [r4, #0]
  4052b6:	f8c8 6008 	str.w	r6, [r8, #8]
  4052ba:	b33e      	cbz	r6, 40530c <__ssprint_r+0xf0>
  4052bc:	687e      	ldr	r6, [r7, #4]
  4052be:	463b      	mov	r3, r7
  4052c0:	3708      	adds	r7, #8
  4052c2:	2e00      	cmp	r6, #0
  4052c4:	d0fa      	beq.n	4052bc <__ssprint_r+0xa0>
  4052c6:	42ae      	cmp	r6, r5
  4052c8:	f8d3 9000 	ldr.w	r9, [r3]
  4052cc:	46ab      	mov	fp, r5
  4052ce:	d2b2      	bcs.n	405236 <__ssprint_r+0x1a>
  4052d0:	4635      	mov	r5, r6
  4052d2:	46b3      	mov	fp, r6
  4052d4:	e7e2      	b.n	40529c <__ssprint_r+0x80>
  4052d6:	4650      	mov	r0, sl
  4052d8:	f000 fa60 	bl	40579c <_realloc_r>
  4052dc:	4603      	mov	r3, r0
  4052de:	2800      	cmp	r0, #0
  4052e0:	d1d2      	bne.n	405288 <__ssprint_r+0x6c>
  4052e2:	6921      	ldr	r1, [r4, #16]
  4052e4:	4650      	mov	r0, sl
  4052e6:	f000 f8f9 	bl	4054dc <_free_r>
  4052ea:	230c      	movs	r3, #12
  4052ec:	f8ca 3000 	str.w	r3, [sl]
  4052f0:	89a3      	ldrh	r3, [r4, #12]
  4052f2:	2200      	movs	r2, #0
  4052f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4052f8:	f04f 30ff 	mov.w	r0, #4294967295
  4052fc:	81a3      	strh	r3, [r4, #12]
  4052fe:	f8c8 2008 	str.w	r2, [r8, #8]
  405302:	f8c8 2004 	str.w	r2, [r8, #4]
  405306:	b003      	add	sp, #12
  405308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40530c:	2000      	movs	r0, #0
  40530e:	f8c8 0004 	str.w	r0, [r8, #4]
  405312:	b003      	add	sp, #12
  405314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00405318 <__register_exitproc>:
  405318:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  40531c:	4d2c      	ldr	r5, [pc, #176]	; (4053d0 <__register_exitproc+0xb8>)
  40531e:	4606      	mov	r6, r0
  405320:	6828      	ldr	r0, [r5, #0]
  405322:	4698      	mov	r8, r3
  405324:	460f      	mov	r7, r1
  405326:	4691      	mov	r9, r2
  405328:	f7ff f848 	bl	4043bc <__retarget_lock_acquire_recursive>
  40532c:	4b29      	ldr	r3, [pc, #164]	; (4053d4 <__register_exitproc+0xbc>)
  40532e:	681c      	ldr	r4, [r3, #0]
  405330:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  405334:	2b00      	cmp	r3, #0
  405336:	d03e      	beq.n	4053b6 <__register_exitproc+0x9e>
  405338:	685a      	ldr	r2, [r3, #4]
  40533a:	2a1f      	cmp	r2, #31
  40533c:	dc1c      	bgt.n	405378 <__register_exitproc+0x60>
  40533e:	f102 0e01 	add.w	lr, r2, #1
  405342:	b176      	cbz	r6, 405362 <__register_exitproc+0x4a>
  405344:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  405348:	2401      	movs	r4, #1
  40534a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  40534e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  405352:	4094      	lsls	r4, r2
  405354:	4320      	orrs	r0, r4
  405356:	2e02      	cmp	r6, #2
  405358:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  40535c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  405360:	d023      	beq.n	4053aa <__register_exitproc+0x92>
  405362:	3202      	adds	r2, #2
  405364:	f8c3 e004 	str.w	lr, [r3, #4]
  405368:	6828      	ldr	r0, [r5, #0]
  40536a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40536e:	f7ff f827 	bl	4043c0 <__retarget_lock_release_recursive>
  405372:	2000      	movs	r0, #0
  405374:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405378:	4b17      	ldr	r3, [pc, #92]	; (4053d8 <__register_exitproc+0xc0>)
  40537a:	b30b      	cbz	r3, 4053c0 <__register_exitproc+0xa8>
  40537c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  405380:	f3af 8000 	nop.w
  405384:	4603      	mov	r3, r0
  405386:	b1d8      	cbz	r0, 4053c0 <__register_exitproc+0xa8>
  405388:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40538c:	6002      	str	r2, [r0, #0]
  40538e:	2100      	movs	r1, #0
  405390:	6041      	str	r1, [r0, #4]
  405392:	460a      	mov	r2, r1
  405394:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  405398:	f04f 0e01 	mov.w	lr, #1
  40539c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  4053a0:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  4053a4:	2e00      	cmp	r6, #0
  4053a6:	d0dc      	beq.n	405362 <__register_exitproc+0x4a>
  4053a8:	e7cc      	b.n	405344 <__register_exitproc+0x2c>
  4053aa:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  4053ae:	430c      	orrs	r4, r1
  4053b0:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  4053b4:	e7d5      	b.n	405362 <__register_exitproc+0x4a>
  4053b6:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  4053ba:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  4053be:	e7bb      	b.n	405338 <__register_exitproc+0x20>
  4053c0:	6828      	ldr	r0, [r5, #0]
  4053c2:	f7fe fffd 	bl	4043c0 <__retarget_lock_release_recursive>
  4053c6:	f04f 30ff 	mov.w	r0, #4294967295
  4053ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4053ce:	bf00      	nop
  4053d0:	20400450 	.word	0x20400450
  4053d4:	004071a8 	.word	0x004071a8
  4053d8:	00000000 	.word	0x00000000

004053dc <_calloc_r>:
  4053dc:	b510      	push	{r4, lr}
  4053de:	fb02 f101 	mul.w	r1, r2, r1
  4053e2:	f7fe ffef 	bl	4043c4 <_malloc_r>
  4053e6:	4604      	mov	r4, r0
  4053e8:	b1d8      	cbz	r0, 405422 <_calloc_r+0x46>
  4053ea:	f850 2c04 	ldr.w	r2, [r0, #-4]
  4053ee:	f022 0203 	bic.w	r2, r2, #3
  4053f2:	3a04      	subs	r2, #4
  4053f4:	2a24      	cmp	r2, #36	; 0x24
  4053f6:	d818      	bhi.n	40542a <_calloc_r+0x4e>
  4053f8:	2a13      	cmp	r2, #19
  4053fa:	d914      	bls.n	405426 <_calloc_r+0x4a>
  4053fc:	2300      	movs	r3, #0
  4053fe:	2a1b      	cmp	r2, #27
  405400:	6003      	str	r3, [r0, #0]
  405402:	6043      	str	r3, [r0, #4]
  405404:	d916      	bls.n	405434 <_calloc_r+0x58>
  405406:	2a24      	cmp	r2, #36	; 0x24
  405408:	6083      	str	r3, [r0, #8]
  40540a:	60c3      	str	r3, [r0, #12]
  40540c:	bf11      	iteee	ne
  40540e:	f100 0210 	addne.w	r2, r0, #16
  405412:	6103      	streq	r3, [r0, #16]
  405414:	6143      	streq	r3, [r0, #20]
  405416:	f100 0218 	addeq.w	r2, r0, #24
  40541a:	2300      	movs	r3, #0
  40541c:	6013      	str	r3, [r2, #0]
  40541e:	6053      	str	r3, [r2, #4]
  405420:	6093      	str	r3, [r2, #8]
  405422:	4620      	mov	r0, r4
  405424:	bd10      	pop	{r4, pc}
  405426:	4602      	mov	r2, r0
  405428:	e7f7      	b.n	40541a <_calloc_r+0x3e>
  40542a:	2100      	movs	r1, #0
  40542c:	f7fc fd2e 	bl	401e8c <memset>
  405430:	4620      	mov	r0, r4
  405432:	bd10      	pop	{r4, pc}
  405434:	f100 0208 	add.w	r2, r0, #8
  405438:	e7ef      	b.n	40541a <_calloc_r+0x3e>
  40543a:	bf00      	nop

0040543c <_malloc_trim_r>:
  40543c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40543e:	4f24      	ldr	r7, [pc, #144]	; (4054d0 <_malloc_trim_r+0x94>)
  405440:	460c      	mov	r4, r1
  405442:	4606      	mov	r6, r0
  405444:	f7ff fb5e 	bl	404b04 <__malloc_lock>
  405448:	68bb      	ldr	r3, [r7, #8]
  40544a:	685d      	ldr	r5, [r3, #4]
  40544c:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  405450:	310f      	adds	r1, #15
  405452:	f025 0503 	bic.w	r5, r5, #3
  405456:	4429      	add	r1, r5
  405458:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  40545c:	f021 010f 	bic.w	r1, r1, #15
  405460:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  405464:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  405468:	db07      	blt.n	40547a <_malloc_trim_r+0x3e>
  40546a:	2100      	movs	r1, #0
  40546c:	4630      	mov	r0, r6
  40546e:	f7ff fe4f 	bl	405110 <_sbrk_r>
  405472:	68bb      	ldr	r3, [r7, #8]
  405474:	442b      	add	r3, r5
  405476:	4298      	cmp	r0, r3
  405478:	d004      	beq.n	405484 <_malloc_trim_r+0x48>
  40547a:	4630      	mov	r0, r6
  40547c:	f7ff fb48 	bl	404b10 <__malloc_unlock>
  405480:	2000      	movs	r0, #0
  405482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405484:	4261      	negs	r1, r4
  405486:	4630      	mov	r0, r6
  405488:	f7ff fe42 	bl	405110 <_sbrk_r>
  40548c:	3001      	adds	r0, #1
  40548e:	d00d      	beq.n	4054ac <_malloc_trim_r+0x70>
  405490:	4b10      	ldr	r3, [pc, #64]	; (4054d4 <_malloc_trim_r+0x98>)
  405492:	68ba      	ldr	r2, [r7, #8]
  405494:	6819      	ldr	r1, [r3, #0]
  405496:	1b2d      	subs	r5, r5, r4
  405498:	f045 0501 	orr.w	r5, r5, #1
  40549c:	4630      	mov	r0, r6
  40549e:	1b09      	subs	r1, r1, r4
  4054a0:	6055      	str	r5, [r2, #4]
  4054a2:	6019      	str	r1, [r3, #0]
  4054a4:	f7ff fb34 	bl	404b10 <__malloc_unlock>
  4054a8:	2001      	movs	r0, #1
  4054aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4054ac:	2100      	movs	r1, #0
  4054ae:	4630      	mov	r0, r6
  4054b0:	f7ff fe2e 	bl	405110 <_sbrk_r>
  4054b4:	68ba      	ldr	r2, [r7, #8]
  4054b6:	1a83      	subs	r3, r0, r2
  4054b8:	2b0f      	cmp	r3, #15
  4054ba:	ddde      	ble.n	40547a <_malloc_trim_r+0x3e>
  4054bc:	4c06      	ldr	r4, [pc, #24]	; (4054d8 <_malloc_trim_r+0x9c>)
  4054be:	4905      	ldr	r1, [pc, #20]	; (4054d4 <_malloc_trim_r+0x98>)
  4054c0:	6824      	ldr	r4, [r4, #0]
  4054c2:	f043 0301 	orr.w	r3, r3, #1
  4054c6:	1b00      	subs	r0, r0, r4
  4054c8:	6053      	str	r3, [r2, #4]
  4054ca:	6008      	str	r0, [r1, #0]
  4054cc:	e7d5      	b.n	40547a <_malloc_trim_r+0x3e>
  4054ce:	bf00      	nop
  4054d0:	20400454 	.word	0x20400454
  4054d4:	20400c78 	.word	0x20400c78
  4054d8:	2040085c 	.word	0x2040085c

004054dc <_free_r>:
  4054dc:	2900      	cmp	r1, #0
  4054de:	d044      	beq.n	40556a <_free_r+0x8e>
  4054e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4054e4:	460d      	mov	r5, r1
  4054e6:	4680      	mov	r8, r0
  4054e8:	f7ff fb0c 	bl	404b04 <__malloc_lock>
  4054ec:	f855 7c04 	ldr.w	r7, [r5, #-4]
  4054f0:	4969      	ldr	r1, [pc, #420]	; (405698 <_free_r+0x1bc>)
  4054f2:	f027 0301 	bic.w	r3, r7, #1
  4054f6:	f1a5 0408 	sub.w	r4, r5, #8
  4054fa:	18e2      	adds	r2, r4, r3
  4054fc:	688e      	ldr	r6, [r1, #8]
  4054fe:	6850      	ldr	r0, [r2, #4]
  405500:	42b2      	cmp	r2, r6
  405502:	f020 0003 	bic.w	r0, r0, #3
  405506:	d05e      	beq.n	4055c6 <_free_r+0xea>
  405508:	07fe      	lsls	r6, r7, #31
  40550a:	6050      	str	r0, [r2, #4]
  40550c:	d40b      	bmi.n	405526 <_free_r+0x4a>
  40550e:	f855 7c08 	ldr.w	r7, [r5, #-8]
  405512:	1be4      	subs	r4, r4, r7
  405514:	f101 0e08 	add.w	lr, r1, #8
  405518:	68a5      	ldr	r5, [r4, #8]
  40551a:	4575      	cmp	r5, lr
  40551c:	443b      	add	r3, r7
  40551e:	d06d      	beq.n	4055fc <_free_r+0x120>
  405520:	68e7      	ldr	r7, [r4, #12]
  405522:	60ef      	str	r7, [r5, #12]
  405524:	60bd      	str	r5, [r7, #8]
  405526:	1815      	adds	r5, r2, r0
  405528:	686d      	ldr	r5, [r5, #4]
  40552a:	07ed      	lsls	r5, r5, #31
  40552c:	d53e      	bpl.n	4055ac <_free_r+0xd0>
  40552e:	f043 0201 	orr.w	r2, r3, #1
  405532:	6062      	str	r2, [r4, #4]
  405534:	50e3      	str	r3, [r4, r3]
  405536:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  40553a:	d217      	bcs.n	40556c <_free_r+0x90>
  40553c:	08db      	lsrs	r3, r3, #3
  40553e:	1c58      	adds	r0, r3, #1
  405540:	109a      	asrs	r2, r3, #2
  405542:	684d      	ldr	r5, [r1, #4]
  405544:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  405548:	60a7      	str	r7, [r4, #8]
  40554a:	2301      	movs	r3, #1
  40554c:	4093      	lsls	r3, r2
  40554e:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  405552:	432b      	orrs	r3, r5
  405554:	3a08      	subs	r2, #8
  405556:	60e2      	str	r2, [r4, #12]
  405558:	604b      	str	r3, [r1, #4]
  40555a:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  40555e:	60fc      	str	r4, [r7, #12]
  405560:	4640      	mov	r0, r8
  405562:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  405566:	f7ff bad3 	b.w	404b10 <__malloc_unlock>
  40556a:	4770      	bx	lr
  40556c:	0a5a      	lsrs	r2, r3, #9
  40556e:	2a04      	cmp	r2, #4
  405570:	d852      	bhi.n	405618 <_free_r+0x13c>
  405572:	099a      	lsrs	r2, r3, #6
  405574:	f102 0739 	add.w	r7, r2, #57	; 0x39
  405578:	00ff      	lsls	r7, r7, #3
  40557a:	f102 0538 	add.w	r5, r2, #56	; 0x38
  40557e:	19c8      	adds	r0, r1, r7
  405580:	59ca      	ldr	r2, [r1, r7]
  405582:	3808      	subs	r0, #8
  405584:	4290      	cmp	r0, r2
  405586:	d04f      	beq.n	405628 <_free_r+0x14c>
  405588:	6851      	ldr	r1, [r2, #4]
  40558a:	f021 0103 	bic.w	r1, r1, #3
  40558e:	428b      	cmp	r3, r1
  405590:	d232      	bcs.n	4055f8 <_free_r+0x11c>
  405592:	6892      	ldr	r2, [r2, #8]
  405594:	4290      	cmp	r0, r2
  405596:	d1f7      	bne.n	405588 <_free_r+0xac>
  405598:	68c3      	ldr	r3, [r0, #12]
  40559a:	60a0      	str	r0, [r4, #8]
  40559c:	60e3      	str	r3, [r4, #12]
  40559e:	609c      	str	r4, [r3, #8]
  4055a0:	60c4      	str	r4, [r0, #12]
  4055a2:	4640      	mov	r0, r8
  4055a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4055a8:	f7ff bab2 	b.w	404b10 <__malloc_unlock>
  4055ac:	6895      	ldr	r5, [r2, #8]
  4055ae:	4f3b      	ldr	r7, [pc, #236]	; (40569c <_free_r+0x1c0>)
  4055b0:	42bd      	cmp	r5, r7
  4055b2:	4403      	add	r3, r0
  4055b4:	d040      	beq.n	405638 <_free_r+0x15c>
  4055b6:	68d0      	ldr	r0, [r2, #12]
  4055b8:	60e8      	str	r0, [r5, #12]
  4055ba:	f043 0201 	orr.w	r2, r3, #1
  4055be:	6085      	str	r5, [r0, #8]
  4055c0:	6062      	str	r2, [r4, #4]
  4055c2:	50e3      	str	r3, [r4, r3]
  4055c4:	e7b7      	b.n	405536 <_free_r+0x5a>
  4055c6:	07ff      	lsls	r7, r7, #31
  4055c8:	4403      	add	r3, r0
  4055ca:	d407      	bmi.n	4055dc <_free_r+0x100>
  4055cc:	f855 2c08 	ldr.w	r2, [r5, #-8]
  4055d0:	1aa4      	subs	r4, r4, r2
  4055d2:	4413      	add	r3, r2
  4055d4:	68a0      	ldr	r0, [r4, #8]
  4055d6:	68e2      	ldr	r2, [r4, #12]
  4055d8:	60c2      	str	r2, [r0, #12]
  4055da:	6090      	str	r0, [r2, #8]
  4055dc:	4a30      	ldr	r2, [pc, #192]	; (4056a0 <_free_r+0x1c4>)
  4055de:	6812      	ldr	r2, [r2, #0]
  4055e0:	f043 0001 	orr.w	r0, r3, #1
  4055e4:	4293      	cmp	r3, r2
  4055e6:	6060      	str	r0, [r4, #4]
  4055e8:	608c      	str	r4, [r1, #8]
  4055ea:	d3b9      	bcc.n	405560 <_free_r+0x84>
  4055ec:	4b2d      	ldr	r3, [pc, #180]	; (4056a4 <_free_r+0x1c8>)
  4055ee:	4640      	mov	r0, r8
  4055f0:	6819      	ldr	r1, [r3, #0]
  4055f2:	f7ff ff23 	bl	40543c <_malloc_trim_r>
  4055f6:	e7b3      	b.n	405560 <_free_r+0x84>
  4055f8:	4610      	mov	r0, r2
  4055fa:	e7cd      	b.n	405598 <_free_r+0xbc>
  4055fc:	1811      	adds	r1, r2, r0
  4055fe:	6849      	ldr	r1, [r1, #4]
  405600:	07c9      	lsls	r1, r1, #31
  405602:	d444      	bmi.n	40568e <_free_r+0x1b2>
  405604:	6891      	ldr	r1, [r2, #8]
  405606:	68d2      	ldr	r2, [r2, #12]
  405608:	60ca      	str	r2, [r1, #12]
  40560a:	4403      	add	r3, r0
  40560c:	f043 0001 	orr.w	r0, r3, #1
  405610:	6091      	str	r1, [r2, #8]
  405612:	6060      	str	r0, [r4, #4]
  405614:	50e3      	str	r3, [r4, r3]
  405616:	e7a3      	b.n	405560 <_free_r+0x84>
  405618:	2a14      	cmp	r2, #20
  40561a:	d816      	bhi.n	40564a <_free_r+0x16e>
  40561c:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  405620:	00ff      	lsls	r7, r7, #3
  405622:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  405626:	e7aa      	b.n	40557e <_free_r+0xa2>
  405628:	10aa      	asrs	r2, r5, #2
  40562a:	2301      	movs	r3, #1
  40562c:	684d      	ldr	r5, [r1, #4]
  40562e:	4093      	lsls	r3, r2
  405630:	432b      	orrs	r3, r5
  405632:	604b      	str	r3, [r1, #4]
  405634:	4603      	mov	r3, r0
  405636:	e7b0      	b.n	40559a <_free_r+0xbe>
  405638:	f043 0201 	orr.w	r2, r3, #1
  40563c:	614c      	str	r4, [r1, #20]
  40563e:	610c      	str	r4, [r1, #16]
  405640:	60e5      	str	r5, [r4, #12]
  405642:	60a5      	str	r5, [r4, #8]
  405644:	6062      	str	r2, [r4, #4]
  405646:	50e3      	str	r3, [r4, r3]
  405648:	e78a      	b.n	405560 <_free_r+0x84>
  40564a:	2a54      	cmp	r2, #84	; 0x54
  40564c:	d806      	bhi.n	40565c <_free_r+0x180>
  40564e:	0b1a      	lsrs	r2, r3, #12
  405650:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  405654:	00ff      	lsls	r7, r7, #3
  405656:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  40565a:	e790      	b.n	40557e <_free_r+0xa2>
  40565c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  405660:	d806      	bhi.n	405670 <_free_r+0x194>
  405662:	0bda      	lsrs	r2, r3, #15
  405664:	f102 0778 	add.w	r7, r2, #120	; 0x78
  405668:	00ff      	lsls	r7, r7, #3
  40566a:	f102 0577 	add.w	r5, r2, #119	; 0x77
  40566e:	e786      	b.n	40557e <_free_r+0xa2>
  405670:	f240 5054 	movw	r0, #1364	; 0x554
  405674:	4282      	cmp	r2, r0
  405676:	d806      	bhi.n	405686 <_free_r+0x1aa>
  405678:	0c9a      	lsrs	r2, r3, #18
  40567a:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  40567e:	00ff      	lsls	r7, r7, #3
  405680:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  405684:	e77b      	b.n	40557e <_free_r+0xa2>
  405686:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  40568a:	257e      	movs	r5, #126	; 0x7e
  40568c:	e777      	b.n	40557e <_free_r+0xa2>
  40568e:	f043 0101 	orr.w	r1, r3, #1
  405692:	6061      	str	r1, [r4, #4]
  405694:	6013      	str	r3, [r2, #0]
  405696:	e763      	b.n	405560 <_free_r+0x84>
  405698:	20400454 	.word	0x20400454
  40569c:	2040045c 	.word	0x2040045c
  4056a0:	20400860 	.word	0x20400860
  4056a4:	20400ca8 	.word	0x20400ca8

004056a8 <__ascii_mbtowc>:
  4056a8:	b082      	sub	sp, #8
  4056aa:	b149      	cbz	r1, 4056c0 <__ascii_mbtowc+0x18>
  4056ac:	b15a      	cbz	r2, 4056c6 <__ascii_mbtowc+0x1e>
  4056ae:	b16b      	cbz	r3, 4056cc <__ascii_mbtowc+0x24>
  4056b0:	7813      	ldrb	r3, [r2, #0]
  4056b2:	600b      	str	r3, [r1, #0]
  4056b4:	7812      	ldrb	r2, [r2, #0]
  4056b6:	1c10      	adds	r0, r2, #0
  4056b8:	bf18      	it	ne
  4056ba:	2001      	movne	r0, #1
  4056bc:	b002      	add	sp, #8
  4056be:	4770      	bx	lr
  4056c0:	a901      	add	r1, sp, #4
  4056c2:	2a00      	cmp	r2, #0
  4056c4:	d1f3      	bne.n	4056ae <__ascii_mbtowc+0x6>
  4056c6:	4610      	mov	r0, r2
  4056c8:	b002      	add	sp, #8
  4056ca:	4770      	bx	lr
  4056cc:	f06f 0001 	mvn.w	r0, #1
  4056d0:	e7f4      	b.n	4056bc <__ascii_mbtowc+0x14>
  4056d2:	bf00      	nop

004056d4 <memmove>:
  4056d4:	4288      	cmp	r0, r1
  4056d6:	b5f0      	push	{r4, r5, r6, r7, lr}
  4056d8:	d90d      	bls.n	4056f6 <memmove+0x22>
  4056da:	188b      	adds	r3, r1, r2
  4056dc:	4298      	cmp	r0, r3
  4056de:	d20a      	bcs.n	4056f6 <memmove+0x22>
  4056e0:	1884      	adds	r4, r0, r2
  4056e2:	2a00      	cmp	r2, #0
  4056e4:	d051      	beq.n	40578a <memmove+0xb6>
  4056e6:	4622      	mov	r2, r4
  4056e8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  4056ec:	f802 4d01 	strb.w	r4, [r2, #-1]!
  4056f0:	4299      	cmp	r1, r3
  4056f2:	d1f9      	bne.n	4056e8 <memmove+0x14>
  4056f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4056f6:	2a0f      	cmp	r2, #15
  4056f8:	d948      	bls.n	40578c <memmove+0xb8>
  4056fa:	ea41 0300 	orr.w	r3, r1, r0
  4056fe:	079b      	lsls	r3, r3, #30
  405700:	d146      	bne.n	405790 <memmove+0xbc>
  405702:	f100 0410 	add.w	r4, r0, #16
  405706:	f101 0310 	add.w	r3, r1, #16
  40570a:	4615      	mov	r5, r2
  40570c:	f853 6c10 	ldr.w	r6, [r3, #-16]
  405710:	f844 6c10 	str.w	r6, [r4, #-16]
  405714:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  405718:	f844 6c0c 	str.w	r6, [r4, #-12]
  40571c:	f853 6c08 	ldr.w	r6, [r3, #-8]
  405720:	f844 6c08 	str.w	r6, [r4, #-8]
  405724:	3d10      	subs	r5, #16
  405726:	f853 6c04 	ldr.w	r6, [r3, #-4]
  40572a:	f844 6c04 	str.w	r6, [r4, #-4]
  40572e:	2d0f      	cmp	r5, #15
  405730:	f103 0310 	add.w	r3, r3, #16
  405734:	f104 0410 	add.w	r4, r4, #16
  405738:	d8e8      	bhi.n	40570c <memmove+0x38>
  40573a:	f1a2 0310 	sub.w	r3, r2, #16
  40573e:	f023 030f 	bic.w	r3, r3, #15
  405742:	f002 0e0f 	and.w	lr, r2, #15
  405746:	3310      	adds	r3, #16
  405748:	f1be 0f03 	cmp.w	lr, #3
  40574c:	4419      	add	r1, r3
  40574e:	4403      	add	r3, r0
  405750:	d921      	bls.n	405796 <memmove+0xc2>
  405752:	1f1e      	subs	r6, r3, #4
  405754:	460d      	mov	r5, r1
  405756:	4674      	mov	r4, lr
  405758:	3c04      	subs	r4, #4
  40575a:	f855 7b04 	ldr.w	r7, [r5], #4
  40575e:	f846 7f04 	str.w	r7, [r6, #4]!
  405762:	2c03      	cmp	r4, #3
  405764:	d8f8      	bhi.n	405758 <memmove+0x84>
  405766:	f1ae 0404 	sub.w	r4, lr, #4
  40576a:	f024 0403 	bic.w	r4, r4, #3
  40576e:	3404      	adds	r4, #4
  405770:	4421      	add	r1, r4
  405772:	4423      	add	r3, r4
  405774:	f002 0203 	and.w	r2, r2, #3
  405778:	b162      	cbz	r2, 405794 <memmove+0xc0>
  40577a:	3b01      	subs	r3, #1
  40577c:	440a      	add	r2, r1
  40577e:	f811 4b01 	ldrb.w	r4, [r1], #1
  405782:	f803 4f01 	strb.w	r4, [r3, #1]!
  405786:	428a      	cmp	r2, r1
  405788:	d1f9      	bne.n	40577e <memmove+0xaa>
  40578a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40578c:	4603      	mov	r3, r0
  40578e:	e7f3      	b.n	405778 <memmove+0xa4>
  405790:	4603      	mov	r3, r0
  405792:	e7f2      	b.n	40577a <memmove+0xa6>
  405794:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405796:	4672      	mov	r2, lr
  405798:	e7ee      	b.n	405778 <memmove+0xa4>
  40579a:	bf00      	nop

0040579c <_realloc_r>:
  40579c:	2900      	cmp	r1, #0
  40579e:	f000 8095 	beq.w	4058cc <_realloc_r+0x130>
  4057a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4057a6:	460d      	mov	r5, r1
  4057a8:	4616      	mov	r6, r2
  4057aa:	b083      	sub	sp, #12
  4057ac:	4680      	mov	r8, r0
  4057ae:	f106 070b 	add.w	r7, r6, #11
  4057b2:	f7ff f9a7 	bl	404b04 <__malloc_lock>
  4057b6:	f855 ec04 	ldr.w	lr, [r5, #-4]
  4057ba:	2f16      	cmp	r7, #22
  4057bc:	f02e 0403 	bic.w	r4, lr, #3
  4057c0:	f1a5 0908 	sub.w	r9, r5, #8
  4057c4:	d83c      	bhi.n	405840 <_realloc_r+0xa4>
  4057c6:	2210      	movs	r2, #16
  4057c8:	4617      	mov	r7, r2
  4057ca:	42be      	cmp	r6, r7
  4057cc:	d83d      	bhi.n	40584a <_realloc_r+0xae>
  4057ce:	4294      	cmp	r4, r2
  4057d0:	da43      	bge.n	40585a <_realloc_r+0xbe>
  4057d2:	4bc4      	ldr	r3, [pc, #784]	; (405ae4 <_realloc_r+0x348>)
  4057d4:	6899      	ldr	r1, [r3, #8]
  4057d6:	eb09 0004 	add.w	r0, r9, r4
  4057da:	4288      	cmp	r0, r1
  4057dc:	f000 80b4 	beq.w	405948 <_realloc_r+0x1ac>
  4057e0:	6843      	ldr	r3, [r0, #4]
  4057e2:	f023 0101 	bic.w	r1, r3, #1
  4057e6:	4401      	add	r1, r0
  4057e8:	6849      	ldr	r1, [r1, #4]
  4057ea:	07c9      	lsls	r1, r1, #31
  4057ec:	d54c      	bpl.n	405888 <_realloc_r+0xec>
  4057ee:	f01e 0f01 	tst.w	lr, #1
  4057f2:	f000 809b 	beq.w	40592c <_realloc_r+0x190>
  4057f6:	4631      	mov	r1, r6
  4057f8:	4640      	mov	r0, r8
  4057fa:	f7fe fde3 	bl	4043c4 <_malloc_r>
  4057fe:	4606      	mov	r6, r0
  405800:	2800      	cmp	r0, #0
  405802:	d03a      	beq.n	40587a <_realloc_r+0xde>
  405804:	f855 3c04 	ldr.w	r3, [r5, #-4]
  405808:	f023 0301 	bic.w	r3, r3, #1
  40580c:	444b      	add	r3, r9
  40580e:	f1a0 0208 	sub.w	r2, r0, #8
  405812:	429a      	cmp	r2, r3
  405814:	f000 8121 	beq.w	405a5a <_realloc_r+0x2be>
  405818:	1f22      	subs	r2, r4, #4
  40581a:	2a24      	cmp	r2, #36	; 0x24
  40581c:	f200 8107 	bhi.w	405a2e <_realloc_r+0x292>
  405820:	2a13      	cmp	r2, #19
  405822:	f200 80db 	bhi.w	4059dc <_realloc_r+0x240>
  405826:	4603      	mov	r3, r0
  405828:	462a      	mov	r2, r5
  40582a:	6811      	ldr	r1, [r2, #0]
  40582c:	6019      	str	r1, [r3, #0]
  40582e:	6851      	ldr	r1, [r2, #4]
  405830:	6059      	str	r1, [r3, #4]
  405832:	6892      	ldr	r2, [r2, #8]
  405834:	609a      	str	r2, [r3, #8]
  405836:	4629      	mov	r1, r5
  405838:	4640      	mov	r0, r8
  40583a:	f7ff fe4f 	bl	4054dc <_free_r>
  40583e:	e01c      	b.n	40587a <_realloc_r+0xde>
  405840:	f027 0707 	bic.w	r7, r7, #7
  405844:	2f00      	cmp	r7, #0
  405846:	463a      	mov	r2, r7
  405848:	dabf      	bge.n	4057ca <_realloc_r+0x2e>
  40584a:	2600      	movs	r6, #0
  40584c:	230c      	movs	r3, #12
  40584e:	4630      	mov	r0, r6
  405850:	f8c8 3000 	str.w	r3, [r8]
  405854:	b003      	add	sp, #12
  405856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40585a:	462e      	mov	r6, r5
  40585c:	1be3      	subs	r3, r4, r7
  40585e:	2b0f      	cmp	r3, #15
  405860:	d81e      	bhi.n	4058a0 <_realloc_r+0x104>
  405862:	f8d9 3004 	ldr.w	r3, [r9, #4]
  405866:	f003 0301 	and.w	r3, r3, #1
  40586a:	4323      	orrs	r3, r4
  40586c:	444c      	add	r4, r9
  40586e:	f8c9 3004 	str.w	r3, [r9, #4]
  405872:	6863      	ldr	r3, [r4, #4]
  405874:	f043 0301 	orr.w	r3, r3, #1
  405878:	6063      	str	r3, [r4, #4]
  40587a:	4640      	mov	r0, r8
  40587c:	f7ff f948 	bl	404b10 <__malloc_unlock>
  405880:	4630      	mov	r0, r6
  405882:	b003      	add	sp, #12
  405884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405888:	f023 0303 	bic.w	r3, r3, #3
  40588c:	18e1      	adds	r1, r4, r3
  40588e:	4291      	cmp	r1, r2
  405890:	db1f      	blt.n	4058d2 <_realloc_r+0x136>
  405892:	68c3      	ldr	r3, [r0, #12]
  405894:	6882      	ldr	r2, [r0, #8]
  405896:	462e      	mov	r6, r5
  405898:	60d3      	str	r3, [r2, #12]
  40589a:	460c      	mov	r4, r1
  40589c:	609a      	str	r2, [r3, #8]
  40589e:	e7dd      	b.n	40585c <_realloc_r+0xc0>
  4058a0:	f8d9 2004 	ldr.w	r2, [r9, #4]
  4058a4:	eb09 0107 	add.w	r1, r9, r7
  4058a8:	f002 0201 	and.w	r2, r2, #1
  4058ac:	444c      	add	r4, r9
  4058ae:	f043 0301 	orr.w	r3, r3, #1
  4058b2:	4317      	orrs	r7, r2
  4058b4:	f8c9 7004 	str.w	r7, [r9, #4]
  4058b8:	604b      	str	r3, [r1, #4]
  4058ba:	6863      	ldr	r3, [r4, #4]
  4058bc:	f043 0301 	orr.w	r3, r3, #1
  4058c0:	3108      	adds	r1, #8
  4058c2:	6063      	str	r3, [r4, #4]
  4058c4:	4640      	mov	r0, r8
  4058c6:	f7ff fe09 	bl	4054dc <_free_r>
  4058ca:	e7d6      	b.n	40587a <_realloc_r+0xde>
  4058cc:	4611      	mov	r1, r2
  4058ce:	f7fe bd79 	b.w	4043c4 <_malloc_r>
  4058d2:	f01e 0f01 	tst.w	lr, #1
  4058d6:	d18e      	bne.n	4057f6 <_realloc_r+0x5a>
  4058d8:	f855 1c08 	ldr.w	r1, [r5, #-8]
  4058dc:	eba9 0a01 	sub.w	sl, r9, r1
  4058e0:	f8da 1004 	ldr.w	r1, [sl, #4]
  4058e4:	f021 0103 	bic.w	r1, r1, #3
  4058e8:	440b      	add	r3, r1
  4058ea:	4423      	add	r3, r4
  4058ec:	4293      	cmp	r3, r2
  4058ee:	db25      	blt.n	40593c <_realloc_r+0x1a0>
  4058f0:	68c2      	ldr	r2, [r0, #12]
  4058f2:	6881      	ldr	r1, [r0, #8]
  4058f4:	4656      	mov	r6, sl
  4058f6:	60ca      	str	r2, [r1, #12]
  4058f8:	6091      	str	r1, [r2, #8]
  4058fa:	f8da 100c 	ldr.w	r1, [sl, #12]
  4058fe:	f856 0f08 	ldr.w	r0, [r6, #8]!
  405902:	1f22      	subs	r2, r4, #4
  405904:	2a24      	cmp	r2, #36	; 0x24
  405906:	60c1      	str	r1, [r0, #12]
  405908:	6088      	str	r0, [r1, #8]
  40590a:	f200 8094 	bhi.w	405a36 <_realloc_r+0x29a>
  40590e:	2a13      	cmp	r2, #19
  405910:	d96f      	bls.n	4059f2 <_realloc_r+0x256>
  405912:	6829      	ldr	r1, [r5, #0]
  405914:	f8ca 1008 	str.w	r1, [sl, #8]
  405918:	6869      	ldr	r1, [r5, #4]
  40591a:	f8ca 100c 	str.w	r1, [sl, #12]
  40591e:	2a1b      	cmp	r2, #27
  405920:	f200 80a2 	bhi.w	405a68 <_realloc_r+0x2cc>
  405924:	3508      	adds	r5, #8
  405926:	f10a 0210 	add.w	r2, sl, #16
  40592a:	e063      	b.n	4059f4 <_realloc_r+0x258>
  40592c:	f855 3c08 	ldr.w	r3, [r5, #-8]
  405930:	eba9 0a03 	sub.w	sl, r9, r3
  405934:	f8da 1004 	ldr.w	r1, [sl, #4]
  405938:	f021 0103 	bic.w	r1, r1, #3
  40593c:	1863      	adds	r3, r4, r1
  40593e:	4293      	cmp	r3, r2
  405940:	f6ff af59 	blt.w	4057f6 <_realloc_r+0x5a>
  405944:	4656      	mov	r6, sl
  405946:	e7d8      	b.n	4058fa <_realloc_r+0x15e>
  405948:	6841      	ldr	r1, [r0, #4]
  40594a:	f021 0b03 	bic.w	fp, r1, #3
  40594e:	44a3      	add	fp, r4
  405950:	f107 0010 	add.w	r0, r7, #16
  405954:	4583      	cmp	fp, r0
  405956:	da56      	bge.n	405a06 <_realloc_r+0x26a>
  405958:	f01e 0f01 	tst.w	lr, #1
  40595c:	f47f af4b 	bne.w	4057f6 <_realloc_r+0x5a>
  405960:	f855 1c08 	ldr.w	r1, [r5, #-8]
  405964:	eba9 0a01 	sub.w	sl, r9, r1
  405968:	f8da 1004 	ldr.w	r1, [sl, #4]
  40596c:	f021 0103 	bic.w	r1, r1, #3
  405970:	448b      	add	fp, r1
  405972:	4558      	cmp	r0, fp
  405974:	dce2      	bgt.n	40593c <_realloc_r+0x1a0>
  405976:	4656      	mov	r6, sl
  405978:	f8da 100c 	ldr.w	r1, [sl, #12]
  40597c:	f856 0f08 	ldr.w	r0, [r6, #8]!
  405980:	1f22      	subs	r2, r4, #4
  405982:	2a24      	cmp	r2, #36	; 0x24
  405984:	60c1      	str	r1, [r0, #12]
  405986:	6088      	str	r0, [r1, #8]
  405988:	f200 808f 	bhi.w	405aaa <_realloc_r+0x30e>
  40598c:	2a13      	cmp	r2, #19
  40598e:	f240 808a 	bls.w	405aa6 <_realloc_r+0x30a>
  405992:	6829      	ldr	r1, [r5, #0]
  405994:	f8ca 1008 	str.w	r1, [sl, #8]
  405998:	6869      	ldr	r1, [r5, #4]
  40599a:	f8ca 100c 	str.w	r1, [sl, #12]
  40599e:	2a1b      	cmp	r2, #27
  4059a0:	f200 808a 	bhi.w	405ab8 <_realloc_r+0x31c>
  4059a4:	3508      	adds	r5, #8
  4059a6:	f10a 0210 	add.w	r2, sl, #16
  4059aa:	6829      	ldr	r1, [r5, #0]
  4059ac:	6011      	str	r1, [r2, #0]
  4059ae:	6869      	ldr	r1, [r5, #4]
  4059b0:	6051      	str	r1, [r2, #4]
  4059b2:	68a9      	ldr	r1, [r5, #8]
  4059b4:	6091      	str	r1, [r2, #8]
  4059b6:	eb0a 0107 	add.w	r1, sl, r7
  4059ba:	ebab 0207 	sub.w	r2, fp, r7
  4059be:	f042 0201 	orr.w	r2, r2, #1
  4059c2:	6099      	str	r1, [r3, #8]
  4059c4:	604a      	str	r2, [r1, #4]
  4059c6:	f8da 3004 	ldr.w	r3, [sl, #4]
  4059ca:	f003 0301 	and.w	r3, r3, #1
  4059ce:	431f      	orrs	r7, r3
  4059d0:	4640      	mov	r0, r8
  4059d2:	f8ca 7004 	str.w	r7, [sl, #4]
  4059d6:	f7ff f89b 	bl	404b10 <__malloc_unlock>
  4059da:	e751      	b.n	405880 <_realloc_r+0xe4>
  4059dc:	682b      	ldr	r3, [r5, #0]
  4059de:	6003      	str	r3, [r0, #0]
  4059e0:	686b      	ldr	r3, [r5, #4]
  4059e2:	6043      	str	r3, [r0, #4]
  4059e4:	2a1b      	cmp	r2, #27
  4059e6:	d82d      	bhi.n	405a44 <_realloc_r+0x2a8>
  4059e8:	f100 0308 	add.w	r3, r0, #8
  4059ec:	f105 0208 	add.w	r2, r5, #8
  4059f0:	e71b      	b.n	40582a <_realloc_r+0x8e>
  4059f2:	4632      	mov	r2, r6
  4059f4:	6829      	ldr	r1, [r5, #0]
  4059f6:	6011      	str	r1, [r2, #0]
  4059f8:	6869      	ldr	r1, [r5, #4]
  4059fa:	6051      	str	r1, [r2, #4]
  4059fc:	68a9      	ldr	r1, [r5, #8]
  4059fe:	6091      	str	r1, [r2, #8]
  405a00:	461c      	mov	r4, r3
  405a02:	46d1      	mov	r9, sl
  405a04:	e72a      	b.n	40585c <_realloc_r+0xc0>
  405a06:	eb09 0107 	add.w	r1, r9, r7
  405a0a:	ebab 0b07 	sub.w	fp, fp, r7
  405a0e:	f04b 0201 	orr.w	r2, fp, #1
  405a12:	6099      	str	r1, [r3, #8]
  405a14:	604a      	str	r2, [r1, #4]
  405a16:	f855 3c04 	ldr.w	r3, [r5, #-4]
  405a1a:	f003 0301 	and.w	r3, r3, #1
  405a1e:	431f      	orrs	r7, r3
  405a20:	4640      	mov	r0, r8
  405a22:	f845 7c04 	str.w	r7, [r5, #-4]
  405a26:	f7ff f873 	bl	404b10 <__malloc_unlock>
  405a2a:	462e      	mov	r6, r5
  405a2c:	e728      	b.n	405880 <_realloc_r+0xe4>
  405a2e:	4629      	mov	r1, r5
  405a30:	f7ff fe50 	bl	4056d4 <memmove>
  405a34:	e6ff      	b.n	405836 <_realloc_r+0x9a>
  405a36:	4629      	mov	r1, r5
  405a38:	4630      	mov	r0, r6
  405a3a:	461c      	mov	r4, r3
  405a3c:	46d1      	mov	r9, sl
  405a3e:	f7ff fe49 	bl	4056d4 <memmove>
  405a42:	e70b      	b.n	40585c <_realloc_r+0xc0>
  405a44:	68ab      	ldr	r3, [r5, #8]
  405a46:	6083      	str	r3, [r0, #8]
  405a48:	68eb      	ldr	r3, [r5, #12]
  405a4a:	60c3      	str	r3, [r0, #12]
  405a4c:	2a24      	cmp	r2, #36	; 0x24
  405a4e:	d017      	beq.n	405a80 <_realloc_r+0x2e4>
  405a50:	f100 0310 	add.w	r3, r0, #16
  405a54:	f105 0210 	add.w	r2, r5, #16
  405a58:	e6e7      	b.n	40582a <_realloc_r+0x8e>
  405a5a:	f850 3c04 	ldr.w	r3, [r0, #-4]
  405a5e:	f023 0303 	bic.w	r3, r3, #3
  405a62:	441c      	add	r4, r3
  405a64:	462e      	mov	r6, r5
  405a66:	e6f9      	b.n	40585c <_realloc_r+0xc0>
  405a68:	68a9      	ldr	r1, [r5, #8]
  405a6a:	f8ca 1010 	str.w	r1, [sl, #16]
  405a6e:	68e9      	ldr	r1, [r5, #12]
  405a70:	f8ca 1014 	str.w	r1, [sl, #20]
  405a74:	2a24      	cmp	r2, #36	; 0x24
  405a76:	d00c      	beq.n	405a92 <_realloc_r+0x2f6>
  405a78:	3510      	adds	r5, #16
  405a7a:	f10a 0218 	add.w	r2, sl, #24
  405a7e:	e7b9      	b.n	4059f4 <_realloc_r+0x258>
  405a80:	692b      	ldr	r3, [r5, #16]
  405a82:	6103      	str	r3, [r0, #16]
  405a84:	696b      	ldr	r3, [r5, #20]
  405a86:	6143      	str	r3, [r0, #20]
  405a88:	f105 0218 	add.w	r2, r5, #24
  405a8c:	f100 0318 	add.w	r3, r0, #24
  405a90:	e6cb      	b.n	40582a <_realloc_r+0x8e>
  405a92:	692a      	ldr	r2, [r5, #16]
  405a94:	f8ca 2018 	str.w	r2, [sl, #24]
  405a98:	696a      	ldr	r2, [r5, #20]
  405a9a:	f8ca 201c 	str.w	r2, [sl, #28]
  405a9e:	3518      	adds	r5, #24
  405aa0:	f10a 0220 	add.w	r2, sl, #32
  405aa4:	e7a6      	b.n	4059f4 <_realloc_r+0x258>
  405aa6:	4632      	mov	r2, r6
  405aa8:	e77f      	b.n	4059aa <_realloc_r+0x20e>
  405aaa:	4629      	mov	r1, r5
  405aac:	4630      	mov	r0, r6
  405aae:	9301      	str	r3, [sp, #4]
  405ab0:	f7ff fe10 	bl	4056d4 <memmove>
  405ab4:	9b01      	ldr	r3, [sp, #4]
  405ab6:	e77e      	b.n	4059b6 <_realloc_r+0x21a>
  405ab8:	68a9      	ldr	r1, [r5, #8]
  405aba:	f8ca 1010 	str.w	r1, [sl, #16]
  405abe:	68e9      	ldr	r1, [r5, #12]
  405ac0:	f8ca 1014 	str.w	r1, [sl, #20]
  405ac4:	2a24      	cmp	r2, #36	; 0x24
  405ac6:	d003      	beq.n	405ad0 <_realloc_r+0x334>
  405ac8:	3510      	adds	r5, #16
  405aca:	f10a 0218 	add.w	r2, sl, #24
  405ace:	e76c      	b.n	4059aa <_realloc_r+0x20e>
  405ad0:	692a      	ldr	r2, [r5, #16]
  405ad2:	f8ca 2018 	str.w	r2, [sl, #24]
  405ad6:	696a      	ldr	r2, [r5, #20]
  405ad8:	f8ca 201c 	str.w	r2, [sl, #28]
  405adc:	3518      	adds	r5, #24
  405ade:	f10a 0220 	add.w	r2, sl, #32
  405ae2:	e762      	b.n	4059aa <_realloc_r+0x20e>
  405ae4:	20400454 	.word	0x20400454

00405ae8 <__ascii_wctomb>:
  405ae8:	b121      	cbz	r1, 405af4 <__ascii_wctomb+0xc>
  405aea:	2aff      	cmp	r2, #255	; 0xff
  405aec:	d804      	bhi.n	405af8 <__ascii_wctomb+0x10>
  405aee:	700a      	strb	r2, [r1, #0]
  405af0:	2001      	movs	r0, #1
  405af2:	4770      	bx	lr
  405af4:	4608      	mov	r0, r1
  405af6:	4770      	bx	lr
  405af8:	238a      	movs	r3, #138	; 0x8a
  405afa:	6003      	str	r3, [r0, #0]
  405afc:	f04f 30ff 	mov.w	r0, #4294967295
  405b00:	4770      	bx	lr
  405b02:	bf00      	nop

00405b04 <__aeabi_drsub>:
  405b04:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  405b08:	e002      	b.n	405b10 <__adddf3>
  405b0a:	bf00      	nop

00405b0c <__aeabi_dsub>:
  405b0c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00405b10 <__adddf3>:
  405b10:	b530      	push	{r4, r5, lr}
  405b12:	ea4f 0441 	mov.w	r4, r1, lsl #1
  405b16:	ea4f 0543 	mov.w	r5, r3, lsl #1
  405b1a:	ea94 0f05 	teq	r4, r5
  405b1e:	bf08      	it	eq
  405b20:	ea90 0f02 	teqeq	r0, r2
  405b24:	bf1f      	itttt	ne
  405b26:	ea54 0c00 	orrsne.w	ip, r4, r0
  405b2a:	ea55 0c02 	orrsne.w	ip, r5, r2
  405b2e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  405b32:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  405b36:	f000 80e2 	beq.w	405cfe <__adddf3+0x1ee>
  405b3a:	ea4f 5454 	mov.w	r4, r4, lsr #21
  405b3e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  405b42:	bfb8      	it	lt
  405b44:	426d      	neglt	r5, r5
  405b46:	dd0c      	ble.n	405b62 <__adddf3+0x52>
  405b48:	442c      	add	r4, r5
  405b4a:	ea80 0202 	eor.w	r2, r0, r2
  405b4e:	ea81 0303 	eor.w	r3, r1, r3
  405b52:	ea82 0000 	eor.w	r0, r2, r0
  405b56:	ea83 0101 	eor.w	r1, r3, r1
  405b5a:	ea80 0202 	eor.w	r2, r0, r2
  405b5e:	ea81 0303 	eor.w	r3, r1, r3
  405b62:	2d36      	cmp	r5, #54	; 0x36
  405b64:	bf88      	it	hi
  405b66:	bd30      	pophi	{r4, r5, pc}
  405b68:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  405b6c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  405b70:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  405b74:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  405b78:	d002      	beq.n	405b80 <__adddf3+0x70>
  405b7a:	4240      	negs	r0, r0
  405b7c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  405b80:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  405b84:	ea4f 3303 	mov.w	r3, r3, lsl #12
  405b88:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  405b8c:	d002      	beq.n	405b94 <__adddf3+0x84>
  405b8e:	4252      	negs	r2, r2
  405b90:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  405b94:	ea94 0f05 	teq	r4, r5
  405b98:	f000 80a7 	beq.w	405cea <__adddf3+0x1da>
  405b9c:	f1a4 0401 	sub.w	r4, r4, #1
  405ba0:	f1d5 0e20 	rsbs	lr, r5, #32
  405ba4:	db0d      	blt.n	405bc2 <__adddf3+0xb2>
  405ba6:	fa02 fc0e 	lsl.w	ip, r2, lr
  405baa:	fa22 f205 	lsr.w	r2, r2, r5
  405bae:	1880      	adds	r0, r0, r2
  405bb0:	f141 0100 	adc.w	r1, r1, #0
  405bb4:	fa03 f20e 	lsl.w	r2, r3, lr
  405bb8:	1880      	adds	r0, r0, r2
  405bba:	fa43 f305 	asr.w	r3, r3, r5
  405bbe:	4159      	adcs	r1, r3
  405bc0:	e00e      	b.n	405be0 <__adddf3+0xd0>
  405bc2:	f1a5 0520 	sub.w	r5, r5, #32
  405bc6:	f10e 0e20 	add.w	lr, lr, #32
  405bca:	2a01      	cmp	r2, #1
  405bcc:	fa03 fc0e 	lsl.w	ip, r3, lr
  405bd0:	bf28      	it	cs
  405bd2:	f04c 0c02 	orrcs.w	ip, ip, #2
  405bd6:	fa43 f305 	asr.w	r3, r3, r5
  405bda:	18c0      	adds	r0, r0, r3
  405bdc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  405be0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  405be4:	d507      	bpl.n	405bf6 <__adddf3+0xe6>
  405be6:	f04f 0e00 	mov.w	lr, #0
  405bea:	f1dc 0c00 	rsbs	ip, ip, #0
  405bee:	eb7e 0000 	sbcs.w	r0, lr, r0
  405bf2:	eb6e 0101 	sbc.w	r1, lr, r1
  405bf6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  405bfa:	d31b      	bcc.n	405c34 <__adddf3+0x124>
  405bfc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  405c00:	d30c      	bcc.n	405c1c <__adddf3+0x10c>
  405c02:	0849      	lsrs	r1, r1, #1
  405c04:	ea5f 0030 	movs.w	r0, r0, rrx
  405c08:	ea4f 0c3c 	mov.w	ip, ip, rrx
  405c0c:	f104 0401 	add.w	r4, r4, #1
  405c10:	ea4f 5244 	mov.w	r2, r4, lsl #21
  405c14:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  405c18:	f080 809a 	bcs.w	405d50 <__adddf3+0x240>
  405c1c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  405c20:	bf08      	it	eq
  405c22:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  405c26:	f150 0000 	adcs.w	r0, r0, #0
  405c2a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  405c2e:	ea41 0105 	orr.w	r1, r1, r5
  405c32:	bd30      	pop	{r4, r5, pc}
  405c34:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  405c38:	4140      	adcs	r0, r0
  405c3a:	eb41 0101 	adc.w	r1, r1, r1
  405c3e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  405c42:	f1a4 0401 	sub.w	r4, r4, #1
  405c46:	d1e9      	bne.n	405c1c <__adddf3+0x10c>
  405c48:	f091 0f00 	teq	r1, #0
  405c4c:	bf04      	itt	eq
  405c4e:	4601      	moveq	r1, r0
  405c50:	2000      	moveq	r0, #0
  405c52:	fab1 f381 	clz	r3, r1
  405c56:	bf08      	it	eq
  405c58:	3320      	addeq	r3, #32
  405c5a:	f1a3 030b 	sub.w	r3, r3, #11
  405c5e:	f1b3 0220 	subs.w	r2, r3, #32
  405c62:	da0c      	bge.n	405c7e <__adddf3+0x16e>
  405c64:	320c      	adds	r2, #12
  405c66:	dd08      	ble.n	405c7a <__adddf3+0x16a>
  405c68:	f102 0c14 	add.w	ip, r2, #20
  405c6c:	f1c2 020c 	rsb	r2, r2, #12
  405c70:	fa01 f00c 	lsl.w	r0, r1, ip
  405c74:	fa21 f102 	lsr.w	r1, r1, r2
  405c78:	e00c      	b.n	405c94 <__adddf3+0x184>
  405c7a:	f102 0214 	add.w	r2, r2, #20
  405c7e:	bfd8      	it	le
  405c80:	f1c2 0c20 	rsble	ip, r2, #32
  405c84:	fa01 f102 	lsl.w	r1, r1, r2
  405c88:	fa20 fc0c 	lsr.w	ip, r0, ip
  405c8c:	bfdc      	itt	le
  405c8e:	ea41 010c 	orrle.w	r1, r1, ip
  405c92:	4090      	lslle	r0, r2
  405c94:	1ae4      	subs	r4, r4, r3
  405c96:	bfa2      	ittt	ge
  405c98:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  405c9c:	4329      	orrge	r1, r5
  405c9e:	bd30      	popge	{r4, r5, pc}
  405ca0:	ea6f 0404 	mvn.w	r4, r4
  405ca4:	3c1f      	subs	r4, #31
  405ca6:	da1c      	bge.n	405ce2 <__adddf3+0x1d2>
  405ca8:	340c      	adds	r4, #12
  405caa:	dc0e      	bgt.n	405cca <__adddf3+0x1ba>
  405cac:	f104 0414 	add.w	r4, r4, #20
  405cb0:	f1c4 0220 	rsb	r2, r4, #32
  405cb4:	fa20 f004 	lsr.w	r0, r0, r4
  405cb8:	fa01 f302 	lsl.w	r3, r1, r2
  405cbc:	ea40 0003 	orr.w	r0, r0, r3
  405cc0:	fa21 f304 	lsr.w	r3, r1, r4
  405cc4:	ea45 0103 	orr.w	r1, r5, r3
  405cc8:	bd30      	pop	{r4, r5, pc}
  405cca:	f1c4 040c 	rsb	r4, r4, #12
  405cce:	f1c4 0220 	rsb	r2, r4, #32
  405cd2:	fa20 f002 	lsr.w	r0, r0, r2
  405cd6:	fa01 f304 	lsl.w	r3, r1, r4
  405cda:	ea40 0003 	orr.w	r0, r0, r3
  405cde:	4629      	mov	r1, r5
  405ce0:	bd30      	pop	{r4, r5, pc}
  405ce2:	fa21 f004 	lsr.w	r0, r1, r4
  405ce6:	4629      	mov	r1, r5
  405ce8:	bd30      	pop	{r4, r5, pc}
  405cea:	f094 0f00 	teq	r4, #0
  405cee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  405cf2:	bf06      	itte	eq
  405cf4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  405cf8:	3401      	addeq	r4, #1
  405cfa:	3d01      	subne	r5, #1
  405cfc:	e74e      	b.n	405b9c <__adddf3+0x8c>
  405cfe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  405d02:	bf18      	it	ne
  405d04:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  405d08:	d029      	beq.n	405d5e <__adddf3+0x24e>
  405d0a:	ea94 0f05 	teq	r4, r5
  405d0e:	bf08      	it	eq
  405d10:	ea90 0f02 	teqeq	r0, r2
  405d14:	d005      	beq.n	405d22 <__adddf3+0x212>
  405d16:	ea54 0c00 	orrs.w	ip, r4, r0
  405d1a:	bf04      	itt	eq
  405d1c:	4619      	moveq	r1, r3
  405d1e:	4610      	moveq	r0, r2
  405d20:	bd30      	pop	{r4, r5, pc}
  405d22:	ea91 0f03 	teq	r1, r3
  405d26:	bf1e      	ittt	ne
  405d28:	2100      	movne	r1, #0
  405d2a:	2000      	movne	r0, #0
  405d2c:	bd30      	popne	{r4, r5, pc}
  405d2e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  405d32:	d105      	bne.n	405d40 <__adddf3+0x230>
  405d34:	0040      	lsls	r0, r0, #1
  405d36:	4149      	adcs	r1, r1
  405d38:	bf28      	it	cs
  405d3a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  405d3e:	bd30      	pop	{r4, r5, pc}
  405d40:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  405d44:	bf3c      	itt	cc
  405d46:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  405d4a:	bd30      	popcc	{r4, r5, pc}
  405d4c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  405d50:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  405d54:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  405d58:	f04f 0000 	mov.w	r0, #0
  405d5c:	bd30      	pop	{r4, r5, pc}
  405d5e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  405d62:	bf1a      	itte	ne
  405d64:	4619      	movne	r1, r3
  405d66:	4610      	movne	r0, r2
  405d68:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  405d6c:	bf1c      	itt	ne
  405d6e:	460b      	movne	r3, r1
  405d70:	4602      	movne	r2, r0
  405d72:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  405d76:	bf06      	itte	eq
  405d78:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  405d7c:	ea91 0f03 	teqeq	r1, r3
  405d80:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  405d84:	bd30      	pop	{r4, r5, pc}
  405d86:	bf00      	nop

00405d88 <__aeabi_ui2d>:
  405d88:	f090 0f00 	teq	r0, #0
  405d8c:	bf04      	itt	eq
  405d8e:	2100      	moveq	r1, #0
  405d90:	4770      	bxeq	lr
  405d92:	b530      	push	{r4, r5, lr}
  405d94:	f44f 6480 	mov.w	r4, #1024	; 0x400
  405d98:	f104 0432 	add.w	r4, r4, #50	; 0x32
  405d9c:	f04f 0500 	mov.w	r5, #0
  405da0:	f04f 0100 	mov.w	r1, #0
  405da4:	e750      	b.n	405c48 <__adddf3+0x138>
  405da6:	bf00      	nop

00405da8 <__aeabi_i2d>:
  405da8:	f090 0f00 	teq	r0, #0
  405dac:	bf04      	itt	eq
  405dae:	2100      	moveq	r1, #0
  405db0:	4770      	bxeq	lr
  405db2:	b530      	push	{r4, r5, lr}
  405db4:	f44f 6480 	mov.w	r4, #1024	; 0x400
  405db8:	f104 0432 	add.w	r4, r4, #50	; 0x32
  405dbc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  405dc0:	bf48      	it	mi
  405dc2:	4240      	negmi	r0, r0
  405dc4:	f04f 0100 	mov.w	r1, #0
  405dc8:	e73e      	b.n	405c48 <__adddf3+0x138>
  405dca:	bf00      	nop

00405dcc <__aeabi_f2d>:
  405dcc:	0042      	lsls	r2, r0, #1
  405dce:	ea4f 01e2 	mov.w	r1, r2, asr #3
  405dd2:	ea4f 0131 	mov.w	r1, r1, rrx
  405dd6:	ea4f 7002 	mov.w	r0, r2, lsl #28
  405dda:	bf1f      	itttt	ne
  405ddc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  405de0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  405de4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  405de8:	4770      	bxne	lr
  405dea:	f092 0f00 	teq	r2, #0
  405dee:	bf14      	ite	ne
  405df0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  405df4:	4770      	bxeq	lr
  405df6:	b530      	push	{r4, r5, lr}
  405df8:	f44f 7460 	mov.w	r4, #896	; 0x380
  405dfc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  405e00:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  405e04:	e720      	b.n	405c48 <__adddf3+0x138>
  405e06:	bf00      	nop

00405e08 <__aeabi_ul2d>:
  405e08:	ea50 0201 	orrs.w	r2, r0, r1
  405e0c:	bf08      	it	eq
  405e0e:	4770      	bxeq	lr
  405e10:	b530      	push	{r4, r5, lr}
  405e12:	f04f 0500 	mov.w	r5, #0
  405e16:	e00a      	b.n	405e2e <__aeabi_l2d+0x16>

00405e18 <__aeabi_l2d>:
  405e18:	ea50 0201 	orrs.w	r2, r0, r1
  405e1c:	bf08      	it	eq
  405e1e:	4770      	bxeq	lr
  405e20:	b530      	push	{r4, r5, lr}
  405e22:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  405e26:	d502      	bpl.n	405e2e <__aeabi_l2d+0x16>
  405e28:	4240      	negs	r0, r0
  405e2a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  405e2e:	f44f 6480 	mov.w	r4, #1024	; 0x400
  405e32:	f104 0432 	add.w	r4, r4, #50	; 0x32
  405e36:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  405e3a:	f43f aedc 	beq.w	405bf6 <__adddf3+0xe6>
  405e3e:	f04f 0203 	mov.w	r2, #3
  405e42:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  405e46:	bf18      	it	ne
  405e48:	3203      	addne	r2, #3
  405e4a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  405e4e:	bf18      	it	ne
  405e50:	3203      	addne	r2, #3
  405e52:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  405e56:	f1c2 0320 	rsb	r3, r2, #32
  405e5a:	fa00 fc03 	lsl.w	ip, r0, r3
  405e5e:	fa20 f002 	lsr.w	r0, r0, r2
  405e62:	fa01 fe03 	lsl.w	lr, r1, r3
  405e66:	ea40 000e 	orr.w	r0, r0, lr
  405e6a:	fa21 f102 	lsr.w	r1, r1, r2
  405e6e:	4414      	add	r4, r2
  405e70:	e6c1      	b.n	405bf6 <__adddf3+0xe6>
  405e72:	bf00      	nop

00405e74 <__aeabi_dmul>:
  405e74:	b570      	push	{r4, r5, r6, lr}
  405e76:	f04f 0cff 	mov.w	ip, #255	; 0xff
  405e7a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  405e7e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  405e82:	bf1d      	ittte	ne
  405e84:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  405e88:	ea94 0f0c 	teqne	r4, ip
  405e8c:	ea95 0f0c 	teqne	r5, ip
  405e90:	f000 f8de 	bleq	406050 <__aeabi_dmul+0x1dc>
  405e94:	442c      	add	r4, r5
  405e96:	ea81 0603 	eor.w	r6, r1, r3
  405e9a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  405e9e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  405ea2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  405ea6:	bf18      	it	ne
  405ea8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  405eac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  405eb0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  405eb4:	d038      	beq.n	405f28 <__aeabi_dmul+0xb4>
  405eb6:	fba0 ce02 	umull	ip, lr, r0, r2
  405eba:	f04f 0500 	mov.w	r5, #0
  405ebe:	fbe1 e502 	umlal	lr, r5, r1, r2
  405ec2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  405ec6:	fbe0 e503 	umlal	lr, r5, r0, r3
  405eca:	f04f 0600 	mov.w	r6, #0
  405ece:	fbe1 5603 	umlal	r5, r6, r1, r3
  405ed2:	f09c 0f00 	teq	ip, #0
  405ed6:	bf18      	it	ne
  405ed8:	f04e 0e01 	orrne.w	lr, lr, #1
  405edc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  405ee0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  405ee4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  405ee8:	d204      	bcs.n	405ef4 <__aeabi_dmul+0x80>
  405eea:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  405eee:	416d      	adcs	r5, r5
  405ef0:	eb46 0606 	adc.w	r6, r6, r6
  405ef4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  405ef8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  405efc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  405f00:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  405f04:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  405f08:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  405f0c:	bf88      	it	hi
  405f0e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  405f12:	d81e      	bhi.n	405f52 <__aeabi_dmul+0xde>
  405f14:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  405f18:	bf08      	it	eq
  405f1a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  405f1e:	f150 0000 	adcs.w	r0, r0, #0
  405f22:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  405f26:	bd70      	pop	{r4, r5, r6, pc}
  405f28:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  405f2c:	ea46 0101 	orr.w	r1, r6, r1
  405f30:	ea40 0002 	orr.w	r0, r0, r2
  405f34:	ea81 0103 	eor.w	r1, r1, r3
  405f38:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  405f3c:	bfc2      	ittt	gt
  405f3e:	ebd4 050c 	rsbsgt	r5, r4, ip
  405f42:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  405f46:	bd70      	popgt	{r4, r5, r6, pc}
  405f48:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  405f4c:	f04f 0e00 	mov.w	lr, #0
  405f50:	3c01      	subs	r4, #1
  405f52:	f300 80ab 	bgt.w	4060ac <__aeabi_dmul+0x238>
  405f56:	f114 0f36 	cmn.w	r4, #54	; 0x36
  405f5a:	bfde      	ittt	le
  405f5c:	2000      	movle	r0, #0
  405f5e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  405f62:	bd70      	pople	{r4, r5, r6, pc}
  405f64:	f1c4 0400 	rsb	r4, r4, #0
  405f68:	3c20      	subs	r4, #32
  405f6a:	da35      	bge.n	405fd8 <__aeabi_dmul+0x164>
  405f6c:	340c      	adds	r4, #12
  405f6e:	dc1b      	bgt.n	405fa8 <__aeabi_dmul+0x134>
  405f70:	f104 0414 	add.w	r4, r4, #20
  405f74:	f1c4 0520 	rsb	r5, r4, #32
  405f78:	fa00 f305 	lsl.w	r3, r0, r5
  405f7c:	fa20 f004 	lsr.w	r0, r0, r4
  405f80:	fa01 f205 	lsl.w	r2, r1, r5
  405f84:	ea40 0002 	orr.w	r0, r0, r2
  405f88:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  405f8c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  405f90:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  405f94:	fa21 f604 	lsr.w	r6, r1, r4
  405f98:	eb42 0106 	adc.w	r1, r2, r6
  405f9c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  405fa0:	bf08      	it	eq
  405fa2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  405fa6:	bd70      	pop	{r4, r5, r6, pc}
  405fa8:	f1c4 040c 	rsb	r4, r4, #12
  405fac:	f1c4 0520 	rsb	r5, r4, #32
  405fb0:	fa00 f304 	lsl.w	r3, r0, r4
  405fb4:	fa20 f005 	lsr.w	r0, r0, r5
  405fb8:	fa01 f204 	lsl.w	r2, r1, r4
  405fbc:	ea40 0002 	orr.w	r0, r0, r2
  405fc0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  405fc4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  405fc8:	f141 0100 	adc.w	r1, r1, #0
  405fcc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  405fd0:	bf08      	it	eq
  405fd2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  405fd6:	bd70      	pop	{r4, r5, r6, pc}
  405fd8:	f1c4 0520 	rsb	r5, r4, #32
  405fdc:	fa00 f205 	lsl.w	r2, r0, r5
  405fe0:	ea4e 0e02 	orr.w	lr, lr, r2
  405fe4:	fa20 f304 	lsr.w	r3, r0, r4
  405fe8:	fa01 f205 	lsl.w	r2, r1, r5
  405fec:	ea43 0302 	orr.w	r3, r3, r2
  405ff0:	fa21 f004 	lsr.w	r0, r1, r4
  405ff4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  405ff8:	fa21 f204 	lsr.w	r2, r1, r4
  405ffc:	ea20 0002 	bic.w	r0, r0, r2
  406000:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  406004:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  406008:	bf08      	it	eq
  40600a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40600e:	bd70      	pop	{r4, r5, r6, pc}
  406010:	f094 0f00 	teq	r4, #0
  406014:	d10f      	bne.n	406036 <__aeabi_dmul+0x1c2>
  406016:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  40601a:	0040      	lsls	r0, r0, #1
  40601c:	eb41 0101 	adc.w	r1, r1, r1
  406020:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  406024:	bf08      	it	eq
  406026:	3c01      	subeq	r4, #1
  406028:	d0f7      	beq.n	40601a <__aeabi_dmul+0x1a6>
  40602a:	ea41 0106 	orr.w	r1, r1, r6
  40602e:	f095 0f00 	teq	r5, #0
  406032:	bf18      	it	ne
  406034:	4770      	bxne	lr
  406036:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  40603a:	0052      	lsls	r2, r2, #1
  40603c:	eb43 0303 	adc.w	r3, r3, r3
  406040:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  406044:	bf08      	it	eq
  406046:	3d01      	subeq	r5, #1
  406048:	d0f7      	beq.n	40603a <__aeabi_dmul+0x1c6>
  40604a:	ea43 0306 	orr.w	r3, r3, r6
  40604e:	4770      	bx	lr
  406050:	ea94 0f0c 	teq	r4, ip
  406054:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  406058:	bf18      	it	ne
  40605a:	ea95 0f0c 	teqne	r5, ip
  40605e:	d00c      	beq.n	40607a <__aeabi_dmul+0x206>
  406060:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  406064:	bf18      	it	ne
  406066:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40606a:	d1d1      	bne.n	406010 <__aeabi_dmul+0x19c>
  40606c:	ea81 0103 	eor.w	r1, r1, r3
  406070:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  406074:	f04f 0000 	mov.w	r0, #0
  406078:	bd70      	pop	{r4, r5, r6, pc}
  40607a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40607e:	bf06      	itte	eq
  406080:	4610      	moveq	r0, r2
  406082:	4619      	moveq	r1, r3
  406084:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  406088:	d019      	beq.n	4060be <__aeabi_dmul+0x24a>
  40608a:	ea94 0f0c 	teq	r4, ip
  40608e:	d102      	bne.n	406096 <__aeabi_dmul+0x222>
  406090:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  406094:	d113      	bne.n	4060be <__aeabi_dmul+0x24a>
  406096:	ea95 0f0c 	teq	r5, ip
  40609a:	d105      	bne.n	4060a8 <__aeabi_dmul+0x234>
  40609c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  4060a0:	bf1c      	itt	ne
  4060a2:	4610      	movne	r0, r2
  4060a4:	4619      	movne	r1, r3
  4060a6:	d10a      	bne.n	4060be <__aeabi_dmul+0x24a>
  4060a8:	ea81 0103 	eor.w	r1, r1, r3
  4060ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4060b0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  4060b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4060b8:	f04f 0000 	mov.w	r0, #0
  4060bc:	bd70      	pop	{r4, r5, r6, pc}
  4060be:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  4060c2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  4060c6:	bd70      	pop	{r4, r5, r6, pc}

004060c8 <__aeabi_ddiv>:
  4060c8:	b570      	push	{r4, r5, r6, lr}
  4060ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4060ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4060d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4060d6:	bf1d      	ittte	ne
  4060d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4060dc:	ea94 0f0c 	teqne	r4, ip
  4060e0:	ea95 0f0c 	teqne	r5, ip
  4060e4:	f000 f8a7 	bleq	406236 <__aeabi_ddiv+0x16e>
  4060e8:	eba4 0405 	sub.w	r4, r4, r5
  4060ec:	ea81 0e03 	eor.w	lr, r1, r3
  4060f0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4060f4:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4060f8:	f000 8088 	beq.w	40620c <__aeabi_ddiv+0x144>
  4060fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
  406100:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  406104:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  406108:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  40610c:	ea4f 2202 	mov.w	r2, r2, lsl #8
  406110:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  406114:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  406118:	ea4f 2600 	mov.w	r6, r0, lsl #8
  40611c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  406120:	429d      	cmp	r5, r3
  406122:	bf08      	it	eq
  406124:	4296      	cmpeq	r6, r2
  406126:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  40612a:	f504 7440 	add.w	r4, r4, #768	; 0x300
  40612e:	d202      	bcs.n	406136 <__aeabi_ddiv+0x6e>
  406130:	085b      	lsrs	r3, r3, #1
  406132:	ea4f 0232 	mov.w	r2, r2, rrx
  406136:	1ab6      	subs	r6, r6, r2
  406138:	eb65 0503 	sbc.w	r5, r5, r3
  40613c:	085b      	lsrs	r3, r3, #1
  40613e:	ea4f 0232 	mov.w	r2, r2, rrx
  406142:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  406146:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  40614a:	ebb6 0e02 	subs.w	lr, r6, r2
  40614e:	eb75 0e03 	sbcs.w	lr, r5, r3
  406152:	bf22      	ittt	cs
  406154:	1ab6      	subcs	r6, r6, r2
  406156:	4675      	movcs	r5, lr
  406158:	ea40 000c 	orrcs.w	r0, r0, ip
  40615c:	085b      	lsrs	r3, r3, #1
  40615e:	ea4f 0232 	mov.w	r2, r2, rrx
  406162:	ebb6 0e02 	subs.w	lr, r6, r2
  406166:	eb75 0e03 	sbcs.w	lr, r5, r3
  40616a:	bf22      	ittt	cs
  40616c:	1ab6      	subcs	r6, r6, r2
  40616e:	4675      	movcs	r5, lr
  406170:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  406174:	085b      	lsrs	r3, r3, #1
  406176:	ea4f 0232 	mov.w	r2, r2, rrx
  40617a:	ebb6 0e02 	subs.w	lr, r6, r2
  40617e:	eb75 0e03 	sbcs.w	lr, r5, r3
  406182:	bf22      	ittt	cs
  406184:	1ab6      	subcs	r6, r6, r2
  406186:	4675      	movcs	r5, lr
  406188:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  40618c:	085b      	lsrs	r3, r3, #1
  40618e:	ea4f 0232 	mov.w	r2, r2, rrx
  406192:	ebb6 0e02 	subs.w	lr, r6, r2
  406196:	eb75 0e03 	sbcs.w	lr, r5, r3
  40619a:	bf22      	ittt	cs
  40619c:	1ab6      	subcs	r6, r6, r2
  40619e:	4675      	movcs	r5, lr
  4061a0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  4061a4:	ea55 0e06 	orrs.w	lr, r5, r6
  4061a8:	d018      	beq.n	4061dc <__aeabi_ddiv+0x114>
  4061aa:	ea4f 1505 	mov.w	r5, r5, lsl #4
  4061ae:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  4061b2:	ea4f 1606 	mov.w	r6, r6, lsl #4
  4061b6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  4061ba:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  4061be:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  4061c2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  4061c6:	d1c0      	bne.n	40614a <__aeabi_ddiv+0x82>
  4061c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4061cc:	d10b      	bne.n	4061e6 <__aeabi_ddiv+0x11e>
  4061ce:	ea41 0100 	orr.w	r1, r1, r0
  4061d2:	f04f 0000 	mov.w	r0, #0
  4061d6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  4061da:	e7b6      	b.n	40614a <__aeabi_ddiv+0x82>
  4061dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4061e0:	bf04      	itt	eq
  4061e2:	4301      	orreq	r1, r0
  4061e4:	2000      	moveq	r0, #0
  4061e6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4061ea:	bf88      	it	hi
  4061ec:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4061f0:	f63f aeaf 	bhi.w	405f52 <__aeabi_dmul+0xde>
  4061f4:	ebb5 0c03 	subs.w	ip, r5, r3
  4061f8:	bf04      	itt	eq
  4061fa:	ebb6 0c02 	subseq.w	ip, r6, r2
  4061fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  406202:	f150 0000 	adcs.w	r0, r0, #0
  406206:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40620a:	bd70      	pop	{r4, r5, r6, pc}
  40620c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  406210:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  406214:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  406218:	bfc2      	ittt	gt
  40621a:	ebd4 050c 	rsbsgt	r5, r4, ip
  40621e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  406222:	bd70      	popgt	{r4, r5, r6, pc}
  406224:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  406228:	f04f 0e00 	mov.w	lr, #0
  40622c:	3c01      	subs	r4, #1
  40622e:	e690      	b.n	405f52 <__aeabi_dmul+0xde>
  406230:	ea45 0e06 	orr.w	lr, r5, r6
  406234:	e68d      	b.n	405f52 <__aeabi_dmul+0xde>
  406236:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40623a:	ea94 0f0c 	teq	r4, ip
  40623e:	bf08      	it	eq
  406240:	ea95 0f0c 	teqeq	r5, ip
  406244:	f43f af3b 	beq.w	4060be <__aeabi_dmul+0x24a>
  406248:	ea94 0f0c 	teq	r4, ip
  40624c:	d10a      	bne.n	406264 <__aeabi_ddiv+0x19c>
  40624e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  406252:	f47f af34 	bne.w	4060be <__aeabi_dmul+0x24a>
  406256:	ea95 0f0c 	teq	r5, ip
  40625a:	f47f af25 	bne.w	4060a8 <__aeabi_dmul+0x234>
  40625e:	4610      	mov	r0, r2
  406260:	4619      	mov	r1, r3
  406262:	e72c      	b.n	4060be <__aeabi_dmul+0x24a>
  406264:	ea95 0f0c 	teq	r5, ip
  406268:	d106      	bne.n	406278 <__aeabi_ddiv+0x1b0>
  40626a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40626e:	f43f aefd 	beq.w	40606c <__aeabi_dmul+0x1f8>
  406272:	4610      	mov	r0, r2
  406274:	4619      	mov	r1, r3
  406276:	e722      	b.n	4060be <__aeabi_dmul+0x24a>
  406278:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40627c:	bf18      	it	ne
  40627e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  406282:	f47f aec5 	bne.w	406010 <__aeabi_dmul+0x19c>
  406286:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  40628a:	f47f af0d 	bne.w	4060a8 <__aeabi_dmul+0x234>
  40628e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  406292:	f47f aeeb 	bne.w	40606c <__aeabi_dmul+0x1f8>
  406296:	e712      	b.n	4060be <__aeabi_dmul+0x24a>

00406298 <__gedf2>:
  406298:	f04f 3cff 	mov.w	ip, #4294967295
  40629c:	e006      	b.n	4062ac <__cmpdf2+0x4>
  40629e:	bf00      	nop

004062a0 <__ledf2>:
  4062a0:	f04f 0c01 	mov.w	ip, #1
  4062a4:	e002      	b.n	4062ac <__cmpdf2+0x4>
  4062a6:	bf00      	nop

004062a8 <__cmpdf2>:
  4062a8:	f04f 0c01 	mov.w	ip, #1
  4062ac:	f84d cd04 	str.w	ip, [sp, #-4]!
  4062b0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4062b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4062b8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4062bc:	bf18      	it	ne
  4062be:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  4062c2:	d01b      	beq.n	4062fc <__cmpdf2+0x54>
  4062c4:	b001      	add	sp, #4
  4062c6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  4062ca:	bf0c      	ite	eq
  4062cc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  4062d0:	ea91 0f03 	teqne	r1, r3
  4062d4:	bf02      	ittt	eq
  4062d6:	ea90 0f02 	teqeq	r0, r2
  4062da:	2000      	moveq	r0, #0
  4062dc:	4770      	bxeq	lr
  4062de:	f110 0f00 	cmn.w	r0, #0
  4062e2:	ea91 0f03 	teq	r1, r3
  4062e6:	bf58      	it	pl
  4062e8:	4299      	cmppl	r1, r3
  4062ea:	bf08      	it	eq
  4062ec:	4290      	cmpeq	r0, r2
  4062ee:	bf2c      	ite	cs
  4062f0:	17d8      	asrcs	r0, r3, #31
  4062f2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  4062f6:	f040 0001 	orr.w	r0, r0, #1
  4062fa:	4770      	bx	lr
  4062fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  406300:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  406304:	d102      	bne.n	40630c <__cmpdf2+0x64>
  406306:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  40630a:	d107      	bne.n	40631c <__cmpdf2+0x74>
  40630c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  406310:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  406314:	d1d6      	bne.n	4062c4 <__cmpdf2+0x1c>
  406316:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  40631a:	d0d3      	beq.n	4062c4 <__cmpdf2+0x1c>
  40631c:	f85d 0b04 	ldr.w	r0, [sp], #4
  406320:	4770      	bx	lr
  406322:	bf00      	nop

00406324 <__aeabi_cdrcmple>:
  406324:	4684      	mov	ip, r0
  406326:	4610      	mov	r0, r2
  406328:	4662      	mov	r2, ip
  40632a:	468c      	mov	ip, r1
  40632c:	4619      	mov	r1, r3
  40632e:	4663      	mov	r3, ip
  406330:	e000      	b.n	406334 <__aeabi_cdcmpeq>
  406332:	bf00      	nop

00406334 <__aeabi_cdcmpeq>:
  406334:	b501      	push	{r0, lr}
  406336:	f7ff ffb7 	bl	4062a8 <__cmpdf2>
  40633a:	2800      	cmp	r0, #0
  40633c:	bf48      	it	mi
  40633e:	f110 0f00 	cmnmi.w	r0, #0
  406342:	bd01      	pop	{r0, pc}

00406344 <__aeabi_dcmpeq>:
  406344:	f84d ed08 	str.w	lr, [sp, #-8]!
  406348:	f7ff fff4 	bl	406334 <__aeabi_cdcmpeq>
  40634c:	bf0c      	ite	eq
  40634e:	2001      	moveq	r0, #1
  406350:	2000      	movne	r0, #0
  406352:	f85d fb08 	ldr.w	pc, [sp], #8
  406356:	bf00      	nop

00406358 <__aeabi_dcmplt>:
  406358:	f84d ed08 	str.w	lr, [sp, #-8]!
  40635c:	f7ff ffea 	bl	406334 <__aeabi_cdcmpeq>
  406360:	bf34      	ite	cc
  406362:	2001      	movcc	r0, #1
  406364:	2000      	movcs	r0, #0
  406366:	f85d fb08 	ldr.w	pc, [sp], #8
  40636a:	bf00      	nop

0040636c <__aeabi_dcmple>:
  40636c:	f84d ed08 	str.w	lr, [sp, #-8]!
  406370:	f7ff ffe0 	bl	406334 <__aeabi_cdcmpeq>
  406374:	bf94      	ite	ls
  406376:	2001      	movls	r0, #1
  406378:	2000      	movhi	r0, #0
  40637a:	f85d fb08 	ldr.w	pc, [sp], #8
  40637e:	bf00      	nop

00406380 <__aeabi_dcmpge>:
  406380:	f84d ed08 	str.w	lr, [sp, #-8]!
  406384:	f7ff ffce 	bl	406324 <__aeabi_cdrcmple>
  406388:	bf94      	ite	ls
  40638a:	2001      	movls	r0, #1
  40638c:	2000      	movhi	r0, #0
  40638e:	f85d fb08 	ldr.w	pc, [sp], #8
  406392:	bf00      	nop

00406394 <__aeabi_dcmpgt>:
  406394:	f84d ed08 	str.w	lr, [sp, #-8]!
  406398:	f7ff ffc4 	bl	406324 <__aeabi_cdrcmple>
  40639c:	bf34      	ite	cc
  40639e:	2001      	movcc	r0, #1
  4063a0:	2000      	movcs	r0, #0
  4063a2:	f85d fb08 	ldr.w	pc, [sp], #8
  4063a6:	bf00      	nop

004063a8 <__aeabi_dcmpun>:
  4063a8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4063ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4063b0:	d102      	bne.n	4063b8 <__aeabi_dcmpun+0x10>
  4063b2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  4063b6:	d10a      	bne.n	4063ce <__aeabi_dcmpun+0x26>
  4063b8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4063bc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4063c0:	d102      	bne.n	4063c8 <__aeabi_dcmpun+0x20>
  4063c2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  4063c6:	d102      	bne.n	4063ce <__aeabi_dcmpun+0x26>
  4063c8:	f04f 0000 	mov.w	r0, #0
  4063cc:	4770      	bx	lr
  4063ce:	f04f 0001 	mov.w	r0, #1
  4063d2:	4770      	bx	lr

004063d4 <__aeabi_d2iz>:
  4063d4:	ea4f 0241 	mov.w	r2, r1, lsl #1
  4063d8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  4063dc:	d215      	bcs.n	40640a <__aeabi_d2iz+0x36>
  4063de:	d511      	bpl.n	406404 <__aeabi_d2iz+0x30>
  4063e0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  4063e4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  4063e8:	d912      	bls.n	406410 <__aeabi_d2iz+0x3c>
  4063ea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  4063ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  4063f2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  4063f6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  4063fa:	fa23 f002 	lsr.w	r0, r3, r2
  4063fe:	bf18      	it	ne
  406400:	4240      	negne	r0, r0
  406402:	4770      	bx	lr
  406404:	f04f 0000 	mov.w	r0, #0
  406408:	4770      	bx	lr
  40640a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  40640e:	d105      	bne.n	40641c <__aeabi_d2iz+0x48>
  406410:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  406414:	bf08      	it	eq
  406416:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40641a:	4770      	bx	lr
  40641c:	f04f 0000 	mov.w	r0, #0
  406420:	4770      	bx	lr
  406422:	bf00      	nop

00406424 <__aeabi_uldivmod>:
  406424:	b953      	cbnz	r3, 40643c <__aeabi_uldivmod+0x18>
  406426:	b94a      	cbnz	r2, 40643c <__aeabi_uldivmod+0x18>
  406428:	2900      	cmp	r1, #0
  40642a:	bf08      	it	eq
  40642c:	2800      	cmpeq	r0, #0
  40642e:	bf1c      	itt	ne
  406430:	f04f 31ff 	movne.w	r1, #4294967295
  406434:	f04f 30ff 	movne.w	r0, #4294967295
  406438:	f000 b97a 	b.w	406730 <__aeabi_idiv0>
  40643c:	f1ad 0c08 	sub.w	ip, sp, #8
  406440:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  406444:	f000 f806 	bl	406454 <__udivmoddi4>
  406448:	f8dd e004 	ldr.w	lr, [sp, #4]
  40644c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  406450:	b004      	add	sp, #16
  406452:	4770      	bx	lr

00406454 <__udivmoddi4>:
  406454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  406458:	468c      	mov	ip, r1
  40645a:	460d      	mov	r5, r1
  40645c:	4604      	mov	r4, r0
  40645e:	9e08      	ldr	r6, [sp, #32]
  406460:	2b00      	cmp	r3, #0
  406462:	d151      	bne.n	406508 <__udivmoddi4+0xb4>
  406464:	428a      	cmp	r2, r1
  406466:	4617      	mov	r7, r2
  406468:	d96d      	bls.n	406546 <__udivmoddi4+0xf2>
  40646a:	fab2 fe82 	clz	lr, r2
  40646e:	f1be 0f00 	cmp.w	lr, #0
  406472:	d00b      	beq.n	40648c <__udivmoddi4+0x38>
  406474:	f1ce 0c20 	rsb	ip, lr, #32
  406478:	fa01 f50e 	lsl.w	r5, r1, lr
  40647c:	fa20 fc0c 	lsr.w	ip, r0, ip
  406480:	fa02 f70e 	lsl.w	r7, r2, lr
  406484:	ea4c 0c05 	orr.w	ip, ip, r5
  406488:	fa00 f40e 	lsl.w	r4, r0, lr
  40648c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  406490:	0c25      	lsrs	r5, r4, #16
  406492:	fbbc f8fa 	udiv	r8, ip, sl
  406496:	fa1f f987 	uxth.w	r9, r7
  40649a:	fb0a cc18 	mls	ip, sl, r8, ip
  40649e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  4064a2:	fb08 f309 	mul.w	r3, r8, r9
  4064a6:	42ab      	cmp	r3, r5
  4064a8:	d90a      	bls.n	4064c0 <__udivmoddi4+0x6c>
  4064aa:	19ed      	adds	r5, r5, r7
  4064ac:	f108 32ff 	add.w	r2, r8, #4294967295
  4064b0:	f080 8123 	bcs.w	4066fa <__udivmoddi4+0x2a6>
  4064b4:	42ab      	cmp	r3, r5
  4064b6:	f240 8120 	bls.w	4066fa <__udivmoddi4+0x2a6>
  4064ba:	f1a8 0802 	sub.w	r8, r8, #2
  4064be:	443d      	add	r5, r7
  4064c0:	1aed      	subs	r5, r5, r3
  4064c2:	b2a4      	uxth	r4, r4
  4064c4:	fbb5 f0fa 	udiv	r0, r5, sl
  4064c8:	fb0a 5510 	mls	r5, sl, r0, r5
  4064cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  4064d0:	fb00 f909 	mul.w	r9, r0, r9
  4064d4:	45a1      	cmp	r9, r4
  4064d6:	d909      	bls.n	4064ec <__udivmoddi4+0x98>
  4064d8:	19e4      	adds	r4, r4, r7
  4064da:	f100 33ff 	add.w	r3, r0, #4294967295
  4064de:	f080 810a 	bcs.w	4066f6 <__udivmoddi4+0x2a2>
  4064e2:	45a1      	cmp	r9, r4
  4064e4:	f240 8107 	bls.w	4066f6 <__udivmoddi4+0x2a2>
  4064e8:	3802      	subs	r0, #2
  4064ea:	443c      	add	r4, r7
  4064ec:	eba4 0409 	sub.w	r4, r4, r9
  4064f0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4064f4:	2100      	movs	r1, #0
  4064f6:	2e00      	cmp	r6, #0
  4064f8:	d061      	beq.n	4065be <__udivmoddi4+0x16a>
  4064fa:	fa24 f40e 	lsr.w	r4, r4, lr
  4064fe:	2300      	movs	r3, #0
  406500:	6034      	str	r4, [r6, #0]
  406502:	6073      	str	r3, [r6, #4]
  406504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406508:	428b      	cmp	r3, r1
  40650a:	d907      	bls.n	40651c <__udivmoddi4+0xc8>
  40650c:	2e00      	cmp	r6, #0
  40650e:	d054      	beq.n	4065ba <__udivmoddi4+0x166>
  406510:	2100      	movs	r1, #0
  406512:	e886 0021 	stmia.w	r6, {r0, r5}
  406516:	4608      	mov	r0, r1
  406518:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40651c:	fab3 f183 	clz	r1, r3
  406520:	2900      	cmp	r1, #0
  406522:	f040 808e 	bne.w	406642 <__udivmoddi4+0x1ee>
  406526:	42ab      	cmp	r3, r5
  406528:	d302      	bcc.n	406530 <__udivmoddi4+0xdc>
  40652a:	4282      	cmp	r2, r0
  40652c:	f200 80fa 	bhi.w	406724 <__udivmoddi4+0x2d0>
  406530:	1a84      	subs	r4, r0, r2
  406532:	eb65 0503 	sbc.w	r5, r5, r3
  406536:	2001      	movs	r0, #1
  406538:	46ac      	mov	ip, r5
  40653a:	2e00      	cmp	r6, #0
  40653c:	d03f      	beq.n	4065be <__udivmoddi4+0x16a>
  40653e:	e886 1010 	stmia.w	r6, {r4, ip}
  406542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406546:	b912      	cbnz	r2, 40654e <__udivmoddi4+0xfa>
  406548:	2701      	movs	r7, #1
  40654a:	fbb7 f7f2 	udiv	r7, r7, r2
  40654e:	fab7 fe87 	clz	lr, r7
  406552:	f1be 0f00 	cmp.w	lr, #0
  406556:	d134      	bne.n	4065c2 <__udivmoddi4+0x16e>
  406558:	1beb      	subs	r3, r5, r7
  40655a:	0c3a      	lsrs	r2, r7, #16
  40655c:	fa1f fc87 	uxth.w	ip, r7
  406560:	2101      	movs	r1, #1
  406562:	fbb3 f8f2 	udiv	r8, r3, r2
  406566:	0c25      	lsrs	r5, r4, #16
  406568:	fb02 3318 	mls	r3, r2, r8, r3
  40656c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  406570:	fb0c f308 	mul.w	r3, ip, r8
  406574:	42ab      	cmp	r3, r5
  406576:	d907      	bls.n	406588 <__udivmoddi4+0x134>
  406578:	19ed      	adds	r5, r5, r7
  40657a:	f108 30ff 	add.w	r0, r8, #4294967295
  40657e:	d202      	bcs.n	406586 <__udivmoddi4+0x132>
  406580:	42ab      	cmp	r3, r5
  406582:	f200 80d1 	bhi.w	406728 <__udivmoddi4+0x2d4>
  406586:	4680      	mov	r8, r0
  406588:	1aed      	subs	r5, r5, r3
  40658a:	b2a3      	uxth	r3, r4
  40658c:	fbb5 f0f2 	udiv	r0, r5, r2
  406590:	fb02 5510 	mls	r5, r2, r0, r5
  406594:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  406598:	fb0c fc00 	mul.w	ip, ip, r0
  40659c:	45a4      	cmp	ip, r4
  40659e:	d907      	bls.n	4065b0 <__udivmoddi4+0x15c>
  4065a0:	19e4      	adds	r4, r4, r7
  4065a2:	f100 33ff 	add.w	r3, r0, #4294967295
  4065a6:	d202      	bcs.n	4065ae <__udivmoddi4+0x15a>
  4065a8:	45a4      	cmp	ip, r4
  4065aa:	f200 80b8 	bhi.w	40671e <__udivmoddi4+0x2ca>
  4065ae:	4618      	mov	r0, r3
  4065b0:	eba4 040c 	sub.w	r4, r4, ip
  4065b4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4065b8:	e79d      	b.n	4064f6 <__udivmoddi4+0xa2>
  4065ba:	4631      	mov	r1, r6
  4065bc:	4630      	mov	r0, r6
  4065be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4065c2:	f1ce 0420 	rsb	r4, lr, #32
  4065c6:	fa05 f30e 	lsl.w	r3, r5, lr
  4065ca:	fa07 f70e 	lsl.w	r7, r7, lr
  4065ce:	fa20 f804 	lsr.w	r8, r0, r4
  4065d2:	0c3a      	lsrs	r2, r7, #16
  4065d4:	fa25 f404 	lsr.w	r4, r5, r4
  4065d8:	ea48 0803 	orr.w	r8, r8, r3
  4065dc:	fbb4 f1f2 	udiv	r1, r4, r2
  4065e0:	ea4f 4518 	mov.w	r5, r8, lsr #16
  4065e4:	fb02 4411 	mls	r4, r2, r1, r4
  4065e8:	fa1f fc87 	uxth.w	ip, r7
  4065ec:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  4065f0:	fb01 f30c 	mul.w	r3, r1, ip
  4065f4:	42ab      	cmp	r3, r5
  4065f6:	fa00 f40e 	lsl.w	r4, r0, lr
  4065fa:	d909      	bls.n	406610 <__udivmoddi4+0x1bc>
  4065fc:	19ed      	adds	r5, r5, r7
  4065fe:	f101 30ff 	add.w	r0, r1, #4294967295
  406602:	f080 808a 	bcs.w	40671a <__udivmoddi4+0x2c6>
  406606:	42ab      	cmp	r3, r5
  406608:	f240 8087 	bls.w	40671a <__udivmoddi4+0x2c6>
  40660c:	3902      	subs	r1, #2
  40660e:	443d      	add	r5, r7
  406610:	1aeb      	subs	r3, r5, r3
  406612:	fa1f f588 	uxth.w	r5, r8
  406616:	fbb3 f0f2 	udiv	r0, r3, r2
  40661a:	fb02 3310 	mls	r3, r2, r0, r3
  40661e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  406622:	fb00 f30c 	mul.w	r3, r0, ip
  406626:	42ab      	cmp	r3, r5
  406628:	d907      	bls.n	40663a <__udivmoddi4+0x1e6>
  40662a:	19ed      	adds	r5, r5, r7
  40662c:	f100 38ff 	add.w	r8, r0, #4294967295
  406630:	d26f      	bcs.n	406712 <__udivmoddi4+0x2be>
  406632:	42ab      	cmp	r3, r5
  406634:	d96d      	bls.n	406712 <__udivmoddi4+0x2be>
  406636:	3802      	subs	r0, #2
  406638:	443d      	add	r5, r7
  40663a:	1aeb      	subs	r3, r5, r3
  40663c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  406640:	e78f      	b.n	406562 <__udivmoddi4+0x10e>
  406642:	f1c1 0720 	rsb	r7, r1, #32
  406646:	fa22 f807 	lsr.w	r8, r2, r7
  40664a:	408b      	lsls	r3, r1
  40664c:	fa05 f401 	lsl.w	r4, r5, r1
  406650:	ea48 0303 	orr.w	r3, r8, r3
  406654:	fa20 fe07 	lsr.w	lr, r0, r7
  406658:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  40665c:	40fd      	lsrs	r5, r7
  40665e:	ea4e 0e04 	orr.w	lr, lr, r4
  406662:	fbb5 f9fc 	udiv	r9, r5, ip
  406666:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40666a:	fb0c 5519 	mls	r5, ip, r9, r5
  40666e:	fa1f f883 	uxth.w	r8, r3
  406672:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  406676:	fb09 f408 	mul.w	r4, r9, r8
  40667a:	42ac      	cmp	r4, r5
  40667c:	fa02 f201 	lsl.w	r2, r2, r1
  406680:	fa00 fa01 	lsl.w	sl, r0, r1
  406684:	d908      	bls.n	406698 <__udivmoddi4+0x244>
  406686:	18ed      	adds	r5, r5, r3
  406688:	f109 30ff 	add.w	r0, r9, #4294967295
  40668c:	d243      	bcs.n	406716 <__udivmoddi4+0x2c2>
  40668e:	42ac      	cmp	r4, r5
  406690:	d941      	bls.n	406716 <__udivmoddi4+0x2c2>
  406692:	f1a9 0902 	sub.w	r9, r9, #2
  406696:	441d      	add	r5, r3
  406698:	1b2d      	subs	r5, r5, r4
  40669a:	fa1f fe8e 	uxth.w	lr, lr
  40669e:	fbb5 f0fc 	udiv	r0, r5, ip
  4066a2:	fb0c 5510 	mls	r5, ip, r0, r5
  4066a6:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  4066aa:	fb00 f808 	mul.w	r8, r0, r8
  4066ae:	45a0      	cmp	r8, r4
  4066b0:	d907      	bls.n	4066c2 <__udivmoddi4+0x26e>
  4066b2:	18e4      	adds	r4, r4, r3
  4066b4:	f100 35ff 	add.w	r5, r0, #4294967295
  4066b8:	d229      	bcs.n	40670e <__udivmoddi4+0x2ba>
  4066ba:	45a0      	cmp	r8, r4
  4066bc:	d927      	bls.n	40670e <__udivmoddi4+0x2ba>
  4066be:	3802      	subs	r0, #2
  4066c0:	441c      	add	r4, r3
  4066c2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  4066c6:	eba4 0408 	sub.w	r4, r4, r8
  4066ca:	fba0 8902 	umull	r8, r9, r0, r2
  4066ce:	454c      	cmp	r4, r9
  4066d0:	46c6      	mov	lr, r8
  4066d2:	464d      	mov	r5, r9
  4066d4:	d315      	bcc.n	406702 <__udivmoddi4+0x2ae>
  4066d6:	d012      	beq.n	4066fe <__udivmoddi4+0x2aa>
  4066d8:	b156      	cbz	r6, 4066f0 <__udivmoddi4+0x29c>
  4066da:	ebba 030e 	subs.w	r3, sl, lr
  4066de:	eb64 0405 	sbc.w	r4, r4, r5
  4066e2:	fa04 f707 	lsl.w	r7, r4, r7
  4066e6:	40cb      	lsrs	r3, r1
  4066e8:	431f      	orrs	r7, r3
  4066ea:	40cc      	lsrs	r4, r1
  4066ec:	6037      	str	r7, [r6, #0]
  4066ee:	6074      	str	r4, [r6, #4]
  4066f0:	2100      	movs	r1, #0
  4066f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4066f6:	4618      	mov	r0, r3
  4066f8:	e6f8      	b.n	4064ec <__udivmoddi4+0x98>
  4066fa:	4690      	mov	r8, r2
  4066fc:	e6e0      	b.n	4064c0 <__udivmoddi4+0x6c>
  4066fe:	45c2      	cmp	sl, r8
  406700:	d2ea      	bcs.n	4066d8 <__udivmoddi4+0x284>
  406702:	ebb8 0e02 	subs.w	lr, r8, r2
  406706:	eb69 0503 	sbc.w	r5, r9, r3
  40670a:	3801      	subs	r0, #1
  40670c:	e7e4      	b.n	4066d8 <__udivmoddi4+0x284>
  40670e:	4628      	mov	r0, r5
  406710:	e7d7      	b.n	4066c2 <__udivmoddi4+0x26e>
  406712:	4640      	mov	r0, r8
  406714:	e791      	b.n	40663a <__udivmoddi4+0x1e6>
  406716:	4681      	mov	r9, r0
  406718:	e7be      	b.n	406698 <__udivmoddi4+0x244>
  40671a:	4601      	mov	r1, r0
  40671c:	e778      	b.n	406610 <__udivmoddi4+0x1bc>
  40671e:	3802      	subs	r0, #2
  406720:	443c      	add	r4, r7
  406722:	e745      	b.n	4065b0 <__udivmoddi4+0x15c>
  406724:	4608      	mov	r0, r1
  406726:	e708      	b.n	40653a <__udivmoddi4+0xe6>
  406728:	f1a8 0802 	sub.w	r8, r8, #2
  40672c:	443d      	add	r5, r7
  40672e:	e72b      	b.n	406588 <__udivmoddi4+0x134>

00406730 <__aeabi_idiv0>:
  406730:	4770      	bx	lr
  406732:	bf00      	nop

00406734 <sysfont_glyphs>:
	...
  406754:	0030 0030 0030 0030 0030 0030 0000 0030     0.0.0.0.0.0...0.
  406764:	0030 0000 0000 0000 0000 0000 006c 006c     0...........l.l.
  406774:	006c 006c 0000 0000 0000 0000 0000 0000     l.l.............
	...
  40678c:	0000 0028 0028 007c 0028 0028 007c 0028     ..(.(.|.(.(.|.(.
  40679c:	0028 0000 0000 0000 0000 0000 0010 003c     (.............<.
  4067ac:	0040 0020 0010 0008 0004 0078 0010 0000     @. .......x.....
	...
  4067c4:	0000 007c 00a4 00a8 0050 0028 0054 0094     ..|.....P.(.T...
  4067d4:	0088 0000 0000 0000 0000 0000 0060 0090     ............`...
  4067e4:	0090 0090 0060 0094 0088 0088 0070 0000     ....`.......p...
	...
  4067fc:	0010 0010 0010 0000 0000 0000 0000 0000     ................
	...
  406818:	0008 0010 0020 0020 0020 0020 0020 0020     .... . . . . . .
  406828:	0010 0008 0000 0000 0000 0000 0020 0010     ............ ...
  406838:	0008 0008 0008 0008 0008 0008 0010 0020     .............. .
  406848:	0000 0000 0000 0028 0010 007c 0010 0028     ......(...|...(.
	...
  406870:	0010 0010 0010 00fe 0010 0010 0010 0000     ................
	...
  406898:	0010 0030 0020 0000 0000 0000 0000 0000     ..0. ...........
  4068a8:	0000 0000 0000 007c 0000 0000 0000 0000     ......|.........
	...
  4068cc:	0000 0030 0030 0000 0000 0000 0000 0000     ..0.0...........
  4068dc:	0000 0008 0008 0010 0010 0020 0020 0040     .......... . .@.
  4068ec:	0040 0000 0000 0000 0000 0000 0000 0078     @.............x.
  4068fc:	0084 008c 0094 00a4 00c4 0084 0078 0000     ............x...
	...
  406914:	0000 0010 0030 0050 0010 0010 0010 0010     ....0.P.........
  406924:	007c 0000 0000 0000 0000 0000 0000 0070     |.............p.
  406934:	0088 0008 0010 0020 0040 0080 00f8 0000     ...... .@.......
	...
  40694c:	0000 0070 0088 0008 0030 0008 0008 0088     ..p.....0.......
  40695c:	0070 0000 0000 0000 0000 0000 0000 0008     p...............
  40696c:	0018 0028 0048 0088 00fc 0008 0008 0000     ..(.H...........
	...
  406984:	0000 0078 0080 0080 00f0 0008 0008 0008     ..x.............
  406994:	00f0 0000 0000 0000 0000 0000 0000 0030     ..............0.
  4069a4:	0040 0080 00f0 0088 0088 0088 0070 0000     @...........p...
	...
  4069bc:	0000 00f8 0008 0010 0010 0020 0020 0040     .......... . .@.
  4069cc:	0040 0000 0000 0000 0000 0000 0000 0070     @.............p.
  4069dc:	0088 0088 0070 0088 0088 0088 0070 0000     ....p.......p...
	...
  4069f4:	0000 0070 0088 0088 0088 0078 0008 0010     ..p.......x.....
  406a04:	0060 0000 0000 0000 0000 0000 0000 0000     `...............
  406a14:	0000 0030 0030 0000 0000 0030 0030 0000     ..0.0.....0.0...
	...
  406a30:	0000 0030 0030 0000 0000 0030 0030 0060     ..0.0.....0.0.`.
  406a40:	0040 0000 0000 0000 0000 0000 0008 0010     @...............
  406a50:	0020 0040 0020 0010 0008 0000 0000 0000      .@. ...........
	...
  406a6c:	007c 0000 007c 0000 0000 0000 0000 0000     |...|...........
	...
  406a84:	0040 0020 0010 0008 0010 0020 0040 0000     @. ....... .@...
	...
  406a9c:	0000 0030 0048 0008 0010 0020 0000 0000     ..0.H..... .....
  406aac:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
  406abc:	003c 0042 009a 00aa 00aa 00be 0080 0078     <.B...........x.
	...
  406ad4:	0000 0010 0028 0028 0044 007c 0044 0044     ....(.(.D.|.D.D.
  406ae4:	0044 0000 0000 0000 0000 0000 0000 00f8     D...............
  406af4:	0084 0084 00f8 0084 0084 0084 00f8 0000     ................
	...
  406b0c:	0000 003c 0040 0080 0080 0080 0080 0040     ..<.@.........@.
  406b1c:	003c 0000 0000 0000 0000 0000 0000 00f0     <...............
  406b2c:	0088 0084 0084 0084 0084 0088 00f0 0000     ................
	...
  406b44:	0000 00f8 0080 0080 00f0 0080 0080 0080     ................
  406b54:	00f8 0000 0000 0000 0000 0000 0000 00f8     ................
  406b64:	0080 0080 00f8 0080 0080 0080 0080 0000     ................
	...
  406b7c:	0000 003c 0040 0080 0080 009c 0084 0044     ..<.@.........D.
  406b8c:	0038 0000 0000 0000 0000 0000 0000 0088     8...............
  406b9c:	0088 0088 00f8 0088 0088 0088 0088 0000     ................
	...
  406bb4:	0000 00f8 0020 0020 0020 0020 0020 0020     .... . . . . . .
  406bc4:	00f8 0000 0000 0000 0000 0000 0000 00f8     ................
  406bd4:	0008 0008 0008 0008 0008 0008 00f0 0000     ................
	...
  406bec:	0000 0084 0088 0090 00a0 00d0 0088 0084     ................
  406bfc:	0084 0000 0000 0000 0000 0000 0000 0080     ................
  406c0c:	0080 0080 0080 0080 0080 0080 00fc 0000     ................
	...
  406c24:	0000 0084 00cc 00cc 00b4 00b4 0084 0084     ................
  406c34:	0084 0000 0000 0000 0000 0000 0000 0084     ................
  406c44:	00c4 00c4 00a4 00a4 0094 0094 008c 0000     ................
	...
  406c5c:	0000 0078 0084 0084 0084 0084 0084 0084     ..x.............
  406c6c:	0078 0000 0000 0000 0000 0000 0000 00f8     x...............
  406c7c:	0084 0084 0084 00f8 0080 0080 0080 0000     ................
	...
  406c94:	0000 0078 0084 0084 0084 0084 0084 0084     ..x.............
  406ca4:	0078 0020 0018 0000 0000 0000 0000 00f8     x. .............
  406cb4:	0084 0084 0084 00f8 0088 0084 0084 0000     ................
	...
  406ccc:	0000 007c 0080 0080 0060 0018 0004 0004     ..|.....`.......
  406cdc:	00f8 0000 0000 0000 0000 0000 0000 00f8     ................
  406cec:	0020 0020 0020 0020 0020 0020 0020 0000      . . . . . . ...
	...
  406d04:	0000 0084 0084 0084 0084 0084 0084 0084     ................
  406d14:	0078 0000 0000 0000 0000 0000 0000 0084     x...............
  406d24:	0084 0084 0048 0048 0048 0030 0030 0000     ....H.H.H.0.0...
	...
  406d3c:	0000 0088 00a8 00a8 00a8 00a8 00a8 0050     ..............P.
  406d4c:	0050 0000 0000 0000 0000 0000 0000 0088     P...............
  406d5c:	0088 0050 0020 0020 0050 0088 0088 0000     ..P. . .P.......
	...
  406d74:	0000 0088 0088 0088 0050 0050 0020 0020     ........P.P. . .
  406d84:	0020 0000 0000 0000 0000 0000 0000 00fc      ...............
  406d94:	0004 0008 0010 0020 0040 0080 00fc 0000     ...... .@.......
	...
  406dac:	0070 0040 0040 0040 0040 0040 0040 0040     p.@.@.@.@.@.@.@.
  406dbc:	0040 0040 0070 0000 0000 0000 0040 0040     @.@.p.......@.@.
  406dcc:	0020 0020 0020 0010 0010 0010 0008 0008      . . ...........
	...
  406de4:	0038 0008 0008 0008 0008 0008 0008 0008     8...............
  406df4:	0008 0008 0038 0000 0000 0000 0010 0028     ....8.........(.
  406e04:	0044 0000 0000 0000 0000 0000 0000 0000     D...............
	...
  406e2c:	0038 0000 0000 0000 0000 0000 0000 0020     8............. .
  406e3c:	0010 0000 0000 0000 0000 0000 0000 0000     ................
	...
  406e58:	0000 0070 0008 0008 0078 0088 007c 0000     ..p.....x...|...
	...
  406e70:	0080 0080 0080 00f8 0084 0084 0084 0084     ................
  406e80:	00f8 0000 0000 0000 0000 0000 0000 0000     ................
  406e90:	0000 0078 0080 0080 0080 0080 0078 0000     ..x.........x...
	...
  406ea8:	0004 0004 0004 007c 0084 0084 0084 008c     ......|.........
  406eb8:	0074 0000 0000 0000 0000 0000 0000 0000     t...............
  406ec8:	0000 0078 0084 00fc 0080 0080 007c 0000     ..x.........|...
	...
  406ee0:	001c 0020 0020 00fc 0020 0020 0020 0020     .. . ... . . . .
  406ef0:	00fc 0000 0000 0000 0000 0000 0000 0000     ................
  406f00:	0000 007c 0084 0084 0084 0084 007c 0004     ..|.........|...
  406f10:	0078 0000 0000 0000 0080 0080 0080 00b8     x...............
  406f20:	00c4 0084 0084 0084 0084 0000 0000 0000     ................
  406f30:	0000 0000 0000 0010 0000 0070 0010 0010     ..........p.....
  406f40:	0010 0010 007c 0000 0000 0000 0000 0000     ....|...........
  406f50:	0000 0008 0000 0078 0008 0008 0008 0008     ......x.........
  406f60:	0008 0008 0008 0070 0000 0000 0080 0080     ......p.........
  406f70:	0080 0088 0090 00a0 00d0 0088 0088 0000     ................
	...
  406f88:	00e0 0020 0020 0020 0020 0020 0020 0020     .. . . . . . . .
  406f98:	00f8 0000 0000 0000 0000 0000 0000 0000     ................
  406fa8:	0000 00a4 00fc 00a4 00a4 00a4 00a4 0000     ................
	...
  406fc4:	0000 00b8 00c4 0084 0084 0084 0084 0000     ................
	...
  406fe0:	0000 0078 0084 0084 0084 0084 0078 0000     ..x.........x...
	...
  406ffc:	0000 00b8 00c4 0084 0084 0084 00f8 0080     ................
  40700c:	0080 0000 0000 0000 0000 0000 0000 007c     ..............|.
  40701c:	0084 0084 0084 0084 007c 0004 0004 0000     ........|.......
	...
  407034:	0000 00d8 0060 0040 0040 0040 00f0 0000     ....`.@.@.@.....
	...
  407050:	0000 0078 0080 0040 0030 0008 00f0 0000     ..x...@.0.......
	...
  40706c:	0020 00fc 0020 0020 0020 0020 001c 0000      ... . . . .....
	...
  407088:	0000 0088 0088 0088 0088 0088 007c 0000     ............|...
	...
  4070a4:	0000 0084 0084 0084 0048 0048 0030 0000     ........H.H.0...
	...
  4070c0:	0000 0088 00a8 00a8 00a8 00a8 0050 0000     ............P...
	...
  4070dc:	0000 0088 0050 0020 0020 0050 0088 0000     ....P. . .P.....
	...
  4070f8:	0000 0084 0084 0048 0048 0030 0010 0020     ......H.H.0... .
  407108:	0040 0000 0000 0000 0000 0000 0000 00f8     @...............
  407118:	0008 0010 0020 0040 00f8 0000 0000 0000     .... .@.........
  407128:	0000 0000 0010 0020 0020 0010 0020 0020     ...... . ... . .
  407138:	0010 0020 0020 0010 0000 0000 0000 0000     .. . ...........
  407148:	0010 0010 0010 0010 0000 0000 0010 0010     ................
  407158:	0010 0010 0000 0000 0000 0000 0020 0010     ............ ...
  407168:	0010 0020 0010 0010 0020 0010 0010 0020     .. ..... ..... .
  407178:	0000 0000 07e2 0000 0003 0000 0013 0000     ................
  407188:	000c 0000 000f 0000 002d 0000 0001 0000     ........-.......
  407198:	3025 6432 253a 3230 3a64 3025 6432 0000     %02d:%02d:%02d..

004071a8 <_global_impure_ptr>:
  4071a8:	0028 2040 4e49 0046 6e69 0066 414e 004e     (.@ INF.inf.NAN.
  4071b8:	616e 006e 3130 3332 3534 3736 3938 4241     nan.0123456789AB
  4071c8:	4443 4645 0000 0000 3130 3332 3534 3736     CDEF....01234567
  4071d8:	3938 6261 6463 6665 0000 0000 6e28 6c75     89abcdef....(nul
  4071e8:	296c 0000 0030 0000                         l)..0...

004071f0 <blanks.7223>:
  4071f0:	2020 2020 2020 2020 2020 2020 2020 2020                     

00407200 <zeroes.7224>:
  407200:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
  407210:	6e49 6966 696e 7974 0000 0000 614e 004e     Infinity....NaN.

00407220 <__mprec_bigtens>:
  407220:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
  407230:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
  407240:	bf3c 7f73 4fdd 7515                         <.s..O.u

00407248 <__mprec_tens>:
  407248:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
  407258:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
  407268:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
  407278:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
  407288:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
  407298:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
  4072a8:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
  4072b8:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
  4072c8:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
  4072d8:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
  4072e8:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
  4072f8:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
  407308:	9db4 79d9 7843 44ea                         ...yCx.D

00407310 <p05.6055>:
  407310:	0005 0000 0019 0000 007d 0000 0043 0000     ........}...C...
  407320:	4f50 4953 0058 0000 002e 0000               POSIX.......

0040732c <_ctype_>:
  40732c:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
  40733c:	2020 2020 2020 2020 2020 2020 2020 2020                     
  40734c:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
  40735c:	0410 0404 0404 0404 0404 1004 1010 1010     ................
  40736c:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
  40737c:	0101 0101 0101 0101 0101 0101 1010 1010     ................
  40738c:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
  40739c:	0202 0202 0202 0202 0202 0202 1010 1010     ................
  4073ac:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

00407430 <_init>:
  407430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407432:	bf00      	nop
  407434:	bcf8      	pop	{r3, r4, r5, r6, r7}
  407436:	bc08      	pop	{r3}
  407438:	469e      	mov	lr, r3
  40743a:	4770      	bx	lr

0040743c <__init_array_start>:
  40743c:	004033d1 	.word	0x004033d1

00407440 <__frame_dummy_init_array_entry>:
  407440:	00400165                                e.@.

00407444 <_fini>:
  407444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  407446:	bf00      	nop
  407448:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40744a:	bc08      	pop	{r3}
  40744c:	469e      	mov	lr, r3
  40744e:	4770      	bx	lr

00407450 <__fini_array_start>:
  407450:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
	...

2040000c <sysfont>:
2040000c:	0000 0000 6734 0040 0e0a 7d20               ....4g@... }

20400018 <g_interrupt_enabled>:
20400018:	0001 0000                                   ....

2040001c <SystemCoreClock>:
2040001c:	0900 003d                                   ..=.

20400020 <_impure_ptr>:
20400020:	0028 2040 0000 0000                         (.@ ....

20400028 <impure_data>:
20400028:	0000 0000 0314 2040 037c 2040 03e4 2040     ......@ |.@ ..@ 
	...
204000d0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000e0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400450 <__atexit_recursive_mutex>:
20400450:	0cac 2040                                   ..@ 

20400454 <__malloc_av_>:
	...
2040045c:	0454 2040 0454 2040 045c 2040 045c 2040     T.@ T.@ \.@ \.@ 
2040046c:	0464 2040 0464 2040 046c 2040 046c 2040     d.@ d.@ l.@ l.@ 
2040047c:	0474 2040 0474 2040 047c 2040 047c 2040     t.@ t.@ |.@ |.@ 
2040048c:	0484 2040 0484 2040 048c 2040 048c 2040     ..@ ..@ ..@ ..@ 
2040049c:	0494 2040 0494 2040 049c 2040 049c 2040     ..@ ..@ ..@ ..@ 
204004ac:	04a4 2040 04a4 2040 04ac 2040 04ac 2040     ..@ ..@ ..@ ..@ 
204004bc:	04b4 2040 04b4 2040 04bc 2040 04bc 2040     ..@ ..@ ..@ ..@ 
204004cc:	04c4 2040 04c4 2040 04cc 2040 04cc 2040     ..@ ..@ ..@ ..@ 
204004dc:	04d4 2040 04d4 2040 04dc 2040 04dc 2040     ..@ ..@ ..@ ..@ 
204004ec:	04e4 2040 04e4 2040 04ec 2040 04ec 2040     ..@ ..@ ..@ ..@ 
204004fc:	04f4 2040 04f4 2040 04fc 2040 04fc 2040     ..@ ..@ ..@ ..@ 
2040050c:	0504 2040 0504 2040 050c 2040 050c 2040     ..@ ..@ ..@ ..@ 
2040051c:	0514 2040 0514 2040 051c 2040 051c 2040     ..@ ..@ ..@ ..@ 
2040052c:	0524 2040 0524 2040 052c 2040 052c 2040     $.@ $.@ ,.@ ,.@ 
2040053c:	0534 2040 0534 2040 053c 2040 053c 2040     4.@ 4.@ <.@ <.@ 
2040054c:	0544 2040 0544 2040 054c 2040 054c 2040     D.@ D.@ L.@ L.@ 
2040055c:	0554 2040 0554 2040 055c 2040 055c 2040     T.@ T.@ \.@ \.@ 
2040056c:	0564 2040 0564 2040 056c 2040 056c 2040     d.@ d.@ l.@ l.@ 
2040057c:	0574 2040 0574 2040 057c 2040 057c 2040     t.@ t.@ |.@ |.@ 
2040058c:	0584 2040 0584 2040 058c 2040 058c 2040     ..@ ..@ ..@ ..@ 
2040059c:	0594 2040 0594 2040 059c 2040 059c 2040     ..@ ..@ ..@ ..@ 
204005ac:	05a4 2040 05a4 2040 05ac 2040 05ac 2040     ..@ ..@ ..@ ..@ 
204005bc:	05b4 2040 05b4 2040 05bc 2040 05bc 2040     ..@ ..@ ..@ ..@ 
204005cc:	05c4 2040 05c4 2040 05cc 2040 05cc 2040     ..@ ..@ ..@ ..@ 
204005dc:	05d4 2040 05d4 2040 05dc 2040 05dc 2040     ..@ ..@ ..@ ..@ 
204005ec:	05e4 2040 05e4 2040 05ec 2040 05ec 2040     ..@ ..@ ..@ ..@ 
204005fc:	05f4 2040 05f4 2040 05fc 2040 05fc 2040     ..@ ..@ ..@ ..@ 
2040060c:	0604 2040 0604 2040 060c 2040 060c 2040     ..@ ..@ ..@ ..@ 
2040061c:	0614 2040 0614 2040 061c 2040 061c 2040     ..@ ..@ ..@ ..@ 
2040062c:	0624 2040 0624 2040 062c 2040 062c 2040     $.@ $.@ ,.@ ,.@ 
2040063c:	0634 2040 0634 2040 063c 2040 063c 2040     4.@ 4.@ <.@ <.@ 
2040064c:	0644 2040 0644 2040 064c 2040 064c 2040     D.@ D.@ L.@ L.@ 
2040065c:	0654 2040 0654 2040 065c 2040 065c 2040     T.@ T.@ \.@ \.@ 
2040066c:	0664 2040 0664 2040 066c 2040 066c 2040     d.@ d.@ l.@ l.@ 
2040067c:	0674 2040 0674 2040 067c 2040 067c 2040     t.@ t.@ |.@ |.@ 
2040068c:	0684 2040 0684 2040 068c 2040 068c 2040     ..@ ..@ ..@ ..@ 
2040069c:	0694 2040 0694 2040 069c 2040 069c 2040     ..@ ..@ ..@ ..@ 
204006ac:	06a4 2040 06a4 2040 06ac 2040 06ac 2040     ..@ ..@ ..@ ..@ 
204006bc:	06b4 2040 06b4 2040 06bc 2040 06bc 2040     ..@ ..@ ..@ ..@ 
204006cc:	06c4 2040 06c4 2040 06cc 2040 06cc 2040     ..@ ..@ ..@ ..@ 
204006dc:	06d4 2040 06d4 2040 06dc 2040 06dc 2040     ..@ ..@ ..@ ..@ 
204006ec:	06e4 2040 06e4 2040 06ec 2040 06ec 2040     ..@ ..@ ..@ ..@ 
204006fc:	06f4 2040 06f4 2040 06fc 2040 06fc 2040     ..@ ..@ ..@ ..@ 
2040070c:	0704 2040 0704 2040 070c 2040 070c 2040     ..@ ..@ ..@ ..@ 
2040071c:	0714 2040 0714 2040 071c 2040 071c 2040     ..@ ..@ ..@ ..@ 
2040072c:	0724 2040 0724 2040 072c 2040 072c 2040     $.@ $.@ ,.@ ,.@ 
2040073c:	0734 2040 0734 2040 073c 2040 073c 2040     4.@ 4.@ <.@ <.@ 
2040074c:	0744 2040 0744 2040 074c 2040 074c 2040     D.@ D.@ L.@ L.@ 
2040075c:	0754 2040 0754 2040 075c 2040 075c 2040     T.@ T.@ \.@ \.@ 
2040076c:	0764 2040 0764 2040 076c 2040 076c 2040     d.@ d.@ l.@ l.@ 
2040077c:	0774 2040 0774 2040 077c 2040 077c 2040     t.@ t.@ |.@ |.@ 
2040078c:	0784 2040 0784 2040 078c 2040 078c 2040     ..@ ..@ ..@ ..@ 
2040079c:	0794 2040 0794 2040 079c 2040 079c 2040     ..@ ..@ ..@ ..@ 
204007ac:	07a4 2040 07a4 2040 07ac 2040 07ac 2040     ..@ ..@ ..@ ..@ 
204007bc:	07b4 2040 07b4 2040 07bc 2040 07bc 2040     ..@ ..@ ..@ ..@ 
204007cc:	07c4 2040 07c4 2040 07cc 2040 07cc 2040     ..@ ..@ ..@ ..@ 
204007dc:	07d4 2040 07d4 2040 07dc 2040 07dc 2040     ..@ ..@ ..@ ..@ 
204007ec:	07e4 2040 07e4 2040 07ec 2040 07ec 2040     ..@ ..@ ..@ ..@ 
204007fc:	07f4 2040 07f4 2040 07fc 2040 07fc 2040     ..@ ..@ ..@ ..@ 
2040080c:	0804 2040 0804 2040 080c 2040 080c 2040     ..@ ..@ ..@ ..@ 
2040081c:	0814 2040 0814 2040 081c 2040 081c 2040     ..@ ..@ ..@ ..@ 
2040082c:	0824 2040 0824 2040 082c 2040 082c 2040     $.@ $.@ ,.@ ,.@ 
2040083c:	0834 2040 0834 2040 083c 2040 083c 2040     4.@ 4.@ <.@ <.@ 
2040084c:	0844 2040 0844 2040 084c 2040 084c 2040     D.@ D.@ L.@ L.@ 

2040085c <__malloc_sbrk_base>:
2040085c:	ffff ffff                                   ....

20400860 <__malloc_trim_threshold>:
20400860:	0000 0002                                   ....

20400864 <__global_locale>:
20400864:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400884:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008a4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008c4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008e4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400904:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400924:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400944:	5ae9 0040 56a9 0040 0000 0000 732c 0040     .Z@..V@.....,s@.
20400954:	7328 0040 71cc 0040 71cc 0040 71cc 0040     (s@..q@..q@..q@.
20400964:	71cc 0040 71cc 0040 71cc 0040 71cc 0040     .q@..q@..q@..q@.
20400974:	71cc 0040 71cc 0040 ffff ffff ffff ffff     .q@..q@.........
20400984:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
204009ac:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
